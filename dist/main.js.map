{"version":3,"file":"main.js","sources":["../lib/scripts/controls/OrbitControls.js","../lib/scripts/core/settings.ts","../lib/scripts/logic/Tile.ts","../lib/scripts/logic/board.ts","../lib/scripts/core/properties.ts","../../../../../../assets/BASE.buf?inline","../../../../../../assets/BOX.buf?inline","../../../../../../assets/COIN.buf?inline","../../../../../../assets/COIN_PLACEMENT.buf?inline","../../../../../../assets/LOSE_ANIMATION.buf?inline","../../../../../../assets/gobo.jpg?url","../../../../../../assets/LDR_RGB1_0.png?url","../../../../../../assets/matcap_gold.jpg?url","../lib/scripts/core/loader.ts","../lib/scripts/utils/math.ts","../lib/scripts/utils/ease.ts","../lib/scripts/utils/blueNoise/getBlueNoise.glsl?raw","../lib/scripts/utils/blueNoise/blueNoise.ts","../lib/scripts/logic/signals.ts","../lib/types/stateManager.ts","../lib/scripts/logic/stateManager.ts","../lib/scripts/logic/Block.ts","../lib/scripts/logic/stopAnimationManager.ts","../lib/scripts/logic/errorAnimationManager.ts","../lib/scripts/logic/successAnimationManager.ts","../lib/scripts/logic/systemManager.ts","../lib/scripts/visuals/hero/hero.vert?raw","../lib/scripts/visuals/hero/hero.frag?raw","../lib/scripts/visuals/hero/heroDepth.frag?raw","../lib/scripts/visuals/hero/HeroBlockCoordinates.ts","../lib/scripts/visuals/hero/hero.ts","../lib/scripts/visuals/coins/coins.vert?raw","../lib/scripts/visuals/coins/coins.frag?raw","../lib/scripts/visuals/coins/coinsDepth.frag?raw","../lib/scripts/visuals/coins/coins.ts","../lib/scripts/visuals/bg/bg.vert?raw","../lib/scripts/visuals/bg/bg.frag?raw","../lib/scripts/visuals/bg/particles.vert?raw","../lib/scripts/visuals/bg/particles.frag?raw","../lib/scripts/visuals/bg/bg.ts","../lib/scripts/index.ts","../lib/main.ts"],"sourcesContent":["// https://github.com/mrdoob/three.js/blob/d7f2d9ac3af4228f0940d3b2410b1ad6f0dda529/examples/jsm/controls/OrbitControls.js#L43\n// eslint-disable @typescript-eslint/no-this-alias\n// @typescript-eslint-disable @typescript-eslint/no-this-alias\n\nimport { EventDispatcher, MOUSE, Quaternion, Spherical, TOUCH, Vector2, Vector3 } from 'three';\n\n/**\n * This set of controls performs orbiting, dollying (zooming), and panning.\n * Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n *\n *    Orbit - left mouse / touch: one-finger move\n *    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n *    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n */\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\n\nclass OrbitControls extends EventDispatcher {\n\tconstructor(object, domElement) {\n\t\tsuper();\n\n\t\tif (domElement === undefined) console.warn('THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.');\n\t\tif (domElement === document) console.error('THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n\n\t\tthis.object = object;\n\t\tthis.domElement = domElement;\n\t\tthis.domElement.style.touchAction = 'none'; // disable touch scroll\n\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\tthis.target = new Vector3();\n\n\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\n\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = Math.PI * 0.2; // radians\n\t\tthis.maxPolarAngle = Math.PI * 0.45; // radians\n\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\t\tthis.minAzimuthAngle = -Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.15;\n\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = false;\n\t\tthis.zoomSpeed = 1.0;\n\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 0.5;\n\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = false;\n\t\tthis.panSpeed = 1.0;\n\t\tthis.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };\n\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n\t\t// Touch fingers\n\t\tthis.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n\t\t// for reset\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\t\tthis.scale = 1;\n\n\t\t// the target DOM element for key events\n\n\t\t//\n\t\t// public methods\n\t\t//\n\n\t\tthis.reset = function () {\n\t\t\tscope.target.copy(scope.target0);\n\t\t\tscope.object.position.copy(scope.position0);\n\t\t\tscope.object.zoom = scope.zoom0;\n\t\t\tscope.scale = 1;\n\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent(_changeEvent);\n\n\t\t\tscope.update();\n\n\t\t\tstate = STATE.NONE;\n\t\t};\n\n\t\tthis.update = (function () {\n\t\t\tconst offset = new Vector3();\n\n\t\t\t// so camera.up is the orbit axis\n\t\t\tconst quat = new Quaternion().setFromUnitVectors(object.up, new Vector3(0, 1, 0));\n\t\t\tconst quatInverse = quat.clone().invert();\n\n\t\t\tconst lastPosition = new Vector3();\n\t\t\tconst lastQuaternion = new Quaternion();\n\n\t\t\tconst twoPI = 2 * Math.PI;\n\n\t\t\treturn function update() {\n\t\t\t\tconst position = scope.object.position;\n\t\t\t\toffset.copy(position).sub(scope.target);\n\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion(quat);\n\n\t\t\t\t// angle from z-axis around y-axis\n\t\t\t\tspherical.setFromVector3(offset);\n\n\t\t\t\tif (scope.autoRotate && state === STATE.NONE) {\n\t\t\t\t\trotateLeft(getAutoRotationAngle());\n\t\t\t\t}\n\n\t\t\t\tif (scope.enableDamping) {\n\t\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\t\t\t\t} else {\n\t\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\t\tspherical.phi += sphericalDelta.phi;\n\t\t\t\t}\n\n\t\t\t\t// restrict theta to be between desired limits\n\n\t\t\t\tlet min = scope.minAzimuthAngle;\n\t\t\t\tlet max = scope.maxAzimuthAngle;\n\n\t\t\t\tif (isFinite(min) && isFinite(max)) {\n\t\t\t\t\tif (min < -Math.PI) min += twoPI;\n\t\t\t\t\telse if (min > Math.PI) min -= twoPI;\n\n\t\t\t\t\tif (max < -Math.PI) max += twoPI;\n\t\t\t\t\telse if (max > Math.PI) max -= twoPI;\n\n\t\t\t\t\tif (min <= max) {\n\t\t\t\t\t\tspherical.theta = Math.max(min, Math.min(max, spherical.theta));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tspherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tspherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));\n\n\t\t\t\tspherical.makeSafe();\n\n\t\t\t\tlet scale = scope.enableDamping ? (scope.scale - 1) * scope.dampingFactor + 1 : scope.scale;\n\t\t\t\tspherical.radius *= scale;\n\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tspherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius));\n\n\t\t\t\t// move target to panned location\n\n\t\t\t\tif (scope.enableDamping === true) {\n\t\t\t\t\tscope.target.addScaledVector(panOffset, scope.dampingFactor);\n\t\t\t\t} else {\n\t\t\t\t\tscope.target.add(panOffset);\n\t\t\t\t}\n\n\t\t\t\toffset.setFromSpherical(spherical);\n\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion(quatInverse);\n\n\t\t\t\tposition.copy(scope.target).add(offset);\n\n\t\t\t\tscope.object.lookAt(scope.target);\n\n\t\t\t\tif (scope.enableDamping === true) {\n\t\t\t\t\tsphericalDelta.theta *= 1 - scope.dampingFactor;\n\t\t\t\t\tsphericalDelta.phi *= 1 - scope.dampingFactor;\n\n\t\t\t\t\tpanOffset.multiplyScalar(1 - scope.dampingFactor);\n\t\t\t\t} else {\n\t\t\t\t\tsphericalDelta.set(0, 0, 0);\n\n\t\t\t\t\tpanOffset.set(0, 0, 0);\n\t\t\t\t}\n\n\t\t\t\tscope.scale = scope.scale / scale;\n\n\t\t\t\t/**\n\t\t\t\t * update condition is:\n\t\t\t\t * min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t * using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\t\t\t\t */\n\t\t\t\tif (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n\t\t\t\t\tscope.dispatchEvent(_changeEvent);\n\t\t\t\t\tlastPosition.copy(scope.object.position);\n\t\t\t\t\tlastQuaternion.copy(scope.object.quaternion);\n\t\t\t\t\tzoomChanged = false;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t};\n\t\t})();\n\n\t\t/**\n\t\t * INTERNALS\n\t\t */\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tconst scope = this;\n\n\t\tconst STATE = {\n\t\t\tNONE: -1,\n\t\t\tROTATE: 0,\n\t\t\tDOLLY: 1,\n\t\t\tPAN: 2,\n\t\t\tTOUCH_ROTATE: 3,\n\t\t\tTOUCH_PAN: 4,\n\t\t\tTOUCH_DOLLY_PAN: 5,\n\t\t\tTOUCH_DOLLY_ROTATE: 6,\n\t\t};\n\n\t\tlet state = STATE.NONE;\n\n\t\tconst EPS = 0.000001;\n\n\t\t// current position in spherical coordinates\n\t\tconst spherical = new Spherical();\n\t\tconst sphericalDelta = new Spherical();\n\n\t\tconst panOffset = new Vector3();\n\t\tlet zoomChanged = false;\n\n\t\tconst rotateStart = new Vector2();\n\t\tconst rotateEnd = new Vector2();\n\t\tconst rotateDelta = new Vector2();\n\n\t\tconst panStart = new Vector2();\n\t\tconst panEnd = new Vector2();\n\t\tconst panDelta = new Vector2();\n\n\t\tconst dollyStart = new Vector2();\n\t\tconst dollyEnd = new Vector2();\n\t\tconst dollyDelta = new Vector2();\n\n\t\tconst pointers = [];\n\t\tconst pointerPositions = {};\n\n\t\tfunction getAutoRotationAngle() {\n\t\t\treturn ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\n\t\t}\n\n\t\tfunction getZoomScale() {\n\t\t\treturn Math.pow(0.95, scope.zoomSpeed);\n\t\t}\n\n\t\tfunction rotateLeft(angle) {\n\t\t\tsphericalDelta.theta -= angle;\n\t\t}\n\n\t\tfunction rotateUp(angle) {\n\t\t\tsphericalDelta.phi -= angle;\n\t\t}\n\n\t\tconst panLeft = (function () {\n\t\t\tconst v = new Vector3();\n\n\t\t\treturn function panLeft(distance, objectMatrix) {\n\t\t\t\tv.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n\t\t\t\tv.multiplyScalar(-distance);\n\n\t\t\t\tpanOffset.add(v);\n\t\t\t};\n\t\t})();\n\n\t\tconst panUp = (function () {\n\t\t\tconst v = new Vector3();\n\n\t\t\treturn function panUp(distance, objectMatrix) {\n\t\t\t\tif (scope.screenSpacePanning === true) {\n\t\t\t\t\tv.setFromMatrixColumn(objectMatrix, 1);\n\t\t\t\t} else {\n\t\t\t\t\tv.setFromMatrixColumn(objectMatrix, 0);\n\t\t\t\t\tv.crossVectors(scope.object.up, v);\n\t\t\t\t}\n\n\t\t\t\tv.multiplyScalar(distance);\n\n\t\t\t\tpanOffset.add(v);\n\t\t\t};\n\t\t})();\n\n\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\tconst pan = (function () {\n\t\t\tconst offset = new Vector3();\n\n\t\t\treturn function pan(deltaX, deltaY) {\n\t\t\t\tconst element = scope.domElement;\n\n\t\t\t\tif (scope.object.isPerspectiveCamera) {\n\t\t\t\t\t// perspective\n\t\t\t\t\tconst position = scope.object.position;\n\t\t\t\t\toffset.copy(position).sub(scope.target);\n\t\t\t\t\tlet targetDistance = offset.length();\n\n\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\ttargetDistance *= Math.tan(((scope.object.fov / 2) * Math.PI) / 180.0);\n\n\t\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\t\tpanLeft((2 * deltaX * targetDistance) / element.clientHeight, scope.object.matrix);\n\t\t\t\t\tpanUp((2 * deltaY * targetDistance) / element.clientHeight, scope.object.matrix);\n\t\t\t\t} else if (scope.object.isOrthographicCamera) {\n\t\t\t\t\t// orthographic\n\t\t\t\t\tpanLeft((deltaX * (scope.object.right - scope.object.left)) / scope.object.zoom / element.clientWidth, scope.object.matrix);\n\t\t\t\t\tpanUp((deltaY * (scope.object.top - scope.object.bottom)) / scope.object.zoom / element.clientHeight, scope.object.matrix);\n\t\t\t\t} else {\n\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\tconsole.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n\t\t\t\t\tscope.enablePan = false;\n\t\t\t\t}\n\t\t\t};\n\t\t})();\n\n\t\tfunction dollyOut(dollyScale) {\n\t\t\tif (scope.object.isPerspectiveCamera) {\n\t\t\t\tscope.scale /= dollyScale;\n\t\t\t} else if (scope.object.isOrthographicCamera) {\n\t\t\t\tscope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\t\t\t} else {\n\t\t\t\tconsole.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n\t\t\t\tscope.enableZoom = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction dollyIn(dollyScale) {\n\t\t\tif (scope.object.isPerspectiveCamera) {\n\t\t\t\tscope.scale *= dollyScale;\n\t\t\t} else if (scope.object.isOrthographicCamera) {\n\t\t\t\tscope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\t\t\t} else {\n\t\t\t\tconsole.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n\t\t\t\tscope.enableZoom = false;\n\t\t\t}\n\t\t}\n\n\t\t//\n\t\t// event callbacks - update the object state\n\t\t//\n\n\t\tfunction handleMouseDownRotate(event) {\n\t\t\trotateStart.set(event.clientX, event.clientY);\n\t\t}\n\n\t\tfunction handleMouseDownDolly(event) {\n\t\t\tdollyStart.set(event.clientX, event.clientY);\n\t\t}\n\n\t\tfunction handleMouseDownPan(event) {\n\t\t\tpanStart.set(event.clientX, event.clientY);\n\t\t}\n\n\t\tfunction handleMouseMoveRotate(event) {\n\t\t\trotateEnd.set(event.clientX, event.clientY);\n\t\t\trotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n\n\t\t\tconst element = scope.domElement;\n\t\t\trotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight);\n\t\t\trotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight);\n\t\t\trotateStart.copy(rotateEnd);\n\t\t\tscope.update();\n\t\t}\n\n\t\tfunction handleMouseMoveDolly(event) {\n\t\t\tdollyEnd.set(event.clientX, event.clientY);\n\t\t\tdollyDelta.subVectors(dollyEnd, dollyStart);\n\n\t\t\tif (dollyDelta.y > 0) {\n\t\t\t\tdollyOut(getZoomScale());\n\t\t\t} else if (dollyDelta.y < 0) {\n\t\t\t\tdollyIn(getZoomScale());\n\t\t\t}\n\n\t\t\tdollyStart.copy(dollyEnd);\n\t\t\tscope.update();\n\t\t}\n\n\t\tfunction handleMouseMovePan(event) {\n\t\t\tpanEnd.set(event.clientX, event.clientY);\n\t\t\tpanDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n\t\t\tpan(panDelta.x, panDelta.y);\n\t\t\tpanStart.copy(panEnd);\n\t\t\tscope.update();\n\t\t}\n\n\t\tfunction handleMouseWheel(event) {\n\t\t\tif (event.deltaY < 0) {\n\t\t\t\tdollyIn(getZoomScale());\n\t\t\t} else if (event.deltaY > 0) {\n\t\t\t\tdollyOut(getZoomScale());\n\t\t\t}\n\n\t\t\tscope.update();\n\t\t}\n\n\t\tfunction handleTouchStartRotate() {\n\t\t\tif (pointers.length === 1) {\n\t\t\t\trotateStart.set(pointers[0].pageX, pointers[0].pageY);\n\t\t\t} else {\n\t\t\t\tconst x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n\t\t\t\tconst y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n\n\t\t\t\trotateStart.set(x, y);\n\t\t\t}\n\t\t}\n\n\t\tfunction handleTouchStartPan() {\n\t\t\tif (pointers.length === 1) {\n\t\t\t\tpanStart.set(pointers[0].pageX, pointers[0].pageY);\n\t\t\t} else {\n\t\t\t\tconst x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n\t\t\t\tconst y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n\n\t\t\t\tpanStart.set(x, y);\n\t\t\t}\n\t\t}\n\n\t\tfunction handleTouchStartDolly() {\n\t\t\tconst dx = pointers[0].pageX - pointers[1].pageX;\n\t\t\tconst dy = pointers[0].pageY - pointers[1].pageY;\n\t\t\tconst distance = Math.sqrt(dx * dx + dy * dy);\n\t\t\tdollyStart.set(0, distance);\n\t\t}\n\n\t\tfunction handleTouchStartDollyPan() {\n\t\t\tif (scope.enableZoom) handleTouchStartDolly();\n\t\t\tif (scope.enablePan) handleTouchStartPan();\n\t\t}\n\n\t\tfunction handleTouchStartDollyRotate() {\n\t\t\tif (scope.enableZoom) handleTouchStartDolly();\n\t\t\tif (scope.enableRotate) handleTouchStartRotate();\n\t\t}\n\n\t\tfunction handleTouchMoveRotate(event) {\n\t\t\tif (pointers.length === 1) {\n\t\t\t\trotateEnd.set(event.pageX, event.pageY);\n\t\t\t} else {\n\t\t\t\tconst position = getSecondPointerPosition(event);\n\t\t\t\tconst x = 0.5 * (event.pageX + position.x);\n\t\t\t\tconst y = 0.5 * (event.pageY + position.y);\n\t\t\t\trotateEnd.set(x, y);\n\t\t\t}\n\n\t\t\trotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n\n\t\t\tconst element = scope.domElement;\n\t\t\trotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight);\n\t\t\trotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight);\n\t\t\trotateStart.copy(rotateEnd);\n\t\t}\n\n\t\tfunction handleTouchMovePan(event) {\n\t\t\tif (pointers.length === 1) {\n\t\t\t\tpanEnd.set(event.pageX, event.pageY);\n\t\t\t} else {\n\t\t\t\tconst position = getSecondPointerPosition(event);\n\t\t\t\tconst x = 0.5 * (event.pageX + position.x);\n\t\t\t\tconst y = 0.5 * (event.pageY + position.y);\n\t\t\t\tpanEnd.set(x, y);\n\t\t\t}\n\n\t\t\tpanDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n\t\t\tpan(panDelta.x, panDelta.y);\n\t\t\tpanStart.copy(panEnd);\n\t\t}\n\n\t\tfunction handleTouchMoveDolly(event) {\n\t\t\tconst position = getSecondPointerPosition(event);\n\t\t\tconst dx = event.pageX - position.x;\n\t\t\tconst dy = event.pageY - position.y;\n\t\t\tconst distance = Math.sqrt(dx * dx + dy * dy);\n\n\t\t\tdollyEnd.set(0, distance);\n\t\t\tdollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));\n\t\t\tdollyOut(dollyDelta.y);\n\t\t\tdollyStart.copy(dollyEnd);\n\t\t}\n\n\t\tfunction handleTouchMoveDollyPan(event) {\n\t\t\tif (scope.enableZoom) handleTouchMoveDolly(event);\n\t\t\tif (scope.enablePan) handleTouchMovePan(event);\n\t\t}\n\n\t\tfunction handleTouchMoveDollyRotate(event) {\n\t\t\tif (scope.enableZoom) handleTouchMoveDolly(event);\n\t\t\tif (scope.enableRotate) handleTouchMoveRotate(event);\n\t\t}\n\n\t\t/**\n\t\t * event handlers - FSM: listen for events and reset state\n\t\t */\n\n\t\tfunction onPointerDown(event) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (pointers.length === 0) {\n\t\t\t\tscope.domElement.setPointerCapture(event.pointerId);\n\t\t\t\tscope.domElement.addEventListener('pointermove', onPointerMove);\n\t\t\t\tscope.domElement.addEventListener('pointerup', onPointerUp);\n\t\t\t}\n\n\t\t\taddPointer(event);\n\n\t\t\tif (event.pointerType === 'touch') {\n\t\t\t\tonTouchStart(event);\n\t\t\t} else {\n\t\t\t\tonMouseDown(event);\n\t\t\t}\n\t\t}\n\n\t\tfunction onPointerMove(event) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (event.pointerType === 'touch') {\n\t\t\t\tonTouchMove(event);\n\t\t\t} else {\n\t\t\t\tonMouseMove(event);\n\t\t\t}\n\t\t}\n\n\t\tfunction onPointerUp(event) {\n\t\t\tremovePointer(event);\n\t\t\tif (pointers.length === 0) {\n\t\t\t\tscope.domElement.releasePointerCapture(event.pointerId);\n\t\t\t\tscope.domElement.removeEventListener('pointermove', onPointerMove);\n\t\t\t\tscope.domElement.removeEventListener('pointerup', onPointerUp);\n\t\t\t}\n\n\t\t\tscope.dispatchEvent(_endEvent);\n\t\t\tstate = STATE.NONE;\n\t\t}\n\n\t\tfunction onPointerCancel(event) {\n\t\t\tremovePointer(event);\n\t\t}\n\n\t\tfunction onMouseDown(event) {\n\t\t\tlet mouseAction;\n\n\t\t\tswitch (event.button) {\n\t\t\t\tcase 0:\n\t\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tmouseAction = -1;\n\t\t\t}\n\n\t\t\tswitch (mouseAction) {\n\t\t\t\tcase MOUSE.DOLLY:\n\t\t\t\t\tif (scope.enableZoom === false) return;\n\t\t\t\t\thandleMouseDownDolly(event);\n\t\t\t\t\tstate = STATE.DOLLY;\n\t\t\t\t\tbreak;\n\t\t\t\tcase MOUSE.ROTATE:\n\t\t\t\t\tif (event.ctrlKey || event.metaKey || event.shiftKey) {\n\t\t\t\t\t\tif (scope.enablePan === false) return;\n\t\t\t\t\t\thandleMouseDownPan(event);\n\t\t\t\t\t\tstate = STATE.PAN;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\t\t\t\t\thandleMouseDownRotate(event);\n\t\t\t\t\t\tstate = STATE.ROTATE;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase MOUSE.PAN:\n\t\t\t\t\tif (event.ctrlKey || event.metaKey || event.shiftKey) {\n\t\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\t\t\t\t\thandleMouseDownRotate(event);\n\t\t\t\t\t\tstate = STATE.ROTATE;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (scope.enablePan === false) return;\n\t\t\t\t\t\thandleMouseDownPan(event);\n\t\t\t\t\t\tstate = STATE.PAN;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstate = STATE.NONE;\n\t\t\t}\n\n\t\t\tif (state !== STATE.NONE) {\n\t\t\t\tscope.dispatchEvent(_startEvent);\n\t\t\t}\n\t\t}\n\n\t\tfunction onMouseMove(event) {\n\t\t\tif (scope.enabled === false) return;\n\n\t\t\tswitch (state) {\n\t\t\t\tcase STATE.ROTATE:\n\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\t\t\t\thandleMouseMoveRotate(event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase STATE.DOLLY:\n\t\t\t\t\tif (scope.enableZoom === false) return;\n\t\t\t\t\thandleMouseMoveDolly(event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase STATE.PAN:\n\t\t\t\t\tif (scope.enablePan === false) return;\n\t\t\t\t\thandleMouseMovePan(event);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction onMouseWheel(event) {\n\t\t\tif (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE) return;\n\t\t\t// event.preventDefault();\n\t\t\tscope.dispatchEvent(_startEvent);\n\t\t\thandleMouseWheel(event);\n\t\t\tscope.dispatchEvent(_endEvent);\n\t\t}\n\n\t\tfunction onTouchStart(event) {\n\t\t\ttrackPointer(event);\n\t\t\tswitch (pointers.length) {\n\t\t\t\tcase 1:\n\t\t\t\t\tswitch (scope.touches.ONE) {\n\t\t\t\t\t\tcase TOUCH.ROTATE:\n\t\t\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\t\t\t\t\t\thandleTouchStartRotate();\n\t\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase TOUCH.PAN:\n\t\t\t\t\t\t\tif (scope.enablePan === false) return;\n\t\t\t\t\t\t\thandleTouchStartPan();\n\t\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tstate = STATE.NONE;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tswitch (scope.touches.TWO) {\n\t\t\t\t\t\tcase TOUCH.DOLLY_PAN:\n\t\t\t\t\t\t\tif (scope.enableZoom === false && scope.enablePan === false) return;\n\t\t\t\t\t\t\thandleTouchStartDollyPan();\n\t\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase TOUCH.DOLLY_ROTATE:\n\t\t\t\t\t\t\tif (scope.enableZoom === false && scope.enableRotate === false) return;\n\t\t\t\t\t\t\thandleTouchStartDollyRotate();\n\t\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tstate = STATE.NONE;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstate = STATE.NONE;\n\t\t\t}\n\n\t\t\tif (state !== STATE.NONE) {\n\t\t\t\tscope.dispatchEvent(_startEvent);\n\t\t\t}\n\t\t}\n\n\t\tfunction onTouchMove(event) {\n\t\t\ttrackPointer(event);\n\t\t\tswitch (state) {\n\t\t\t\tcase STATE.TOUCH_ROTATE:\n\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\t\t\t\thandleTouchMoveRotate(event);\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\t\t\tcase STATE.TOUCH_PAN:\n\t\t\t\t\tif (scope.enablePan === false) return;\n\t\t\t\t\thandleTouchMovePan(event);\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\t\t\t\t\tif (scope.enableZoom === false && scope.enablePan === false) return;\n\t\t\t\t\thandleTouchMoveDollyPan(event);\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\t\t\t\t\tif (scope.enableZoom === false && scope.enableRotate === false) return;\n\t\t\t\t\thandleTouchMoveDollyRotate(event);\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstate = STATE.NONE;\n\t\t\t}\n\t\t}\n\n\t\tfunction onContextMenu(event) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\tfunction addPointer(event) {\n\t\t\tpointers.push(event);\n\t\t}\n\n\t\tfunction removePointer(event) {\n\t\t\tdelete pointerPositions[event.pointerId];\n\t\t\tfor (let i = 0; i < pointers.length; i++) {\n\t\t\t\tif (pointers[i].pointerId === event.pointerId) {\n\t\t\t\t\tpointers.splice(i, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction trackPointer(event) {\n\t\t\tlet position = pointerPositions[event.pointerId];\n\t\t\tif (position === undefined) {\n\t\t\t\tposition = new Vector2();\n\t\t\t\tpointerPositions[event.pointerId] = position;\n\t\t\t}\n\t\t\tposition.set(event.pageX, event.pageY);\n\t\t}\n\n\t\tfunction getSecondPointerPosition(event) {\n\t\t\tconst pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];\n\t\t\treturn pointerPositions[pointer.pointerId];\n\t\t}\n\n\t\tscope.domElement.addEventListener('contextmenu', onContextMenu);\n\t\tscope.domElement.addEventListener('pointerdown', onPointerDown);\n\t\tscope.domElement.addEventListener('pointercancel', onPointerCancel);\n\t\tscope.domElement.addEventListener('wheel', onMouseWheel, { passive: false });\n\n\t\t// force an update at start\n\n\t\tthis.update();\n\t}\n}\n\n/**\n * This set of controls performs orbiting, dollying (zooming), and panning.\n * Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n * This is very similar to OrbitControls, another set of touch behavior\n *\n *    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n *    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n *    Pan - left mouse, or arrow keys / touch: one-finger move\n */\n\nexport { OrbitControls };\n","export const ASSETS_PATH = '';\nconst DPR = Math.min(2, window.devicePixelRatio || 1);\nconst USE_PIXEL_LIMIT = true;\nconst MAX_PIXEL_COUNT = 2560 * 1440;\nconst FREE_BLOCKS_COUNT = 12;\nconst AUTO_RESTART = true;\nconst AUTO_START = false;\nconst SHOW_BLOCK = false;\nconst DEFAULT_POSITION = [-20, 18, 20];\nconst DEFAULT_LOOKAT_POSITION = [0, 0, 0];\nconst WEBGL_OPTS = { antialias: true, alpha: false };\n\nconst settings = {\n\tDPR,\n\tUSE_PIXEL_LIMIT,\n\tMAX_PIXEL_COUNT,\n\tDEFAULT_POSITION,\n\tDEFAULT_LOOKAT_POSITION,\n\tWEBGL_OPTS,\n\tFREE_BLOCKS_COUNT,\n\tAUTO_RESTART,\n\tAUTO_START,\n\tSHOW_BLOCK,\n};\nexport default settings;\n","import { HALF_SIZE } from './board';\n\nconst getDistance = (row, col) => Math.hypot(row, col);\n\nexport default class Tile {\n\tid = 0;\n\trow = 0;\n\tcol = 0;\n\tdistance: number = getDistance(this.row, this.col);\n\tMAX_DISTANCE: number = getDistance(HALF_SIZE, HALF_SIZE);\n\tpriority: number = this.MAX_DISTANCE - this.distance;\n\tisMain: boolean = this.row === 0 && this.col === 0;\n\tisBorder: boolean = Math.abs(this.row) === 2 || Math.abs(this.col) === 2;\n\tisOccupied = false;\n\twillBeOccupied = false;\n\tactiveRatio = 0;\n\tneighbours: (Tile | null)[] | null = null;\n\treachableNeighbours: (Tile | null)[] | null = null;\n\tprioritySortedReachableNeighbours: (Tile | null)[] | null = null;\n\trandomDelay: number = Math.random() * 0.5 + (this.MAX_DISTANCE - this.priority) * 0.5;\n\tloseAnimationPositionArray: Float32Array<ArrayBuffer> = [] as unknown as Float32Array<ArrayBuffer>;\n\tloseAnimationOrientArray: Float32Array<ArrayBuffer> = [] as unknown as Float32Array<ArrayBuffer>;\n\n\tconstructor(id = 0, row = 0, col = 0) {\n\t\tthis.id = id;\n\t\tthis.row = row;\n\t\tthis.col = col;\n\t\tthis.distance = getDistance(row, col);\n\t\tthis.MAX_DISTANCE = getDistance(HALF_SIZE, HALF_SIZE);\n\t\tthis.priority = this.MAX_DISTANCE - this.distance;\n\t\tthis.isMain = row === 0 && col === 0;\n\t\tthis.isBorder = Math.abs(row) === 2 || Math.abs(col) === 2;\n\t\tthis.isOccupied = false;\n\t\tthis.willBeOccupied = false;\n\t\tthis.activeRatio = 0;\n\t\tthis.neighbours = null;\n\t\tthis.reachableNeighbours = null;\n\t\tthis.prioritySortedReachableNeighbours = null;\n\t\tthis.randomDelay = Math.random() * 0.5 + (this.MAX_DISTANCE - this.priority) * 0.5;\n\t}\n\n\tinit() {\n\t\tthis.reachableNeighbours = this.neighbours?.filter((neighbour) => neighbour?.row === this.row || neighbour?.col === this.col) || null;\n\n\t\tthis._sortPriorityNeighbours();\n\t}\n\n\t_sortPriorityNeighbours() {\n\t\tthis.prioritySortedReachableNeighbours = this.reachableNeighbours ? [...this.reachableNeighbours].sort((a, b) => (a?.priority || 0) - (b?.priority || 0)) : null;\n\t}\n\n\tshuffleReachableNeighbours() {\n\t\tif (this.reachableNeighbours) {\n\t\t\tfor (let i = this.reachableNeighbours.length - 1; i > 0; i--) {\n\t\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t\t[this.reachableNeighbours[i], this.reachableNeighbours[j]] = [this.reachableNeighbours[j], this.reachableNeighbours[i]];\n\t\t\t}\n\t\t}\n\n\t\tthis._sortPriorityNeighbours();\n\t}\n\n\tpreUpdate(_dt: number) {\n\t\tthis.activeRatio = 0;\n\t}\n\n\treset() {\n\t\tthis.isOccupied = false;\n\t\tthis.willBeOccupied = false;\n\t\tthis.activeRatio = 0;\n\t}\n\n\tupdate(_dt: number) {\n\t\t// TODO: check this update flow\n\t}\n}\n","import Tile from './Tile';\n\nexport const SIZE = 5;\nexport const SIZE_WITH_PADDING = SIZE + 2;\nexport const HALF_SIZE = Math.floor(SIZE / 2);\nexport const TOTAL_TILES = SIZE * SIZE;\nexport const TOTAL_TILES_WITH_PADDING = SIZE_WITH_PADDING * SIZE_WITH_PADDING;\n\nlet mainTile: Tile | null = null;\nlet tiles: Tile[][] = [];\nconst Board = () => {\n\tfunction init() {\n\t\ttiles = Array.from({ length: SIZE }, (_, i) =>\n\t\t\tArray.from({ length: SIZE }, (_, j) => {\n\t\t\t\tconst row = i - HALF_SIZE;\n\t\t\t\tconst col = j - HALF_SIZE;\n\t\t\t\treturn new Tile(i * SIZE + j, row, col);\n\t\t\t}),\n\t\t);\n\n\t\ttiles.forEach((row, i) =>\n\t\t\trow.forEach((tile, j) => {\n\t\t\t\ttile.neighbours = _getNeighbouringTiles(i - HALF_SIZE, j - HALF_SIZE);\n\t\t\t\ttile.init();\n\t\t\t}),\n\t\t);\n\n\t\tmainTile = getTile(0, 0);\n\t}\n\n\tfunction getTile(row, col) {\n\t\treturn tiles[row + HALF_SIZE]?.[col + HALF_SIZE] || null;\n\t}\n\n\tfunction getRandomFreeTile() {\n\t\tconst freeTiles = tiles.flat().filter((tile) => !tile.isOccupied);\n\t\treturn freeTiles.length ? freeTiles[Math.floor(Math.random() * freeTiles.length)] : null;\n\t}\n\n\tfunction _getNeighbouringTiles(row, col) {\n\t\treturn [-1, 0, 1].flatMap((i) =>\n\t\t\t[-1, 0, 1]\n\t\t\t\t.map((j) => {\n\t\t\t\t\tif (i === 0 && j === 0) return null;\n\t\t\t\t\treturn getTile(row + i, col + j);\n\t\t\t\t})\n\t\t\t\t.filter(Boolean),\n\t\t);\n\t}\n\n\tfunction reset() {\n\t\ttiles.flat().forEach((tile) => tile.reset());\n\t}\n\n\tfunction preUpdate(dt: number) {\n\t\ttiles.flat().forEach((tile) => tile.preUpdate(dt));\n\t}\n\n\tfunction update(dt: number) {\n\t\ttiles.flat().forEach((tile) => tile.update(dt));\n\t}\n\n\treturn {\n\t\tinit,\n\t\tgetTile,\n\t\tgetRandomFreeTile,\n\t\treset,\n\t\tpreUpdate,\n\t\tupdate,\n\t};\n};\nconst board = Board();\n\nexport { board, mainTile, tiles };\n","import * as THREE from 'three';\nimport settings from './settings';\n\nimport { TOTAL_TILES } from '../logic/board';\nimport { PropertiesType } from '../../types/properties';\n\nconst resolution = new THREE.Vector2();\nconst viewportResolution = new THREE.Vector2();\nconst sharedUniforms: PropertiesType['sharedUniforms'] = {\n\tu_time: { value: 0 },\n\tu_deltaTime: { value: 1 },\n\tu_resolution: { value: resolution },\n\tu_viewportResolution: { value: viewportResolution },\n\tu_bgColor1: { value: new THREE.Color() },\n\tu_bgColor2: { value: new THREE.Color() },\n};\nconst maxFreeBlocksCount = TOTAL_TILES - 5;\n\nconst baseStyleProperties = {\n\tbgColor1: '#ffffff',\n\tbgColor2: '#d0d0d0',\n\tneutralColor: '#ffffff',\n\tmainColor: '#0096ff',\n\tsuccessColor: '#00c881',\n\tfailColor: '#ca0101',\n\tparticlesColor: '#505050',\n\tgoboIntensity: 0.45,\n\tparticlesOpacity: 0.75,\n\tparticlesSize: 0.01,\n};\nconst propertiesInitialState: PropertiesType = {\n\tcanvasId: undefined,\n\ttime: 0,\n\tdeltaTime: 0,\n\twidth: 0,\n\theight: 0,\n\tviewportWidth: 0,\n\tviewportHeight: 0,\n\tcamera: undefined,\n\torbitCamera: undefined,\n\tcameraZoom: 1,\n\tcameraOffsetX: 0,\n\tcameraOffsetY: 0,\n\trenderer: undefined,\n\tscene: undefined,\n\tpostprocessing: false,\n\tresolution,\n\tviewportResolution,\n\tcanvas: null,\n\torbitTarget: null,\n\tsharedUniforms,\n\tisPaused: false,\n\tshowVisual: settings.SHOW_BLOCK,\n\tloadList: [],\n\tanimationSpeed: 1.1,\n\tactiveBlocksCount: 0,\n\tmaxFreeBlocksCount,\n\tlightPositionX: -2,\n\tlightPositionY: 6,\n\tlightPositionZ: -4,\n\tlightCameraSize: 4.5,\n\tlightCameraBias: 0.005,\n\tlightCameraNear: 3,\n\tlightCameraFar: 16,\n\terrorBlock: null,\n\terrorBlockMaxLifeCycle: 4,\n\tminSpawnedBlocksForTheErrorBlock: maxFreeBlocksCount - 2,\n\t...baseStyleProperties,\n};\nlet properties = propertiesInitialState;\n\nexport function resetProperties() {\n\tproperties = propertiesInitialState;\n}\n\nexport { properties };\n","export default \"__VITE_ASSET__BS$CrRSw__\"","export default \"data:application/octet-stream;base64,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\"","export default \"__VITE_ASSET__CuxHQi9D__\"","export default \"__VITE_ASSET__ChJMXwoY__\"","export default \"__VITE_ASSET__BGJtbOMx__\"","export default \"__VITE_PUBLIC_ASSET__ff67f993__\"","export default \"__VITE_PUBLIC_ASSET__bc8cef95__\"","export default \"__VITE_PUBLIC_ASSET__d447e7b6__\"","import * as THREE from 'three';\nimport { properties } from './properties';\n\nimport BASE from '/assets/BASE.buf?inline';\nimport BOX from '/assets/BOX.buf?inline';\nimport COIN from '/assets/COIN.buf?inline';\nimport COIN_PLACEMENT from '/assets/COIN_PLACEMENT.buf?inline';\nimport LOSE_ANIMATION from '/assets/LOSE_ANIMATION.buf?inline';\n\nimport gobo from '/assets/gobo.jpg?url';\nimport LDR_RGB1_0 from '/assets/LDR_RGB1_0.png?url';\nimport matcap_gold from '/assets/matcap_gold.jpg?url';\n\ninterface LoaderItems {\n\tlist: (() => void | Promise<void>)[];\n\tloadedCount: number;\n\tonLoadCallback: (() => void) | null;\n}\n\nconst assets = {\n\t'models/BASE.buf': BASE,\n\t'models/BOX.buf': BOX,\n\t'models/COIN.buf': COIN,\n\t'models/COIN_PLACEMENT.buf': COIN_PLACEMENT,\n\t'models/LOSE_ANIMATION.buf': LOSE_ANIMATION,\n\t'textures/gobo.jpg': gobo,\n\t'textures/LDR_RGB1_0.png': LDR_RGB1_0,\n\t'textures/matcap_gold.jpg': matcap_gold,\n};\nconst Loader = () => {\n\tlet list: LoaderItems['list'] = [];\n\tlet loadedCount: LoaderItems['loadedCount'] = 0;\n\tlet onLoadCallback: LoaderItems['onLoadCallback'] = null;\n\n\tfunction loadBuf(filename, cb) {\n\t\tconsole.debug(filename);\n\t\tconst url = assets[filename];\n\t\tconsole.debug(url);\n\t\tlist.push(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(url);\n\t\t\t\tconsole.debug(response);\n\t\t\t\tconst buffer = await response.arrayBuffer();\n\t\t\t\tconst schematicJsonSize = new Uint32Array(buffer, 0, 1)[0];\n\t\t\t\tconst schematic = JSON.parse(new TextDecoder().decode(new Uint8Array(buffer, 4, schematicJsonSize)));\n\n\t\t\t\tconst { vertexCount, indexCount, attributes: schematicAttributeList } = schematic;\n\t\t\t\tlet offset = 4 + schematicJsonSize;\n\n\t\t\t\tconst geometry = new THREE.BufferGeometry();\n\t\t\t\tconst offsetMap = {};\n\n\t\t\t\tschematicAttributeList.forEach((schematicAttribute) => {\n\t\t\t\t\tconst { id, componentSize, storageType, needsPack, packedComponents } = schematicAttribute;\n\t\t\t\t\tconst dataLength = id === 'indices' ? indexCount : vertexCount;\n\t\t\t\t\tconst StorageType = window[storageType as string];\n\t\t\t\t\tconst tmpArr = new StorageType(buffer, offset, dataLength * componentSize);\n\t\t\t\t\tconst byteSize = StorageType.BYTES_PER_ELEMENT;\n\n\t\t\t\t\tlet outArr;\n\t\t\t\t\tif (needsPack) {\n\t\t\t\t\t\toutArr = _packAttribute(tmpArr, dataLength, componentSize, packedComponents, storageType);\n\t\t\t\t\t} else {\n\t\t\t\t\t\toffsetMap[id] = offset;\n\t\t\t\t\t\toutArr = tmpArr;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (id === 'indices') {\n\t\t\t\t\t\tgeometry.setIndex(new THREE.BufferAttribute(outArr, 1));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgeometry.setAttribute(id, new THREE.BufferAttribute(outArr, componentSize));\n\t\t\t\t\t}\n\n\t\t\t\t\toffset += dataLength * componentSize * byteSize;\n\t\t\t\t});\n\n\t\t\t\tif (cb) cb(geometry);\n\t\t\t\t_onLoad();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error loading buffer:', error);\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction _packAttribute(tmpArr, dataLength, componentSize, packedComponents, storageType) {\n\t\tconst packedComponentCount = packedComponents.length;\n\t\tconst isSign = storageType.indexOf('Int') === 0;\n\t\tconst size = 1 << (tmpArr.BYTES_PER_ELEMENT * 8);\n\t\tconst offset = isSign ? size * 0.5 : 0;\n\t\tconst divider = 1 / size;\n\n\t\tconst outArr = new Float32Array(dataLength * componentSize);\n\t\tfor (let j = 0, jk = 0; j < dataLength; j++) {\n\t\t\tfor (let k = 0; k < packedComponentCount; k++) {\n\t\t\t\tconst { delta, from } = packedComponents[k];\n\t\t\t\toutArr[jk] = (tmpArr[jk] + offset) * divider * delta + from;\n\t\t\t\tjk++;\n\t\t\t}\n\t\t}\n\t\treturn outArr;\n\t}\n\n\tfunction loadTexture(filename, cb) {\n\t\tconsole.debug(`filename= ${filename}`);\n\t\tconst url = assets[filename];\n\t\tconsole.debug(url);\n\t\tlist.push(() => {\n\t\t\tnew THREE.TextureLoader().load(\n\t\t\t\turl,\n\t\t\t\t(texture) => {\n\t\t\t\t\ttexture.minFilter = THREE.LinearMipMapLinearFilter;\n\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = true;\n\t\t\t\t\ttexture.anisotropy = properties.renderer?.capabilities.getMaxAnisotropy() || 1;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tif (cb) cb(texture);\n\t\t\t\t\t_onLoad();\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\t(error) => console.error('Error loading texture:', error),\n\t\t\t);\n\t\t});\n\t}\n\n\tfunction start(cb) {\n\t\tloadedCount = 0;\n\t\tonLoadCallback = cb;\n\t\tlist.forEach((loadFunction) => loadFunction());\n\t}\n\n\tfunction _onLoad() {\n\t\tloadedCount++;\n\t\tif (loadedCount === list.length) {\n\t\t\tlist = [];\n\t\t\tif (onLoadCallback) {\n\t\t\t\tonLoadCallback();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tloadBuf,\n\t\tloadTexture,\n\t\tstart,\n\t\tlist,\n\t\tloadedCount,\n\t\tonLoadCallback,\n\t};\n};\n\nconst loader = Loader();\nexport default loader;\n","class MathUtils {\n\tPI: number = Math.PI;\n\n\tclamp(val, min, max) {\n\t\treturn val < min ? min : val > max ? max : val;\n\t}\n\n\tmix(min, max, ratio) {\n\t\treturn min + (max - min) * ratio;\n\t}\n\n\tcUnMix(min, max, val) {\n\t\treturn this.clamp((val - min) / (max - min), 0, 1);\n\t}\n\n\tsaturate(val) {\n\t\treturn this.clamp(val, 0, 1);\n\t}\n\n\tfit(val, min, max, toMin, toMax, ease?) {\n\t\tval = this.cUnMix(min, max, val);\n\t\tif (ease) val = ease(val);\n\t\treturn toMin + val * (toMax - toMin);\n\t}\n}\n\nexport default new MathUtils();\n","// from https://github.com/kaelzhang/easing-functions/\n\nconst Ease = () => {\n\tfunction quartInOut(e) {\n\t\tif ((e *= 2) < 1) return 0.5 * e * e * e * e;\n\t\treturn -0.5 * ((e -= 2) * e * e * e - 2);\n\t}\n\tfunction sineOut(e) {\n\t\treturn Math.sin((e * Math.PI) / 2);\n\t}\n\tfunction backIn(e) {\n\t\tconst t = 1.70158;\n\t\treturn e * e * ((t + 1) * e - t);\n\t}\n\tfunction backOut(e, t = 1.70158) {\n\t\treturn --e * e * ((t + 1) * e + t) + 1;\n\t}\n\tfunction backInOut(e) {\n\t\tconst t = 1.70158 * 1.525;\n\t\tif ((e *= 2) < 1) return 0.5 * e * e * ((t + 1) * e - t);\n\t\treturn 0.5 * ((e -= 2) * e * ((t + 1) * e + t) + 2);\n\t}\n\n\treturn {\n\t\tquartInOut,\n\t\tsineOut,\n\t\tbackIn,\n\t\tbackOut,\n\t\tbackInOut,\n\t};\n};\n\nfunction cubicBezier(x, x1, y1, x2, y2) {\n\tif (x === 0) return 0;\n\tif (x === 1) return 1;\n\n\t// Helper function to calculate a point on a cubic Bezier curve\n\tfunction bezier(t, p0, p1, p2, p3) {\n\t\tconst cX = 3 * (p1 - p0);\n\t\tconst bX = 3 * (p2 - p1) - cX;\n\t\tconst aX = p3 - p0 - cX - bX;\n\n\t\treturn ((aX * t + bX) * t + cX) * t + p0;\n\t}\n\n\t// Since the x-coordinate needs to be found, we perform a binary search to find t\n\tfunction solveBezier(x, x1, x2, epsilon = 1e-6) {\n\t\tlet t0 = 0;\n\t\tlet t1 = 1;\n\t\tlet t = x;\n\n\t\twhile (t0 < t1) {\n\t\t\tconst xEstimate = bezier(t, 0, x1, x2, 1);\n\t\t\tif (Math.abs(xEstimate - x) < epsilon) {\n\t\t\t\treturn t;\n\t\t\t}\n\t\t\tif (xEstimate < x) {\n\t\t\t\tt0 = t;\n\t\t\t} else {\n\t\t\t\tt1 = t;\n\t\t\t}\n\t\t\tt = (t0 + t1) / 2;\n\t\t}\n\n\t\treturn t;\n\t}\n\n\t// Find the corresponding t for the given x using the x1, x2 values\n\tconst t = solveBezier(x, x1, x2);\n\n\t// Calculate the y value using the y1, y2 values\n\treturn bezier(t, 0, y1, y2, 1);\n}\n\nexport function customEasing(x) {\n\treturn cubicBezier(x, 0.3, 0, 0, 1);\n}\n\nconst ease = Ease();\nexport default ease;\n","export default \"uniform sampler2D u_blueNoiseTexture;\\nuniform vec2 u_blueNoiseTexelSize;\\nuniform vec2 u_blueNoiseCoordOffset;\\n\\nvec3 getBlueNoise (vec2 coord) {\\n\\treturn texture2D(u_blueNoiseTexture, coord * u_blueNoiseTexelSize + u_blueNoiseCoordOffset).rgb;\\n}\\n\"","import * as THREE from 'three';\nimport loader from '../../core/loader';\n\nimport getBlueNoiseShader from './getBlueNoise.glsl?raw';\nimport { SharedUniforms } from '../../../types/properties';\nimport { ASSETS_PATH } from '../../core/settings';\n\nconst BlueNoise = () => {\n\tconst bn_sharedUniforms: SharedUniforms = {\n\t\tu_blueNoiseTexture: { value: null },\n\t\tu_blueNoiseTexelSize: { value: null },\n\t\tu_blueNoiseCoordOffset: { value: new THREE.Vector2() },\n\t};\n\tconst TEXTURE_SIZE = 128;\n\n\tasync function preInit() {\n\t\tloader.loadTexture(`${ASSETS_PATH + 'textures'}/LDR_RGB1_0.png`, (texture) => {\n\t\t\ttexture.generateMipmaps = false;\n\t\t\ttexture.minFilter = texture.magFilter = THREE.NearestFilter;\n\t\t\ttexture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\t\t\ttexture.needsUpdate = true;\n\t\t\tif (bn_sharedUniforms) {\n\t\t\t\tbn_sharedUniforms.u_blueNoiseTexture.value = texture;\n\t\t\t\tbn_sharedUniforms.u_blueNoiseTexelSize.value = new THREE.Vector2(1 / TEXTURE_SIZE, 1 / TEXTURE_SIZE);\n\t\t\t}\n\t\t});\n\t\tTHREE.ShaderChunk['getBlueNoise'] = getBlueNoiseShader;\n\t}\n\n\tfunction update(_dt: number) {\n\t\tbn_sharedUniforms?.u_blueNoiseCoordOffset.value.set(Math.random(), Math.random());\n\t}\n\n\treturn {\n\t\tupdate,\n\t\tpreInit,\n\t\tTEXTURE_SIZE,\n\t\tbn_sharedUniforms,\n\t};\n};\n\nconst blueNoise = BlueNoise();\nexport default blueNoise;\n","import MinSignal from 'min-signal';\n\nexport const stateSignal = new MinSignal();\nexport const spawnSignal = new MinSignal();\nexport const endCycleSignal = new MinSignal();\nexport const gameEndedSignal = new MinSignal();\n\nexport const errorAnimationEndedSignal = new MinSignal();\nexport const completeAnimationEndedSignal = new MinSignal();\nexport const stopAnimationEndedSignal = new MinSignal();\n\nexport const lightCameraHelperSignal = new MinSignal();\nexport const lightCameraUpdateSignal = new MinSignal();\n","export enum AnimationStatus {\n\tNOT_STARTED = 'not-started',\n\tSTARTED = 'started',\n\tFREE = 'free',\n\tRESULT = 'result',\n\tRESULT_ANIMATION = 'result_animation',\n\tRESTART_ANIMATION = 'restart_animation',\n\tRESTART = 'restart',\n}\nexport enum AnimationResult {\n\tNONE = 'none',\n\tPAUSE = 'pause',\n\tSTOP = 'stop',\n\tCOMPLETED = 'completed',\n\tFAILED = 'failed',\n\tREPLAY = 'replay',\n}\n\nexport enum SuccessLevel {\n\tONE = 1,\n\tTWO = 2,\n\tTHREE = 3,\n}\n\nexport interface StatusManagerState {\n\tstatus: AnimationStatus;\n\tstatusIndex: number;\n\tresult: AnimationResult;\n\tcompleteAnimationLevel: SuccessLevel | null;\n\n\tisStart: boolean;\n\tisFree: boolean;\n\tisResult: boolean;\n\tisResultAnimation: boolean;\n\thasNotStarted: boolean;\n\tisRestart: boolean;\n\tisReplayResult: boolean;\n\tisSuccessResult: boolean;\n\tisFailResult: boolean;\n\tisStopped: boolean;\n\tstatusUpdateQueue: (() => void)[];\n}\n","import { properties } from '../core/properties';\nimport settings from '../core/settings';\nimport { heroBlocks as blocksVisual } from '../visuals/hero/hero';\n\nimport { blocks } from './systemManager';\nimport { gameEndedSignal, stateSignal } from './signals';\nimport { AnimationResult, AnimationStatus, StatusManagerState, SuccessLevel } from '../../types/stateManager';\n\nexport const PREVENT_CYCLE_STATES = [AnimationStatus.NOT_STARTED, AnimationStatus.RESTART_ANIMATION, AnimationStatus.RESTART, AnimationStatus.STARTED];\nconst statusOrder = Object.values(AnimationStatus);\n\nexport const resetCycleResults = [AnimationResult.FAILED, AnimationResult.COMPLETED];\n\nlet statusIndex: StatusManagerState['statusIndex'] = 0;\nlet status: StatusManagerState['status'] = statusOrder[statusIndex];\nlet hasNotStarted: StatusManagerState['hasNotStarted'] = true;\nlet isStart: StatusManagerState['isStart'] = false;\nlet isFree: StatusManagerState['isFree'] = false;\nlet isResult: StatusManagerState['isResult'] = false;\nlet isResultAnimation: StatusManagerState['isResultAnimation'] = false;\nlet isRestart: StatusManagerState['isRestart'] = false;\nlet isReplayResult: StatusManagerState['isReplayResult'] = false;\nlet isSuccessResult: StatusManagerState['isSuccessResult'] = false;\nlet isFailResult: StatusManagerState['isFailResult'] = false;\nlet isStopped: StatusManagerState['isStopped'] = false;\nlet result: StatusManagerState['result'] = AnimationResult.NONE;\nconst statusUpdateQueue: StatusManagerState['statusUpdateQueue'] = [];\nlet completeAnimationLevel: StatusManagerState['completeAnimationLevel'] = SuccessLevel.ONE;\n\nconst StateManager = () => {\n\tfunction updateAfterCycle() {\n\t\tif (properties.errorBlock) {\n\t\t\tif (properties.errorBlock.isErrorBlockFalling || properties.errorBlock.errorLifeCycle < properties.errorBlockMaxLifeCycle) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (isStart) {\n\t\t\tsetFree();\n\t\t}\n\t\tif (isResult) {\n\t\t\tsetResultAnimation();\n\t\t}\n\n\t\tconst callback = statusUpdateQueue.shift();\n\t\tcallback?.();\n\t}\n\n\tfunction updateFlags() {\n\t\thasNotStarted = status === AnimationStatus.NOT_STARTED;\n\t\tisStart = status === AnimationStatus.STARTED;\n\t\tisFree = status === AnimationStatus.FREE;\n\t\tisResult = status === AnimationStatus.RESULT;\n\t\tisResultAnimation = status === AnimationStatus.RESULT_ANIMATION;\n\t\tisRestart = status === AnimationStatus.RESTART;\n\t\tisReplayResult = (isResult || isResultAnimation) && result === AnimationResult.REPLAY;\n\t\tisSuccessResult = (isResult || isResultAnimation) && result === AnimationResult.COMPLETED;\n\t\tisFailResult = (isResult || isResultAnimation) && result === AnimationResult.FAILED;\n\t\tisStopped = (isResult || isResultAnimation) && result === AnimationResult.STOP;\n\t}\n\n\tfunction _canUpdateStatus(newStatus, hasResult = false, isReplay = false) {\n\t\tif (!properties.showVisual || !properties.canvas) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (isReplay && statusIndex === 0) {\n\t\t\tstatusIndex = 2;\n\t\t}\n\t\tconst newStateIndex = statusOrder.indexOf(newStatus);\n\t\tconst nextStatusIndexMatches = (statusIndex + 1) % statusOrder.length === newStateIndex;\n\n\t\tif (nextStatusIndexMatches) {\n\t\t\tstatusIndex = newStateIndex;\n\t\t\tstatus = statusOrder[statusIndex];\n\t\t\tif (!hasResult) {\n\t\t\t\tupdateFlags();\n\t\t\t\tstateSignal.dispatch(status, result);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction _updateStatusAndResult({\n\t\tstatus: newStatus,\n\t\tresult: newResult,\n\t\tanimationStyle,\n\t}: {\n\t\tstatus: AnimationStatus;\n\t\tresult: AnimationResult;\n\t\tanimationStyle: SuccessLevel | null;\n\t}) {\n\t\tif (_canUpdateStatus(newStatus, true, newResult === AnimationResult.REPLAY)) {\n\t\t\tif (properties.errorBlock && !properties.errorBlock.isErrorBlockFalling) {\n\t\t\t\tproperties.errorBlock.preventErrorBlockFallAnimation();\n\t\t\t\tproperties.errorBlock = null;\n\t\t\t}\n\n\t\t\tresult = newResult;\n\t\t\tcompleteAnimationLevel = animationStyle;\n\n\t\t\tupdateFlags();\n\t\t\tstateSignal.dispatch(status, result, completeAnimationLevel);\n\t\t}\n\t}\n\n\tfunction set(id: string, isReplay = false) {\n\t\tconst actions = {\n\t\t\tstart: () => setStart(),\n\t\t\tfree: () => setFree(),\n\t\t\tpause: () => setPause(),\n\t\t\tresume: () => setResume(),\n\t\t\tstop: () => setStop(),\n\t\t\tfail: () => setFail(),\n\t\t\tresultAnimation: () => setResultAnimation(),\n\t\t\trestartAnimation: () => setRestartAnimation(),\n\t\t\trestart: () => setRestart(),\n\t\t\tshowVisual: () => showVisual(),\n\t\t};\n\t\tconst successActions = {\n\t\t\tsuccess: (isReplay?: boolean) => setComplete(isReplay),\n\t\t\tsuccess2: (isReplay?: boolean) => setComplete2(isReplay),\n\t\t\tsuccess3: (isReplay?: boolean) => setComplete3(isReplay),\n\t\t};\n\t\tactions[id]?.();\n\t\tsuccessActions[id]?.(isReplay);\n\t}\n\n\tfunction showVisual() {\n\t\tproperties.showVisual = true;\n\t}\n\n\tfunction _queueStatusUpdate({\n\t\tstatus,\n\t\tresult = null,\n\t\tanimationStyle = null,\n\t}: {\n\t\tstatus: AnimationStatus;\n\t\tresult?: AnimationResult | null;\n\t\tanimationStyle?: SuccessLevel | null;\n\t}) {\n\t\tif (properties.errorBlock && properties.errorBlock?.errorFallAnimationTime < 1) {\n\t\t\tconst logicBlock = blocks?.find((block) => block?.id === properties.errorBlock?.id);\n\t\t\tif (logicBlock) {\n\t\t\t\tlogicBlock.isErrorBlock = false;\n\t\t\t\tblocksVisual.resetBlockFromLogicBlock(logicBlock);\n\t\t\t}\n\t\t\tproperties.errorBlock = null;\n\t\t}\n\n\t\tstatusUpdateQueue.push(() => (result ? _updateStatusAndResult({ status, result, animationStyle }) : _canUpdateStatus(status)));\n\t}\n\n\tfunction reset() {\n\t\t_queueStatusUpdate({ status: AnimationStatus.NOT_STARTED, result: AnimationResult.NONE });\n\t}\n\n\tfunction setStart() {\n\t\t_queueStatusUpdate({ status: AnimationStatus.STARTED });\n\t}\n\n\tfunction setFree() {\n\t\t_queueStatusUpdate({ status: AnimationStatus.FREE });\n\t}\n\n\tfunction setPause() {\n\t\tproperties.isPaused = true;\n\t}\n\n\tfunction setResume() {\n\t\tproperties.isPaused = false;\n\t}\n\n\tfunction setStop() {\n\t\t_queueStatusUpdate({ status: AnimationStatus.RESULT, result: AnimationResult.STOP });\n\t}\n\n\tfunction setComplete(isReplay = false) {\n\t\tconst result = isReplay && hasNotStarted ? AnimationResult.REPLAY : AnimationResult.COMPLETED;\n\t\t_queueStatusUpdate({ status: AnimationStatus.RESULT, result, animationStyle: SuccessLevel.ONE });\n\t}\n\n\tfunction setComplete2(isReplay = false) {\n\t\tconst result = isReplay && hasNotStarted ? AnimationResult.REPLAY : AnimationResult.COMPLETED;\n\t\t_queueStatusUpdate({ status: AnimationStatus.RESULT, result, animationStyle: SuccessLevel.TWO });\n\t}\n\n\tfunction setComplete3(isReplay = false) {\n\t\tconst result = isReplay && hasNotStarted ? AnimationResult.REPLAY : AnimationResult.COMPLETED;\n\n\t\t_queueStatusUpdate({ status: AnimationStatus.RESULT, result, animationStyle: SuccessLevel.THREE });\n\t}\n\n\tfunction setFail() {\n\t\t_queueStatusUpdate({ status: AnimationStatus.RESULT, result: AnimationResult.FAILED });\n\t}\n\n\tfunction setResultAnimation() {\n\t\t_queueStatusUpdate({ status: AnimationStatus.RESULT_ANIMATION });\n\t}\n\n\tfunction setRestartAnimation() {\n\t\t_queueStatusUpdate({ status: AnimationStatus.RESTART_ANIMATION });\n\t}\n\n\tfunction setRestart() {\n\t\tstatusUpdateQueue.push(() => {\n\t\t\tif (_canUpdateStatus(AnimationStatus.RESTART)) {\n\t\t\t\tgameEndedSignal.dispatch();\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction init() {\n\t\tupdateFlags();\n\n\t\tif (settings.AUTO_START) {\n\t\t\tsetStart();\n\t\t}\n\t}\n\treturn {\n\t\tinit,\n\t\tupdateAfterCycle,\n\t\tset,\n\t\tshowVisual,\n\t\treset,\n\t\tsetStart,\n\t\tsetRestartAnimation,\n\t\tsetRestart,\n\t};\n};\n\nconst stateManager = StateManager();\n\nexport {\n\tstateManager,\n\tstatusIndex,\n\tstatus,\n\thasNotStarted,\n\tisFree,\n\tisResult,\n\tisResultAnimation,\n\tisRestart,\n\tisReplayResult,\n\tisSuccessResult,\n\tisFailResult,\n\tisStopped,\n\tresult,\n\tstatusUpdateQueue,\n};\n","import { properties } from '../core/properties';\nimport math from '../utils/math';\nimport { customEasing } from '../utils/ease';\nimport { isFree, isResult, isResultAnimation } from './stateManager';\nimport { BlockType } from '../../types/block';\n\nexport default class Block {\n\tid: BlockType['id'] = -1;\n\tisMoving: BlockType['isMoving'] = false;\n\thasBeenSpawned: BlockType['hasBeenSpawned'] = false;\n\thasAnimationEnded: BlockType['hasAnimationEnded'] = false;\n\thasBeenEvaluated: BlockType['hasBeenEvaluated'] = false;\n\tcurrentTile: BlockType['currentTile'] = null;\n\ttargetTile: BlockType['targetTile'] = null;\n\tmoveAnimationRatio: BlockType['moveAnimationRatio'] = 0;\n\tspawnAnimationRatio: BlockType['spawnAnimationRatio'] = 0;\n\tspawnAnimationRatioUnclamped: BlockType['spawnAnimationRatioUnclamped'] = -Math.random();\n\teasedAnimationRatio: BlockType['easedAnimationRatio'] = 0;\n\n\trandomVector: BlockType['randomVector'] = {\n\t\tx: Math.random() - 0.5,\n\t\ty: Math.random() - 0.5,\n\t};\n\n\tlifeCycle: BlockType['lifeCycle'] = 0;\n\teasingFunction: BlockType['easingFunction'] = null;\n\terrorLifeCycle: BlockType['errorLifeCycle'] = 0;\n\tisErrorBlock: BlockType['isErrorBlock'] = false;\n\terrorPreFallAnimationTime: BlockType['errorPreFallAnimationTime'] = 0;\n\terrorPreFallAnimationTimeScale: BlockType['errorPreFallAnimationTimeScale'] = 0;\n\terrorFallAnimationTime: BlockType['errorFallAnimationTime'] = 0;\n\tisErrorBlockFalling: BlockType['isErrorBlockFalling'] = false;\n\tskipFallAnimation: BlockType['skipFallAnimation'] = false;\n\n\tconstructor(id) {\n\t\tthis.id = id;\n\t\tthis.init();\n\t}\n\n\tinit() {\n\t\tthis._setNewEasingFunction();\n\t}\n\n\t_setNewEasingFunction() {\n\t\tconst rand = Math.random();\n\t\tconst thresh = 0.25;\n\t\tthis.easingFunction = (x) => customEasing(math.fit(x, rand * thresh, rand * thresh + (1 - thresh), 0, 1));\n\t}\n\n\tupdateTile() {\n\t\tif (this.currentTile) {\n\t\t\tthis.currentTile.isOccupied = true;\n\t\t\tthis.currentTile.willBeOccupied = false;\n\t\t}\n\t}\n\n\t_findBestTile(neighbours, isFree) {\n\t\treturn neighbours.find((tile) => {\n\t\t\tif (tile.isOccupied || tile.willBeOccupied || tile.isMain) return false;\n\t\t\treturn isFree || (this.currentTile?.priority ?? 0) >= tile.priority;\n\t\t});\n\t}\n\n\tmoveToNextTile(isFree = false, animationDelay = 0) {\n\t\tthis.hasBeenEvaluated = true;\n\t\tthis.moveAnimationRatio = -animationDelay * (this.isErrorBlock ? 0 : 1);\n\n\t\tif (!this.currentTile) return;\n\t\tif (this.isErrorBlock) {\n\t\t\tthis.isMoving = true;\n\t\t\tthis.targetTile = this.currentTile;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.currentTile.shuffleReachableNeighbours();\n\t\tconst neighbours = isFree ? this.currentTile.reachableNeighbours : this.currentTile.prioritySortedReachableNeighbours;\n\n\t\tconst bestTile = this._findBestTile(neighbours, isFree);\n\n\t\tif (bestTile && (!this.currentTile.isMain || Math.random() <= 0.8)) {\n\t\t\tthis.targetTile = bestTile;\n\t\t\tif (this.targetTile) {\n\t\t\t\tthis.targetTile.willBeOccupied = true;\n\t\t\t}\n\t\t\tthis.isMoving = true;\n\t\t} else {\n\t\t\tthis.hasAnimationEnded = true;\n\t\t}\n\t}\n\n\tresetAfterCycle() {\n\t\tthis.hasBeenEvaluated = false;\n\t\tthis.hasAnimationEnded = false;\n\t\tthis.moveAnimationRatio = 0;\n\t\tthis.easedAnimationRatio = 0;\n\n\t\tthis.isMoving = false;\n\t\tthis.lifeCycle++;\n\n\t\tif (this.isErrorBlock && !this.skipFallAnimation) {\n\t\t\tthis.errorLifeCycle++;\n\t\t\tthis.isErrorBlockFalling = this.errorLifeCycle >= properties.errorBlockMaxLifeCycle - 1;\n\t\t}\n\n\t\tif (this.currentTile?.isBorder && !properties.errorBlock && Math.random() < 0.5 && properties.activeBlocksCount >= properties.minSpawnedBlocksForTheErrorBlock && isFree) {\n\t\t\tproperties.errorBlock = this;\n\t\t\tthis.isErrorBlock = true;\n\t\t}\n\n\t\tthis._setNewEasingFunction();\n\t\tthis.updateTile();\n\t}\n\n\treset(keepId = false) {\n\t\tif (this.isErrorBlock) {\n\t\t\tthis.errorLifeCycle = 0;\n\t\t\tthis.isErrorBlock = false;\n\t\t\tthis.currentTile?.reset();\n\t\t\tthis.targetTile?.reset();\n\t\t\tthis.errorFallAnimationTime = 0;\n\t\t\tthis.isErrorBlockFalling = false;\n\t\t\tthis.errorPreFallAnimationTime = 0;\n\t\t\tthis.errorPreFallAnimationTimeScale = 0;\n\t\t\tthis.errorFallAnimationTime = 0;\n\t\t\tthis.skipFallAnimation = false;\n\t\t}\n\t\tthis.id = keepId ? this.id : -1;\n\t\tthis.isMoving = false;\n\t\tthis.hasBeenSpawned = false;\n\t\tthis.hasAnimationEnded = false;\n\t\tthis.hasBeenEvaluated = false;\n\t\tthis.currentTile = null;\n\t\tthis.targetTile = null;\n\t\tthis.moveAnimationRatio = 0;\n\t\tthis.spawnAnimationRatio = 0;\n\t\tthis.spawnAnimationRatioUnclamped = -Math.random();\n\t\tthis.easedAnimationRatio = 0;\n\t\tthis.lifeCycle = 0;\n\t}\n\tpreventErrorBlockFallAnimation() {\n\t\tthis.skipFallAnimation = true;\n\t}\n\t_onMovementEnd() {\n\t\tthis.moveAnimationRatio = 1;\n\n\t\tif (this.currentTile) {\n\t\t\tthis.currentTile.isOccupied = false;\n\t\t}\n\t\tthis.currentTile = this.targetTile;\n\t\tthis.targetTile = null;\n\n\t\tthis.hasAnimationEnded = true;\n\n\t\tthis.updateTile();\n\t}\n\n\t_updateSpawnAnimation(dt: number) {\n\t\tthis.spawnAnimationRatioUnclamped += 0.75 * properties.animationSpeed * dt;\n\t\tthis.spawnAnimationRatio = Math.max(0, Math.min(1, this.spawnAnimationRatioUnclamped));\n\n\t\tif (this.spawnAnimationRatio === 1) {\n\t\t\tthis.hasBeenSpawned = true;\n\t\t}\n\t}\n\n\t_updateMovement(dt: number) {\n\t\tif ((this.isMoving && !this.hasAnimationEnded) || isResultAnimation) {\n\t\t\tthis.moveAnimationRatio = Math.min(1, this.moveAnimationRatio + properties.animationSpeed * dt * (this.isErrorBlock ? 0.7 : 1));\n\t\t\tthis.easedAnimationRatio = this.easingFunction?.(Math.max(0, this.moveAnimationRatio)) || 0;\n\n\t\t\tif (this.easedAnimationRatio === 1 && (isFree || isResult)) {\n\t\t\t\tthis._onMovementEnd();\n\t\t\t}\n\t\t}\n\t}\n\n\t_updateTileRatios() {\n\t\tconst clampedMoveAnimationRatio = Math.max(0, Math.min(1, this.hasBeenSpawned ? this.easedAnimationRatio : this.spawnAnimationRatio));\n\n\t\tif (this.currentTile) {\n\t\t\tthis.currentTile.activeRatio = this.hasBeenSpawned ? (this.targetTile ? 1 - clampedMoveAnimationRatio : 1) : this.spawnAnimationRatio;\n\t\t}\n\t\tif (this.targetTile) {\n\t\t\tthis.targetTile.activeRatio = clampedMoveAnimationRatio;\n\t\t}\n\n\t\tif (this.isErrorBlock && this.isErrorBlockFalling) {\n\t\t\tif (this.currentTile) {\n\t\t\t\tthis.currentTile.activeRatio = 0;\n\t\t\t}\n\t\t\tif (this.targetTile) {\n\t\t\t\tthis.targetTile.activeRatio = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tupdate(dt: number) {\n\t\tif (!this.hasBeenSpawned) {\n\t\t\tthis._updateSpawnAnimation(dt);\n\t\t} else {\n\t\t\tthis._updateMovement(dt);\n\t\t}\n\n\t\tif (this.isErrorBlockFalling) {\n\t\t\tthis.errorFallAnimationTime = this.errorFallAnimationTime + 3 * properties.animationSpeed * dt;\n\t\t}\n\t\tif (this.isErrorBlock) {\n\t\t\tthis.errorPreFallAnimationTimeScale = this.errorPreFallAnimationTimeScale + 3 * dt;\n\t\t\tthis.errorPreFallAnimationTimeScale = Math.min(20, this.errorPreFallAnimationTimeScale);\n\t\t\tthis.errorPreFallAnimationTime = this.errorPreFallAnimationTime + this.errorPreFallAnimationTimeScale * dt;\n\t\t\tif (this.skipFallAnimation) {\n\t\t\t\tthis.errorPreFallAnimationTime = 0;\n\t\t\t\tthis.errorPreFallAnimationTimeScale = 0;\n\t\t\t}\n\t\t}\n\n\t\tthis._updateTileRatios();\n\t}\n}\n","import math from '../utils/math';\nimport { stateSignal, stopAnimationEndedSignal } from './signals';\nimport { AnimationResult, AnimationStatus } from '../../types/stateManager';\n\nlet isActive = false;\nlet stopRatio = 0;\nconst stopAnimationDuration = 2.5; // seconds\nlet stopSpawnRatio = 0;\nlet stopPushDownRatio = 0;\n\nconst StopAnimationManager = () => {\n\tfunction init() {\n\t\tstateSignal.add((status, result) => {\n\t\t\tif (status === AnimationStatus.RESULT && result === AnimationResult.STOP) {\n\t\t\t\tisActive = true;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction resetRatios() {\n\t\tstopRatio = 0;\n\t\tstopPushDownRatio = 0;\n\t\tstopSpawnRatio = 0;\n\t\tisActive = false;\n\t}\n\n\tfunction update(dt: number) {\n\t\tstopRatio += ((isActive ? 1 : 0) * dt) / stopAnimationDuration;\n\t\tstopRatio = math.clamp(stopRatio, 0, 1);\n\n\t\tstopSpawnRatio = math.fit(stopRatio, 0, 0.5, 0, 2.5);\n\t\tstopPushDownRatio = math.fit(stopRatio, 0.4, 0.65, 0, 1);\n\n\t\tif (stopRatio >= 1) {\n\t\t\tstopAnimationEndedSignal.dispatch();\n\t\t\tresetRatios();\n\t\t}\n\t}\n\n\treturn {\n\t\tinit,\n\t\tupdate,\n\t\tresetRatios,\n\t};\n};\nconst stopAnimationManager = StopAnimationManager();\nexport { stopAnimationManager, stopSpawnRatio, stopPushDownRatio, stopAnimationDuration };\n","import math from '../utils/math';\n\nimport { errorAnimationEndedSignal, stateSignal } from './signals';\nimport { AnimationResult, AnimationStatus } from '../../types/stateManager';\n\nlet isActive = false;\nlet failRatio = 0;\nconst errorAnimationDuration = 3.5; // seconds\nlet failShakeRatio = 0;\nlet failFloatingCubesRatio = 0;\nlet failSpawnRatio = 0;\nlet failPushDownRatio = 0;\n\nconst ErrorAnimationManager = () => {\n\tfunction init() {\n\t\tstateSignal.add((status, result) => {\n\t\t\tif (status === AnimationStatus.RESULT && result === AnimationResult.FAILED) {\n\t\t\t\tisActive = true;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction resetRatios() {\n\t\tfailRatio = 0;\n\t\tfailShakeRatio = 0;\n\t\tfailFloatingCubesRatio = 0;\n\t\tfailPushDownRatio = 0;\n\t\tfailSpawnRatio = 0;\n\t\tisActive = false;\n\t}\n\n\tfunction update(dt: number) {\n\t\tfailRatio += ((isActive ? 1 : 0) * dt) / errorAnimationDuration;\n\t\tfailRatio = math.clamp(failRatio, 0, 1);\n\n\t\tfailShakeRatio = math.fit(failRatio, 0.0, 0.3, 0, 1);\n\t\tfailFloatingCubesRatio = math.fit(failRatio, 0.35, 0.65, 0, 1);\n\t\tfailSpawnRatio = math.fit(failRatio, 0.3, 0.55, 0, 2.5);\n\t\tfailPushDownRatio = math.fit(failRatio, 0.6, 0.8, 0, 1);\n\t\tif (failRatio >= 1) {\n\t\t\terrorAnimationEndedSignal.dispatch();\n\t\t\tresetRatios();\n\t\t}\n\t}\n\n\treturn {\n\t\tinit,\n\t\tresetRatios,\n\t\tupdate,\n\t};\n};\nconst errorAnimationManager = ErrorAnimationManager();\nexport { errorAnimationManager, failShakeRatio, failFloatingCubesRatio, failSpawnRatio, failPushDownRatio, errorAnimationDuration };\n","import math from '../utils/math';\n\nimport { completeAnimationEndedSignal, stateSignal } from './signals';\nimport { AnimationResult, AnimationStatus, SuccessLevel } from '../../types/stateManager';\n\nlet currentAnimationStyle: SuccessLevel | null;\nlet successRatio = 0;\nconst successAnimationDuration = 6.5; // seconds\nlet towerRotationRatio = 0;\nlet floatingCoinsRatio = 0;\nlet floatingCubesRatio = 0;\nlet vortexCoinsRatio = 0;\nlet successPushDownRatio = 0;\nlet successColorTowerRatio = 0;\nlet floatingCubesDisplacement = 1;\n\nconst SuccessAnimationManager = () => {\n\tfunction init() {\n\t\tstateSignal.add((status, result, completeAnimationLevel) => {\n\t\t\tif (status === AnimationStatus.RESULT && (result === AnimationResult.COMPLETED || result === AnimationResult.REPLAY)) {\n\t\t\t\t_triggerNewAnimation(completeAnimationLevel);\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction _triggerNewAnimation(animationStyle) {\n\t\tcurrentAnimationStyle = animationStyle;\n\t}\n\n\tfunction resetRatios() {\n\t\tsuccessRatio = 0;\n\t\ttowerRotationRatio = 0;\n\t\tfloatingCoinsRatio = 0;\n\t\tfloatingCubesRatio = 0;\n\t\tvortexCoinsRatio = 0;\n\t\tsuccessPushDownRatio = 0;\n\t\tsuccessColorTowerRatio = 0;\n\t\tfloatingCubesDisplacement = 1;\n\n\t\tcurrentAnimationStyle = null;\n\t}\n\n\tfunction _updateRatios1() {\n\t\tfloatingCubesDisplacement = 1;\n\t\ttowerRotationRatio = 0;\n\t\tfloatingCoinsRatio = 0;\n\t\tfloatingCubesRatio = math.fit(successRatio, 0.2, 0.49, 0, 1.2);\n\t\tsuccessPushDownRatio = math.fit(successRatio, 0.45, 0.55, 0, 1);\n\t\tsuccessColorTowerRatio = math.fit(successRatio, 0.45, 0.7, 0, 1);\n\t\tvortexCoinsRatio = math.fit(successRatio, 0.55, 1, 0, 1);\n\t}\n\n\tfunction _updateRatios2() {\n\t\tfloatingCubesDisplacement = 1.5;\n\t\tfloatingCoinsRatio = 0;\n\t\ttowerRotationRatio = math.fit(successRatio, 0.1, 0.45, 0, 1);\n\t\tfloatingCubesRatio = math.fit(successRatio, 0.15, 0.49, 0, 1.2);\n\t\tsuccessPushDownRatio = math.fit(successRatio, 0.45, 0.55, 0, 1);\n\t\tsuccessColorTowerRatio = math.fit(successRatio, 0.45, 0.7, 0, 1);\n\t\tvortexCoinsRatio = math.fit(successRatio, 0.55, 1, 0, 1);\n\t}\n\n\tfunction _updateRatios3() {\n\t\tfloatingCubesDisplacement = 2;\n\t\ttowerRotationRatio = math.fit(successRatio, 0.1, 0.5, 0, 1);\n\t\tfloatingCoinsRatio = math.fit(successRatio, 0.2, 0.51, 0, 1);\n\t\tfloatingCubesRatio = math.fit(successRatio, 0.2, 0.49, 0, 1.2);\n\t\tsuccessPushDownRatio = math.fit(successRatio, 0.45, 0.55, 0, 1);\n\t\tsuccessColorTowerRatio = math.fit(successRatio, 0.45, 0.7, 0, 1);\n\t\tvortexCoinsRatio = math.fit(successRatio, 0.6, 1, 0, 1);\n\t}\n\n\tfunction update(dt: number) {\n\t\tsuccessRatio += ((currentAnimationStyle ? 1 : 0) * dt) / successAnimationDuration;\n\t\tsuccessRatio = math.clamp(successRatio, 0, 1);\n\n\t\tswitch (currentAnimationStyle) {\n\t\t\tcase SuccessLevel.ONE:\n\t\t\t\t_updateRatios1();\n\t\t\t\tbreak;\n\t\t\tcase SuccessLevel.TWO:\n\t\t\t\t_updateRatios2();\n\t\t\t\tbreak;\n\t\t\tcase SuccessLevel.THREE:\n\t\t\t\t_updateRatios3();\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (successRatio >= 1) {\n\t\t\tcompleteAnimationEndedSignal.dispatch();\n\t\t\tresetRatios();\n\t\t}\n\t}\n\n\treturn {\n\t\tinit,\n\t\tupdate,\n\t\tresetRatios,\n\t};\n};\n\nconst successAnimationManager = SuccessAnimationManager();\nexport {\n\tsuccessAnimationManager,\n\tsuccessRatio,\n\ttowerRotationRatio,\n\tfloatingCoinsRatio,\n\tfloatingCubesRatio,\n\tvortexCoinsRatio,\n\tsuccessPushDownRatio,\n\tsuccessColorTowerRatio,\n\tfloatingCubesDisplacement,\n\tsuccessAnimationDuration,\n};\n","import math from '../utils/math';\nimport { properties } from '../core/properties';\nimport { heroBlocks as blocksVisual } from '../visuals/hero/hero';\n\nimport {\n\thasNotStarted,\n\tisFailResult,\n\tisFree,\n\tisReplayResult,\n\tisRestart,\n\tisResult,\n\tisResultAnimation,\n\tisStopped,\n\tisSuccessResult,\n\tPREVENT_CYCLE_STATES,\n\tresetCycleResults,\n\tresult,\n\tstateManager,\n\tstatus,\n} from './stateManager';\nimport { board, mainTile, TOTAL_TILES } from './board';\nimport Block from './Block';\n\nimport { stopAnimationManager } from './stopAnimationManager';\nimport { errorAnimationManager } from './errorAnimationManager';\nimport { successAnimationManager } from '../logic/successAnimationManager';\nimport { completeAnimationEndedSignal, endCycleSignal, errorAnimationEndedSignal, spawnSignal, stopAnimationEndedSignal } from '../logic/signals';\nimport { SystemManagerState } from '../../types/systemManager';\n\nlet firstStartAnimationRatio: SystemManagerState['firstStartAnimationRatio'] = 0;\nlet blocks: SystemManagerState['blocks'] = [];\nlet lastSpawnedBlock: SystemManagerState['lastSpawnedBlock'] = null;\nlet cycleIndex: SystemManagerState['cycleIndex'] = 0;\nlet animationSpeedRatio: SystemManagerState['animationSpeedRatio'] = 0;\nlet previousSuccessBlocksAnimationRatio: SystemManagerState['previousSuccessBlocksAnimationRatio'] = 0;\n\nconst SystemManager = () => {\n\tfunction _spawnBlock() {\n\t\tif (_shouldPreventSpawn()) return;\n\t\tif (isSuccessResult || isReplayResult) {\n\t\t\t_spawnMultipleBlocks();\n\t\t} else {\n\t\t\t_spawnSingleBlock();\n\t\t}\n\n\t\tif (blocks.length === properties.maxFreeBlocksCount && isFree) return;\n\t\tspawnSignal.dispatch();\n\t}\n\n\tfunction _shouldPreventSpawn() {\n\t\treturn isFailResult || result === 'failed' || isStopped || blocks.length >= TOTAL_TILES || (mainTile?.isOccupied && !isSuccessResult && !isReplayResult);\n\t}\n\n\tfunction _spawnMultipleBlocks() {\n\t\tlet blocksToSpawn = TOTAL_TILES - properties.activeBlocksCount;\n\t\tif (properties.errorBlock) {\n\t\t\tif (properties.errorBlock.currentTile) {\n\t\t\t\tproperties.errorBlock.currentTile.isOccupied = false;\n\t\t\t}\n\t\t\tblocksToSpawn += 1;\n\t\t}\n\t\tfor (let i = 0; i < blocksToSpawn; i++) {\n\t\t\tconst newTile = board.getRandomFreeTile();\n\t\t\tif (newTile) {\n\t\t\t\tconst block = new Block(blocks.length);\n\t\t\t\tblock.currentTile = newTile;\n\t\t\t\tblock.init();\n\t\t\t\tblock.updateTile();\n\t\t\t\tblocks = [block, ...blocks];\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _spawnSingleBlock() {\n\t\tlet block: Block | null | undefined = null;\n\n\t\tconst needsErrorBlockReplacement = Boolean(properties.errorBlock && properties.errorBlock.errorLifeCycle >= properties.errorBlockMaxLifeCycle);\n\t\tconst canAddNewBlock = Boolean(blocks.length < properties.maxFreeBlocksCount && isFree);\n\t\tif (!needsErrorBlockReplacement) {\n\t\t\tif (canAddNewBlock) {\n\t\t\t\tblock = new Block(blocks.length);\n\t\t\t\tlastSpawnedBlock = block;\n\t\t\t}\n\t\t} else {\n\t\t\tproperties.errorBlock?.reset(true);\n\t\t\tblocksVisual.resetBlockFromLogicBlock(properties.errorBlock);\n\t\t\tblock = properties.errorBlock;\n\t\t\tproperties.errorBlock = null;\n\t\t}\n\t\tif (block) {\n\t\t\tblock.currentTile = mainTile;\n\t\t\tblock.init();\n\t\t\tblock.updateTile();\n\t\t}\n\t}\n\n\tfunction _startNewCycle() {\n\t\tstateManager.updateAfterCycle();\n\t\tif (PREVENT_CYCLE_STATES.includes(status)) return;\n\n\t\tif (lastSpawnedBlock) {\n\t\t\tblocks = [lastSpawnedBlock, ...blocks];\n\t\t\tlastSpawnedBlock = null;\n\t\t}\n\t\tproperties.activeBlocksCount = blocks.length;\n\n\t\tif (isFailResult || isStopped) return;\n\n\t\tblocks.forEach((block) => block.resetAfterCycle());\n\n\t\tendCycleSignal.dispatch();\n\t\tcycleIndex++;\n\n\t\t_spawnBlock();\n\t\t_calculatePaths();\n\t}\n\n\tfunction _calculatePaths() {\n\t\tif (lastSpawnedBlock?.hasBeenSpawned) {\n\t\t\tlastSpawnedBlock.moveToNextTile(isFree, 0);\n\t\t}\n\n\t\tconst _isFree = cycleIndex % 2 === 0 ? true : properties.activeBlocksCount < properties.maxFreeBlocksCount - 1;\n\n\t\tblocks.forEach((block, index) => {\n\t\t\tif (!block.hasBeenEvaluated && block.hasBeenSpawned) {\n\t\t\t\tblock.moveToNextTile(_isFree, index * 0.2);\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction reset() {\n\t\tblocks.forEach((block) => block.reset());\n\t\tblocksVisual.reset();\n\t\tboard.reset();\n\n\t\tblocks = [];\n\t\tlastSpawnedBlock = null;\n\t\tcycleIndex = 0;\n\n\t\tanimationSpeedRatio = 0;\n\n\t\tconst needsRestart = resetCycleResults.includes(result);\n\t\tstateManager.reset();\n\t\t_startNewCycle();\n\n\t\tif (needsRestart) {\n\t\t\tstateManager.setStart();\n\t\t}\n\n\t\tcompleteAnimationEndedSignal.remove(() => {\n\t\t\tstateManager.setRestart();\n\t\t\t_startNewCycle();\n\t\t\tpreviousSuccessBlocksAnimationRatio = 1;\n\t\t});\n\t\tstopAnimationEndedSignal.remove(() => {\n\t\t\tstateManager.setRestart();\n\t\t\treset();\n\t\t});\n\t\terrorAnimationEndedSignal.remove(() => {\n\t\t\tstateManager.setRestart();\n\t\t\t_startNewCycle();\n\t\t});\n\t}\n\n\tfunction _updateAnimationRatios(dt: number) {\n\t\tconst _isResult = isResult;\n\t\tfirstStartAnimationRatio = math.saturate(firstStartAnimationRatio + dt * (properties.showVisual ? 1 : 0));\n\t\tanimationSpeedRatio = Math.min(1, animationSpeedRatio + dt * (_isResult ? 1 : 0));\n\t\tpreviousSuccessBlocksAnimationRatio = math.saturate(previousSuccessBlocksAnimationRatio - dt / 1.5);\n\t}\n\n\tfunction _checkCycleCompletion() {\n\t\tlet isCycleComplete = true;\n\t\tif (lastSpawnedBlock) {\n\t\t\tisCycleComplete = Boolean(isCycleComplete && lastSpawnedBlock.hasBeenSpawned);\n\t\t}\n\n\t\tblocks.forEach((block) => {\n\t\t\tif (block.lifeCycle > 0) {\n\t\t\t\tisCycleComplete = Boolean(isCycleComplete && block.hasBeenEvaluated && block.hasAnimationEnded);\n\t\t\t} else {\n\t\t\t\tisCycleComplete = isCycleComplete && block.spawnAnimationRatio === 1;\n\t\t\t}\n\t\t});\n\n\t\treturn isCycleComplete || isResultAnimation || isFailResult || isStopped;\n\t}\n\n\tfunction update(dt: number) {\n\t\t_updateAnimationRatios(dt);\n\n\t\tsuccessAnimationManager.update(dt);\n\t\tstopAnimationManager.update(dt);\n\t\terrorAnimationManager.update(dt);\n\n\t\tif (hasNotStarted) {\n\t\t\t_startNewCycle();\n\t\t\treturn;\n\t\t}\n\n\t\tif (isRestart) {\n\t\t\treset();\n\t\t\treturn;\n\t\t}\n\n\t\tif (isResultAnimation) {\n\t\t\tstateManager.setRestartAnimation();\n\t\t}\n\n\t\tboard.preUpdate(dt);\n\t\tif (lastSpawnedBlock) {\n\t\t\tlastSpawnedBlock.update(dt);\n\t\t}\n\t\tblocks.forEach((block) => block.update(dt));\n\t\tboard.update(dt);\n\n\t\tconst isCycleComplete = _checkCycleCompletion();\n\n\t\tif (isCycleComplete) {\n\t\t\t_startNewCycle();\n\t\t}\n\t}\n\n\tfunction init() {\n\t\tstateManager.init();\n\t\tsuccessAnimationManager.init();\n\t\tstopAnimationManager.init();\n\t\terrorAnimationManager.init();\n\t\tboard.init();\n\n\t\tcompleteAnimationEndedSignal.add(() => {\n\t\t\tstateManager.setRestart();\n\t\t\t_startNewCycle();\n\t\t\tpreviousSuccessBlocksAnimationRatio = 1;\n\t\t});\n\t\tstopAnimationEndedSignal.add(() => {\n\t\t\tstateManager.setRestart();\n\t\t\treset();\n\t\t});\n\t\terrorAnimationEndedSignal.add(() => {\n\t\t\tstateManager.setRestart();\n\t\t\t_startNewCycle();\n\t\t});\n\t}\n\n\treturn {\n\t\tinit,\n\t\tupdate,\n\t\treset,\n\t};\n};\nconst game = SystemManager();\nexport default game;\nexport { firstStartAnimationRatio, blocks, lastSpawnedBlock, previousSuccessBlocksAnimationRatio };\n","export default \"#ifndef IS_BASE\\n    attribute vec3 instancePos;\\n    attribute vec4 instanceOrient;\\n    attribute float instanceShowRatio;\\n    attribute vec3 instanceSpinPivot;\\n    attribute vec4 instanceSpinOrient;\\n    attribute vec3 instanceColor;\\n    attribute float instanceIsActive;\\n    attribute vec2 instanceNextDirection;\\n    varying float v_clipY;\\n#endif\\n\\n#ifdef IS_DEPTH\\n    varying vec2 vHighPrecisionZW;\\n#else\\n    varying vec3 v_modelPosition;\\n    varying vec3 v_viewPosition;\\n    varying vec3 v_worldPosition;\\n    varying vec3 v_viewNormal;\\n    varying vec3 v_worldNormal;\\n    varying vec2 v_uv;\\n    varying float v_ao;\\n    varying vec3 v_color;\\n\\n    uniform sampler2D u_infoTexture;\\n    uniform sampler2D u_infoTextureLinear;\\n    uniform float u_endAnimationRatio;\\n    uniform float u_time;\\nuniform mat4 directionalShadowMatrix[1];\\nvarying vec4 vDirectionalShadowCoord[1];\\nvarying vec4 v_goboCoord;\\n\\nstruct DirectionalLightShadow {\\n    float shadowBias;\\n    float shadowNormalBias;\\n    float shadowRadius;\\n    vec2 shadowMapSize;\\n};\\n\\nuniform DirectionalLightShadow directionalLightShadows[1];\\n#endif\\n\\nvec3 qrotate(vec4 q, vec3 v) {\\n\\treturn v + 2. * cross(q.xyz, cross(q.xyz, v) + q.w * v);\\n}\\n\\nfloat linearstep(float edge0, float edge1, float x) {\\n    return  clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\\n}\\n\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\n\\nvoid main () {\\n    vec3 pos = position;\\n    vec3 nor = normal;\\n\\n    #ifndef IS_BASE\\n        pos.y += 1.01 * (instanceShowRatio - 1.0);\\n        v_clipY = pos.y + 0.51;\\n\\n        // local spin\\n        pos = qrotate(instanceSpinOrient, pos - instanceSpinPivot) + instanceSpinPivot;\\n        nor = qrotate(instanceSpinOrient, nor);\\n\\n        // global transform\\n        pos = qrotate(instanceOrient, pos) + instancePos;\\n        nor = qrotate(instanceOrient, nor);\\n    #endif\\n\\n    vec4 viewPos = modelViewMatrix * vec4(pos, 1.0);\\n    gl_Position = projectionMatrix * viewPos;\\n\\n    #ifndef IS_DEPTH\\n\\n        vec3 viewNormal = normalMatrix * nor;\\n        vec4 worldPosition = (modelMatrix * vec4(pos, 1.0));\\n\\n        v_modelPosition = position;\\n        v_viewPosition = -viewPos.xyz;\\n        v_worldPosition = worldPosition.xyz;\\n        v_viewNormal = normalMatrix * nor;\\n        v_worldNormal = inverseTransformDirection(viewNormal, viewMatrix);\\n\\n        #ifndef IS_BASE\\n            v_color = instanceColor;\\n        #endif\\n\\n    // Offsetting the position used for querying occlusion along the world normal can be used to reduce shadow acne.\\n    vec4 shadowWorldPosition;\\n\\n    #ifdef IS_BASE\\n    shadowWorldPosition = vec4((position - vec3(0., -2.5, 0.)) * 1.005 + vec3(0., -2.5, 0.), 1.);\\n    shadowWorldPosition = modelMatrix * shadowWorldPosition;\\n    #else\\n    shadowWorldPosition = vec4(position * 0.98, 1.);\\n    shadowWorldPosition.y += instanceShowRatio - 1.;\\n    shadowWorldPosition.xyz = qrotate(instanceSpinOrient, shadowWorldPosition.xyz - instanceSpinPivot) + instanceSpinPivot;\\n    shadowWorldPosition.xyz = qrotate(instanceOrient, shadowWorldPosition.xyz) + instancePos;\\n    shadowWorldPosition = modelMatrix * shadowWorldPosition;\\n    #endif\\n    vDirectionalShadowCoord[0] = directionalShadowMatrix[0] * shadowWorldPosition;\\n\\n    v_goboCoord = directionalShadowMatrix[0] * (0.2 * vec4(sin(u_time * 0.1), 0.0, cos(u_time * 0.15), 0.0) + worldPosition + vec4(v_worldNormal * directionalLightShadows[0].shadowNormalBias, 0. ));\\n\\n\\n    #ifndef IS_BASE\\n            v_uv = (instancePos.xz + 3.5) / 7.0;\\n        #else\\n            v_uv = (position.xz + 3.5) / 7.0;\\n        #endif\\n\\n        // ao\\n        float ao = 0.0;\\n        vec4 infoTexture = texture2D(u_infoTexture, vec2(1.0 - v_uv.y, v_uv.x));\\n\\n        #ifndef IS_BASE\\n\\n            float texel = 1.0 / 7.0;\\n\\n            vec2 infoTextureUv = vec2(1.0 - v_uv.y, v_uv.x);\\n            vec2 infoTextureUvNext = infoTextureUv + texel * vec2(instanceNextDirection.y, instanceNextDirection.x);\\n\\n            vec3 texelVec = vec3(texel, -texel, 0.0);\\n            float activeRatio = mix(1.0, infoTexture.x, instanceIsActive);\\n\\n            vec4 infoTextureTop = vec4(1.0);\\n            vec4 infoTextureRight = vec4(1.0);\\n            vec4 infoTextureBottom = vec4(1.0);\\n            vec4 infoTextureLeft = vec4(1.0);\\n\\n            if (instanceIsActive > 0.5) {\\n                infoTextureTop = mix(texture2D(u_infoTextureLinear, infoTextureUv + texelVec.xz), texture2D(u_infoTextureLinear, infoTextureUvNext + texelVec.xz), 1. - activeRatio);\\n                infoTextureRight = mix(texture2D(u_infoTextureLinear, infoTextureUv + texelVec.zx), texture2D(u_infoTextureLinear, infoTextureUvNext + texelVec.zx), 1. - activeRatio);\\n                infoTextureBottom = mix(texture2D(u_infoTextureLinear, infoTextureUv + texelVec.yz), texture2D(u_infoTextureLinear, infoTextureUvNext + texelVec.yz), 1. - activeRatio);\\n                infoTextureLeft = mix(texture2D(u_infoTextureLinear, infoTextureUv + texelVec.zy), texture2D(u_infoTextureLinear, infoTextureUvNext + texelVec.zy), 1. - activeRatio);\\n            }\\n\\n            float texel2 = texel * 2.0;\\n            ao = max(ao, v_uv.y < texel2 ? 0.0 : infoTextureTop.x * max(-nor.z, 0.0));\\n            ao = max(ao, v_uv.x > 1.0 - texel2 ? 0.0 : infoTextureRight.x * max(nor.x, 0.0));\\n            ao = max(ao, v_uv.y > 1.0 - texel2 ? 0.0 : infoTextureBottom.x * max(nor.z, 0.0));\\n            ao = max(ao, v_uv.x < texel2 ? 0.0 : infoTextureLeft.x * max(-nor.x, 0.0));\\n            ao = 1.0 - ao * 0.8;\\n            ao *= clamp(v_worldNormal.y * 0.5 + 0.5 + ao, 0.0, 1.0);\\n\\n        #else\\n\\n            float aoThreshold = 2.5;\\n            float depth = 0.03;\\n            ao = linearstep(aoThreshold - depth, aoThreshold, abs(v_modelPosition.x));\\n            ao += linearstep(aoThreshold - depth, aoThreshold, abs(v_modelPosition.z));\\n            aoThreshold = 0.5;\\n            ao += linearstep(aoThreshold + depth, aoThreshold, -v_modelPosition.y + depth * u_endAnimationRatio * 0.75);\\n            ao = min(1.0, ao);\\n\\n        #endif\\n\\n        v_ao = ao;\\n\\n    #else\\n\\n        vHighPrecisionZW = gl_Position.zw;\\n\\n    #endif\\n\\n}\\n\"","export default \"uniform vec3 u_lightPosition;\\nuniform sampler2D u_infoTexture;\\nuniform sampler2D u_infoTextureLinear;\\nuniform sampler2D u_goboTexture;\\nuniform float u_goboIntensity;\\n\\nuniform float u_endAnimationRatio;\\nuniform float u_time;\\n\\n#ifdef IS_BASE\\nuniform vec2 u_resolution;\\nuniform vec3 u_bgColor1;\\nuniform vec3 u_bgColor2;\\nuniform vec3 u_color;\\nuniform vec3 u_blocksColor;\\nuniform float u_yDisplacement;\\nuniform float u_successAnimationRatio;\\nuniform vec3 u_successColor;\\nuniform vec3 u_prevSuccessColor;\\n#endif\\n\\nvarying vec3 v_modelPosition;\\nvarying vec3 v_worldPosition;\\n\\nvarying vec3 v_viewNormal;\\nvarying vec3 v_worldNormal;\\n\\nvarying vec2 v_uv;\\n\\nvarying float v_ao;\\nvarying vec3 v_color;\\nvarying float v_clipY;\\n\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n\\nvec3 SRGBtoLinear(vec3 srgb) {\\n    return pow(srgb, vec3(2.2));\\n}\\n\\nvec3 linearToSRGB(vec3 color) {\\n    return pow(color, vec3(1.0 / 2.2));\\n}\\n\\nfloat linearstep(float edge0, float edge1, float x) {\\n    return  clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\\n}\\n\\nvec3 LinearToneMapping( vec3 color, float toneMappingExposure ) {\\n\\treturn saturate( toneMappingExposure * color );\\n}\\n\\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\n// this implementation of ACES is modified to accommodate a brighter viewing environment.\\n// the scale factor of 1/0.6 is subjective. see discussion in #19621.\\nvec3 ACESFilmicToneMapping( vec3 color, float toneMappingExposure ) {\\n\\n\\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ), // transposed from source\\n\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\n\\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ), // transposed from source\\n\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\n\\tcolor = ACESInputMat * color;\\n\\n\\t// Apply RRT and ODT\\n\\tcolor = RRTAndODTFit( color );\\n\\n\\tcolor = ACESOutputMat * color;\\n\\n\\t// Clamp to [0, 1]\\n\\treturn saturate( color );\\n}\\n\\nvec4 cubic(float v) {\\n    vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;\\n    vec4 s = n * n * n;\\n    float x = s.x;\\n    float y = s.y - 4.0 * s.x;\\n    float z = s.z - 4.0 * s.y + 6.0 * s.x;\\n    float w = 6.0 - x - y - z;\\n    return vec4(x, y, z, w);\\n}\\n\\n// https://stackoverflow.com/questions/13501081/efficient-bicubic-filtering-code-in-glsl\\nvec4 textureBicubic(sampler2D t, vec2 texCoords, vec2 textureSize) {\\n   vec2 invTexSize = 1.0 / textureSize;\\n   texCoords = texCoords * textureSize - 0.5;\\n\\n    vec2 fxy = fract(texCoords);\\n    texCoords -= fxy;\\n    vec4 xcubic = cubic(fxy.x);\\n    vec4 ycubic = cubic(fxy.y);\\n\\n    vec4 c = texCoords.xxyy + vec2 (-0.5, 1.5).xyxy;\\n\\n    vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);\\n    vec4 offset = c + vec4 (xcubic.yw, ycubic.yw) / s;\\n\\n    offset *= invTexSize.xxyy;\\n\\n    vec4 sample0 = texture2D(t, offset.xz);\\n    vec4 sample1 = texture2D(t, offset.yz);\\n    vec4 sample2 = texture2D(t, offset.xw);\\n    vec4 sample3 = texture2D(t, offset.yw);\\n\\n    float sx = s.x / (s.x + s.y);\\n    float sy = s.z / (s.z + s.w);\\n\\n    return mix(\\n       mix(sample3, sample2, sx), mix(sample1, sample0, sx)\\n    , sy);\\n}\\n\\n\\n#include <packing>\\n\\nuniform sampler2D directionalShadowMap[1];\\nvarying vec4 vDirectionalShadowCoord[1];\\nvarying vec4 v_goboCoord;\\n\\nstruct DirectionalLightShadow {\\n    float shadowBias;\\n    float shadowNormalBias;\\n    float shadowRadius;\\n    vec2 shadowMapSize;\\n};\\n\\nuniform DirectionalLightShadow directionalLightShadows[1];\\nuniform bool receiveShadow;\\nstruct DirectionalLight {\\n    vec3 direction;\\n    vec3 color;\\n};\\nuniform DirectionalLight directionalLights[1];\\n\\nfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n    return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n}\\n\\nfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n    float shadow = 1.0;\\n\\n    shadowCoord.xyz /= shadowCoord.w;\\n    shadowCoord.z += shadowBias;\\n\\n    bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\\n    bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\\n\\n    if ( frustumTest ) {\\n        vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n        float dx = texelSize.x;\\n        float dy = texelSize.y;\\n\\n        vec2 uv = shadowCoord.xy;\\n        vec2 f = fract( uv * shadowMapSize + 0.5 );\\n        uv -= f * texelSize;\\n\\n        shadow = (\\n        texture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n        texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n        texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n        texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n        mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\\n        texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n        f.x ) +\\n        mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\\n        texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n        f.x ) +\\n        mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\\n        texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n        f.y ) +\\n        mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\\n        texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n        f.y ) +\\n        mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\\n        texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n        f.x ),\\n        mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\\n        texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n        f.x ),\\n        f.y )\\n        ) * ( 1.0 / 9.0 );\\n    }\\n    return shadow;\\n}\\n\\n\\n#include <getBlueNoise>\\n\\nvoid main () {\\n\\n    #ifndef IS_BASE\\n    \\tif (v_clipY < 0.0) discard;\\n    #endif\\n\\n    #ifdef IS_BASE\\n    \\tvec4 infoTexture = texture2D(u_infoTexture, vec2(1.0 - v_uv.y, v_uv.x));\\n    #endif\\n\\n\\tvec3 viewNormal = normalize(v_viewNormal);\\n\\tvec3 N = normalize(v_worldNormal); // normal in world space\\n\\tvec3 V = normalize(cameraPosition - v_worldPosition); // view direction\\n\\tvec3 L = u_lightPosition - v_worldPosition; // light direction\\n\\tfloat lightDistance = length(L);\\n\\tL /= lightDistance;\\n\\tvec3 H = normalize(L + V); // half vector\\n\\n    // basic shading\\n    float attenuation = 1. / (0.08 * lightDistance + 0.001 * lightDistance * lightDistance);\\n\\tfloat NdL = max(0., dot(N, L));\\n\\tfloat NdV = max(0., dot(N, V));\\n\\tfloat specular = pow(max(0., dot(N, H)), 50.);\\n\\n    // ao\\n    float ao = v_ao;\\n\\n    // shadows\\n    float shadowMask = 1.0;\\n    DirectionalLightShadow directionalLight = directionalLightShadows[0];\\n    vec3 noises = 0.*getBlueNoise(gl_FragCoord.xy);\\n    shadowMask = getShadow( directionalShadowMap[0], directionalLight.shadowMapSize, directionalLight.shadowBias + noises.z * -0.001, directionalLight.shadowRadius, vDirectionalShadowCoord[0] + vec4((noises.xy - 0.5) / directionalLight.shadowMapSize, 0.0, 0.0));\\n\\n    shadowMask *= smoothstep(-.5, .5, dot(v_worldNormal, normalize(u_lightPosition)));\\n    #ifdef IS_BASE\\n    shadowMask -= 0.9 * infoTexture.x * linearstep(-0.525, -0.5, v_modelPosition.y);\\n    shadowMask = saturate(shadowMask);\\n    #endif\\n\\n    float gobo = 1.0 - u_goboIntensity * texture2D(u_goboTexture, (v_goboCoord.yx / v_goboCoord.w + 0.5) * 0.8 - 0.5).r;\\n\\n    // final\\n    #ifdef IS_BASE\\n\\tvec3 albedo = (u_color);\\n\\talbedo = mix(albedo, (u_prevSuccessColor), step(-1.5, v_modelPosition.y));\\n\\talbedo = mix(albedo, (u_successColor), smoothstep(0., 0.05, u_successAnimationRatio) * linearstep(1., .5, u_successAnimationRatio));\\n    #else\\n        vec3 albedo = (v_color);\\n    #endif\\n\\tvec3 color = albedo * (0.65 + 0.35 * NdL) + specular * 0.12;\\n\\tcolor += clamp(N.y, 0.0, 0.1);\\n    color *= attenuation;\\n    color += 0.1 * (1.0 - NdV);\\n    color += 0.1 * shadowMask * gobo;\\n    color *= 0.4 + 0.6  * shadowMask * linearstep(0.1, 1.0, gobo);\\n\\n    #ifdef IS_BASE\\n\\tvec4 infoTextureLinear = textureBicubic(u_infoTextureLinear, vec2(1.0 - v_uv.y, v_uv.x), vec2(7.0));\\n\\tfloat blockAo = smoothstep(0.7, 0.1, infoTextureLinear.x);\\n\\tvec3 blockAoColor = u_blocksColor * (1. - blockAo);\\n\\n\\t// color = color + (0.5 + 0.5 * shadowMask) * color * 8.0 * linearstep(0.5, 0.0, u_endAnimationRatio) * blockAoColor * infoTextureLinear.x * linearstep(-0.55, -0.5, v_modelPosition.y);\\n\\tfloat giFactor = infoTextureLinear.x * linearstep(-0.55, -0.5, v_modelPosition.y) * linearstep(0.5, 0.0, u_endAnimationRatio);\\n\\tcolor = mix(color, (color + 0.2) * u_blocksColor, 1.2 * giFactor);\\n\\n\\tcolor *= saturate(1.5 - infoTexture.x * linearstep(-0.525, -0.5, v_modelPosition.y));\\n\\tcolor *= min(1., max(blockAo * 0.5 + 0.5 + u_endAnimationRatio, linearstep(-0.5, -0.55, v_modelPosition.y)));\\n    #else\\n\\t\\tcolor += 0.5 * albedo * linearstep(1.0, 0.0, u_endAnimationRatio) * (1.0 - ao);\\n    #endif\\n\\tcolor *= 0.3 + 0.7 * ao;\\n\\n\\tfloat luma = dot(color, vec3(0.299, 0.587, 0.114));\\n\\tcolor = mix(vec3(luma), color, 1.5);\\n\\n\\tgl_FragColor = vec4(linearToSRGB(ACESFilmicToneMapping(color, 0.8)), 1.);\\n\\n    #ifdef IS_BASE\\n        vec2 screenUv = gl_FragCoord.xy / u_resolution;\\n        float alpha = smoothstep(-6.0, -1.0, v_modelPosition.y + u_yDisplacement);\\n        gl_FragColor.rgb = mix(linearToSRGB(mix(u_bgColor1, u_bgColor2, screenUv.y)), gl_FragColor.rgb, alpha);\\n    #endif\\n\\n}\\n\"","export default \"#include <common>\\n#include <packing>\\n\\nvarying vec2 vHighPrecisionZW;\\nvarying float v_clipY;\\n\\nvoid main() {\\n    #ifndef IS_BASE\\n        if (v_clipY < 0.0) discard;\\n    #endif\\n\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n    gl_FragColor = packDepthToRGBA( fragCoordZ );\\n}\\n\"","import math from '../../utils/math';\nimport * as THREE from 'three';\nimport { Quaternion, Vector2, Vector3 } from 'three';\n\nconst HALF_PI = Math.PI / 2;\nconst _v0 = new THREE.Vector3();\n\nexport default class HeroBlockCoordinates {\n\tanimation = 0;\n\tboardDir: Vector2 = new THREE.Vector2();\n\tboardPos: Vector2 = new THREE.Vector2();\n\tpos: Vector3 = new THREE.Vector3();\n\torient: Quaternion = new THREE.Quaternion();\n\tshowRatio = 0;\n\tspinPivot: Vector3 = new THREE.Vector3();\n\tspinOrient: Quaternion = new THREE.Quaternion();\n\n\tconstructor() {\n\t\tthis.animation = 0;\n\t\tthis.boardDir = new THREE.Vector2();\n\t\tthis.boardPos = new THREE.Vector2();\n\t\tthis.pos = new THREE.Vector3();\n\t\tthis.orient = new THREE.Quaternion();\n\t\tthis.showRatio = 0;\n\t\tthis.spinPivot = new THREE.Vector3();\n\t\tthis.spinOrient = new THREE.Quaternion();\n\t}\n\n\treset() {\n\t\tthis.animation = 0;\n\t\tthis.boardDir.set(0, 0);\n\t\tthis.boardPos.set(0, 0);\n\t\tthis.pos.set(0, 0, 0);\n\t\tthis.orient.identity();\n\t\tthis.showRatio = 0;\n\t\tthis.spinPivot.set(0, 0, 0);\n\t\tthis.spinOrient.identity();\n\t}\n\n\tupdate(_dt: number) {\n\t\tthis.pos.set(this.boardPos.x, 0, -this.boardPos.y);\n\t\tthis.spinPivot.set(this.boardDir.x * 0.5, -0.5, -this.boardDir.y * 0.5);\n\t\t_v0.set(-this.boardDir.y, 0, -this.boardDir.x);\n\t\tthis.spinOrient.setFromAxisAngle(_v0, this.animation * HALF_PI);\n\t}\n\n\taddsFallAnimation(ratio) {\n\t\t_v0.set(this.boardDir.x, -ratio, -this.boardDir.y);\n\t\tthis.pos.addScaledVector(_v0, ratio);\n\t\t_v0.set(this.boardDir.x * 0.5, 0, -this.boardDir.y * 0.5);\n\t\tthis.spinPivot.lerp(_v0, math.saturate(ratio));\n\t}\n}\n","import * as THREE from 'three';\n\nimport loader from '../../core/loader';\nimport { properties } from '../../core/properties';\nimport math from '../../utils/math';\nimport ease, { customEasing } from '../../utils/ease';\nimport blueNoise from '../../utils/blueNoise/blueNoise';\nimport { blocks, firstStartAnimationRatio, lastSpawnedBlock, previousSuccessBlocksAnimationRatio } from '../../logic/systemManager';\nimport { result } from '../../logic/stateManager';\nimport { HALF_SIZE, SIZE, TOTAL_TILES, SIZE_WITH_PADDING, TOTAL_TILES_WITH_PADDING, tiles, board } from '../../logic/board';\n\nimport vert from './hero.vert?raw';\nimport frag from './hero.frag?raw';\nimport fragDepth from './heroDepth.frag?raw';\n\nimport { floatingCubesDisplacement, floatingCubesRatio, successPushDownRatio, successRatio, successColorTowerRatio, towerRotationRatio } from '../../logic/successAnimationManager';\nimport { stopPushDownRatio, stopSpawnRatio } from '../../logic/stopAnimationManager';\nimport { failFloatingCubesRatio, failPushDownRatio, failShakeRatio, failSpawnRatio } from '../../logic/errorAnimationManager';\nimport HeroBlockCoordinates from './HeroBlockCoordinates';\nimport { lightCameraHelperSignal, lightCameraUpdateSignal } from '../../logic/signals';\n\nimport { InstancedBufferAttribute } from 'three';\nimport { SharedUniforms } from '../../../types/properties';\nimport { HeroType } from '../../../types/hero';\nimport { AnimationResult } from '../../../types';\nimport { ASSETS_PATH } from '../../core/settings';\n\nconst TOTAL_BLOCKS = 2 * TOTAL_TILES;\nconst _v2_0 = new THREE.Vector2();\nconst _v2_1 = new THREE.Vector2();\nconst _v3_0 = new THREE.Vector3();\nconst _v3_1 = new THREE.Vector3();\nconst _q_0 = new THREE.Quaternion();\nconst _q_1 = new THREE.Quaternion();\nconst MAIN_COLOR = new THREE.Color();\nconst SUCCESS_COLOR = new THREE.Color();\nconst ERROR_COLOR = new THREE.Color();\nconst DEFAULT_COLOR = new THREE.Color();\nconst _c = new THREE.Color();\nconst _c2 = new THREE.Color();\nconst heroContainer = new THREE.Object3D();\n\nconst heroSharedUniforms: SharedUniforms = {\n\tu_lightPosition: { value: new THREE.Vector3(-2, 6, -4) },\n\tu_goboTexture: { value: null },\n\tu_goboIntensity: { value: 0.45 },\n\tu_infoTexture: { value: null },\n\tu_infoTextureLinear: { value: null },\n\tu_endAnimationRatio: { value: 0 },\n};\n\nconst heroState: HeroType = {\n\t_baseMesh: undefined,\n\t_blocksMesh: undefined,\n\t_blockList: [],\n\tanimationTotalFrames: 0,\n\theroLoseAnimationPositionArray: undefined,\n\theroLoseAnimationOrientArray: undefined,\n\t_blockRenderList: [],\n\tsuccessColorRatio: 0,\n\tdirectLight: undefined,\n\tinfoTexture: undefined,\n\t_instancePosArray: undefined,\n\t_instanceOrientArray: undefined,\n\t_instanceShowRatioArray: undefined,\n\t_instanceSpinPivotArray: undefined,\n\t_instanceSpinOrientArray: undefined,\n\t_instanceColorArray: undefined,\n\t_instanceIsActiveArray: undefined,\n\t_instanceNextDirectionArray: undefined,\n\tisShadowCameraHelperVisible: undefined,\n\tshadowCameraHelper: undefined,\n\tinfoTextureLinear: undefined,\n\theroSharedUniforms,\n};\n\nconst Hero = () => {\n\tasync function preload() {\n\t\tconst arr = Array.from({ length: TOTAL_BLOCKS });\n\t\theroState._blockList = arr.map((_) => new HeroBlockCoordinates());\n\t\theroState._blockRenderList = [...heroState._blockList];\n\n\t\tconst modelPath = ASSETS_PATH + 'models';\n\t\tconst texturePath = ASSETS_PATH + 'textures';\n\n\t\tloader.loadBuf(`${modelPath}/BASE.buf`, (geometry) => {\n\t\t\t_onBaseBlocksLoaded(geometry);\n\t\t});\n\t\tloader.loadBuf(`${modelPath}/BOX.buf`, (geometry) => {\n\t\t\t_onBoxLoaded(geometry);\n\t\t});\n\t\tloader.loadBuf(`${modelPath}/LOSE_ANIMATION.buf`, (geometry) => {\n\t\t\tconst { position, orient } = geometry.attributes;\n\t\t\theroState.animationTotalFrames = position.count / TOTAL_TILES;\n\t\t\theroState.heroLoseAnimationPositionArray = position.array;\n\t\t\theroState.heroLoseAnimationOrientArray = orient.array;\n\t\t});\n\t\tloader.loadTexture(`${texturePath}/gobo.jpg`, (texture) => {\n\t\t\ttexture.flipY = false;\n\t\t\ttexture.needsUpdate = true;\n\t\t\tif (heroSharedUniforms) {\n\t\t\t\theroSharedUniforms.u_goboTexture.value = texture;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction _onBaseBlocksLoaded(geometry) {\n\t\tconst uniforms = {\n\t\t\t...THREE.UniformsUtils.merge([THREE.UniformsLib.lights]),\n\t\t\t...properties.sharedUniforms,\n\t\t\t...heroSharedUniforms,\n\t\t\t// ...blueNoise.sharedUniforms,\n\t\t\tu_color: { value: new THREE.Color(properties.neutralColor) },\n\t\t\tu_blocksColor: { value: new THREE.Color() },\n\t\t\tu_yDisplacement: { value: 0 },\n\t\t\tu_prevSuccessColor: { value: new THREE.Color(properties.neutralColor).convertSRGBToLinear() },\n\t\t\tu_successColor: { value: new THREE.Color(properties.successColor).convertSRGBToLinear() },\n\t\t\tu_successAnimationRatio: { value: 0 },\n\t\t};\n\n\t\tconst material = new THREE.ShaderMaterial({\n\t\t\tuniforms,\n\t\t\tvertexShader: vert,\n\t\t\tfragmentShader: frag,\n\t\t\tlights: true,\n\t\t\ttransparent: true,\n\t\t\tdefines: { IS_BASE: true },\n\t\t});\n\t\theroState._baseMesh = new THREE.Mesh(geometry, material);\n\t\theroState._baseMesh.receiveShadow = heroState._baseMesh.castShadow = true;\n\t\theroState._baseMesh.frustumCulled = false;\n\n\t\theroState._baseMesh.customDepthMaterial = new THREE.ShaderMaterial({\n\t\t\tvertexShader: vert,\n\t\t\tfragmentShader: fragDepth,\n\t\t\tdefines: { IS_DEPTH: true, IS_BASE: true },\n\t\t});\n\t\theroContainer.add(heroState._baseMesh);\n\t}\n\n\tfunction _onBoxLoaded(refGeometry) {\n\t\tconst geometry = new THREE.InstancedBufferGeometry();\n\t\tgeometry.index = refGeometry.index;\n\t\tObject.keys(refGeometry.attributes).forEach((id) => {\n\t\t\tgeometry.setAttribute(id, refGeometry.attributes[id]);\n\t\t});\n\t\tgeometry.instanceCount = TOTAL_BLOCKS;\n\n\t\tconst createInstancedAttribute = (name, itemSize) => {\n\t\t\tconst array = new Float32Array(TOTAL_BLOCKS * itemSize);\n\t\t\tgeometry.setAttribute(name, new THREE.InstancedBufferAttribute(array, itemSize, itemSize !== 4, 1).setUsage(THREE.DynamicDrawUsage));\n\t\t\treturn array;\n\t\t};\n\n\t\theroState._instancePosArray = createInstancedAttribute('instancePos', 3);\n\t\theroState._instanceOrientArray = createInstancedAttribute('instanceOrient', 4);\n\t\theroState._instanceShowRatioArray = createInstancedAttribute('instanceShowRatio', 1);\n\t\theroState._instanceSpinPivotArray = createInstancedAttribute('instanceSpinPivot', 3);\n\t\theroState._instanceSpinOrientArray = createInstancedAttribute('instanceSpinOrient', 4);\n\t\theroState._instanceColorArray = createInstancedAttribute('instanceColor', 3);\n\t\theroState._instanceIsActiveArray = createInstancedAttribute('instanceIsActive', 1);\n\t\theroState._instanceNextDirectionArray = createInstancedAttribute('instanceNextDirection', 2);\n\n\t\tconst material = new THREE.ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\t...THREE.UniformsUtils.merge([THREE.UniformsLib.lights]),\n\t\t\t\t...properties.sharedUniforms,\n\t\t\t\t...heroSharedUniforms,\n\t\t\t\t...blueNoise.bn_sharedUniforms,\n\t\t\t},\n\t\t\tvertexShader: vert,\n\t\t\tfragmentShader: frag,\n\t\t\tlights: true,\n\t\t});\n\n\t\theroState._blocksMesh = new THREE.Mesh(geometry, material);\n\t\theroState._blocksMesh.frustumCulled = false;\n\t\theroState._blocksMesh.castShadow = heroState._blocksMesh.receiveShadow = true;\n\n\t\theroState._blocksMesh.customDepthMaterial = new THREE.ShaderMaterial({\n\t\t\tuniforms: { ...heroSharedUniforms },\n\t\t\tvertexShader: vert,\n\t\t\tfragmentShader: fragDepth,\n\t\t\tdefines: { IS_DEPTH: true },\n\t\t});\n\n\t\theroContainer.add(heroState._blocksMesh);\n\t}\n\n\tfunction init() {\n\t\theroState.directLight = new THREE.DirectionalLight(0xffffff, 1);\n\t\theroState.directLight.castShadow = true;\n\t\theroState.directLight.shadow.camera.near = properties.lightCameraNear;\n\t\theroState.directLight.shadow.camera.far = properties.lightCameraFar;\n\t\theroState.directLight.shadow.camera.right = properties.lightCameraSize;\n\t\theroState.directLight.shadow.camera.left = -properties.lightCameraSize;\n\t\theroState.directLight.shadow.camera.top = properties.lightCameraSize;\n\t\theroState.directLight.shadow.camera.bottom = -properties.lightCameraSize;\n\t\theroState.directLight.shadow.bias = properties.lightCameraBias;\n\t\theroState.directLight.shadow.mapSize.width = 768;\n\t\theroState.directLight.shadow.mapSize.height = 768;\n\t\tproperties.scene?.add(heroState.directLight);\n\t\tproperties.scene?.add(heroState.directLight.target);\n\n\t\theroState.isShadowCameraHelperVisible = true;\n\t\theroState.shadowCameraHelper = new THREE.CameraHelper(heroState.directLight.shadow.camera);\n\t\tlightCameraUpdateSignal.add(() => {\n\t\t\theroState.directLight?.shadow.camera.updateProjectionMatrix();\n\t\t\theroState.shadowCameraHelper?.update();\n\t\t});\n\t\tlightCameraHelperSignal.add(() => {\n\t\t\theroState.isShadowCameraHelperVisible = !heroState.isShadowCameraHelperVisible;\n\t\t\tif (heroState.isShadowCameraHelperVisible && heroState.shadowCameraHelper) {\n\t\t\t\tproperties.scene?.add(heroState.shadowCameraHelper);\n\t\t\t} else if (heroState.shadowCameraHelper) {\n\t\t\t\tproperties.scene?.remove(heroState.shadowCameraHelper);\n\t\t\t}\n\t\t});\n\n\t\t_assignFinalAnimationToTiles();\n\n\t\tconst infoData = new Float32Array(TOTAL_TILES_WITH_PADDING * 4);\n\t\tfor (let y = 0, i4 = 0; y < SIZE_WITH_PADDING; y++) {\n\t\t\tfor (let x = 0; x < SIZE_WITH_PADDING; x++, i4 += 4) {\n\t\t\t\tinfoData[i4] = 0;\n\t\t\t\tinfoData[i4 + 1] = 0;\n\t\t\t\tinfoData[i4 + 2] = 1;\n\t\t\t\tinfoData[i4 + 3] = 1;\n\t\t\t}\n\t\t}\n\n\t\theroState.infoTexture = new THREE.DataTexture(infoData, SIZE_WITH_PADDING, SIZE_WITH_PADDING, THREE.RGBAFormat, THREE.FloatType);\n\t\theroState.infoTextureLinear = new THREE.DataTexture(\n\t\t\tinfoData,\n\t\t\tSIZE_WITH_PADDING,\n\t\t\tSIZE_WITH_PADDING,\n\t\t\tTHREE.RGBAFormat,\n\t\t\tTHREE.FloatType,\n\t\t\tTHREE.UVMapping,\n\t\t\tTHREE.ClampToEdgeWrapping,\n\t\t\tTHREE.ClampToEdgeWrapping,\n\t\t\tTHREE.LinearFilter,\n\t\t\tTHREE.LinearFilter,\n\t\t\t0,\n\t\t);\n\t\theroState.infoTextureLinear.needsUpdate = true;\n\t\tif (heroSharedUniforms) {\n\t\t\theroSharedUniforms.u_infoTexture.value = heroState.infoTexture;\n\t\t\theroSharedUniforms.u_infoTextureLinear.value = heroState.infoTextureLinear;\n\t\t}\n\t}\n\n\tfunction _assignFinalAnimationToTiles() {\n\t\ttiles.forEach((rowMap, i) => {\n\t\t\trowMap.forEach((tile, j) => {\n\t\t\t\tconst tileIndex = i * SIZE + j;\n\t\t\t\ttile.loseAnimationPositionArray = new Float32Array(heroState.animationTotalFrames * 3);\n\t\t\t\ttile.loseAnimationOrientArray = new Float32Array(heroState.animationTotalFrames * 4);\n\n\t\t\t\tfor (let k = 0; k < heroState.animationTotalFrames; k++) {\n\t\t\t\t\tconst posIndex = (k * TOTAL_TILES + tileIndex) * 3;\n\t\t\t\t\tconst orientIndex = (k * TOTAL_TILES + tileIndex) * 4;\n\n\t\t\t\t\ttile.loseAnimationPositionArray.set(heroState.heroLoseAnimationPositionArray?.subarray(posIndex, posIndex + 3) || [], k * 3);\n\t\t\t\t\ttile.loseAnimationOrientArray.set(heroState.heroLoseAnimationOrientArray?.subarray(orientIndex, orientIndex + 4) || [], k * 4);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tfunction reset() {\n\t\theroState.successColorRatio = 0;\n\t\theroState._blockList.forEach((block) => block.reset());\n\t}\n\n\tfunction resetBlockFromLogicBlock(logicBlock) {\n\t\tconst block = heroState._blockList[logicBlock.id];\n\t\tblock.reset();\n\t}\n\n\tfunction _updateColors(dt: number) {\n\t\tMAIN_COLOR.set(properties.mainColor);\n\t\tSUCCESS_COLOR.set(properties.successColor);\n\t\tERROR_COLOR.set(properties.failColor);\n\t\tDEFAULT_COLOR.set(properties.neutralColor);\n\n\t\t_c.copy(MAIN_COLOR);\n\n\t\tif (result === AnimationResult.FAILED && failFloatingCubesRatio > 0) {\n\t\t\t_c.copy(ERROR_COLOR);\n\t\t}\n\n\t\tif (result === AnimationResult.COMPLETED || result === AnimationResult.REPLAY) {\n\t\t\theroState.successColorRatio = Math.min(1, heroState.successColorRatio + 0.5 * dt);\n\t\t\t_c.lerp(SUCCESS_COLOR, heroState.successColorRatio);\n\t\t}\n\n\t\tif (result !== AnimationResult.REPLAY && result !== AnimationResult.COMPLETED) {\n\t\t\t_c.lerp(DEFAULT_COLOR, math.saturate(stopPushDownRatio + failPushDownRatio));\n\t\t}\n\n\t\t_c.convertSRGBToLinear();\n\t\tDEFAULT_COLOR.convertSRGBToLinear();\n\t\tSUCCESS_COLOR.convertSRGBToLinear();\n\n\t\tfor (let i = 0; i < TOTAL_BLOCKS; i++) {\n\t\t\tconst logicBlock = blocks.filter((block) => block.id === i)[0];\n\n\t\t\tconst isActive = i < blocks.length + (lastSpawnedBlock ? 1 : 0);\n\t\t\tconst color = isActive ? _c : DEFAULT_COLOR;\n\n\t\t\tif (isActive && logicBlock?.isErrorBlock) {\n\t\t\t\tlet preFallColorRatio = math.saturate(0.5 * (1 - Math.cos(logicBlock.errorPreFallAnimationTime)));\n\n\t\t\t\tif (logicBlock.errorFallAnimationTime > 0) {\n\t\t\t\t\tpreFallColorRatio = math.saturate(0.5 * (1 - Math.cos(14 * logicBlock.errorFallAnimationTime)));\n\t\t\t\t}\n\n\t\t\t\t_c2.lerpColors(color, ERROR_COLOR, preFallColorRatio);\n\t\t\t\theroState._instanceColorArray?.set([_c2.r, _c2.g, _c2.b], i * 3);\n\t\t\t} else {\n\t\t\t\theroState._instanceColorArray?.set([color.r, color.g, color.b], i * 3);\n\t\t\t}\n\t\t\tif (heroState._instanceIsActiveArray) {\n\t\t\t\theroState._instanceIsActiveArray[i] = isActive ? 1 : 0;\n\t\t\t}\n\t\t}\n\n\t\tif (heroState._baseMesh) {\n\t\t\theroState._baseMesh.material.uniforms.u_color.value.set(DEFAULT_COLOR).convertSRGBToLinear();\n\t\t\theroState._baseMesh.material.uniforms.u_blocksColor.value.copy(_c);\n\t\t\theroState._baseMesh.material.uniforms.u_successColor.value.copy(SUCCESS_COLOR);\n\n\t\t\theroState._baseMesh.material.uniforms.u_prevSuccessColor.value.set(DEFAULT_COLOR);\n\n\t\t\theroState._baseMesh.material.uniforms.u_prevSuccessColor.value.lerp(_c.set(properties.successColor), previousSuccessBlocksAnimationRatio);\n\t\t\theroState._baseMesh.material.uniforms.u_prevSuccessColor.value.convertSRGBToLinear();\n\t\t}\n\t}\n\n\tfunction _updateInfoTexture() {\n\t\ttiles.forEach((rowMap) => {\n\t\t\trowMap.forEach((tile) => {\n\t\t\t\tconst x = (tile.id % SIZE) + 1;\n\t\t\t\tconst y = Math.floor(tile.id / SIZE) + 1;\n\t\t\t\tconst index = (y * SIZE_WITH_PADDING + x) * 4;\n\n\t\t\t\tlet endAnimationRatio = 0.5 * floatingCubesRatio * math.fit(successPushDownRatio, 0, 0.1, 1, 0);\n\t\t\t\tendAnimationRatio += (failFloatingCubesRatio > 0 ? 1 : 0) * math.fit(failPushDownRatio, 0, 0.1, 1, 0);\n\t\t\t\tendAnimationRatio += stopSpawnRatio * math.fit(stopPushDownRatio, 0, 0.1, 1, 0);\n\t\t\t\tendAnimationRatio = Math.min(1, endAnimationRatio);\n\t\t\t\tif (heroState.infoTexture) {\n\t\t\t\t\theroState.infoTexture.image.data[index] = tile.activeRatio * (1 - endAnimationRatio);\n\t\t\t\t\theroState.infoTexture.image.data[index + 1] = tile.isOccupied || tile.willBeOccupied ? 1 : 0;\n\t\t\t\t\theroState.infoTexture.image.data[index + 2] = tile.isMain ? 1 : 0;\n\t\t\t\t\theroState.infoTexture.image.data[index + 3] = tile.isBorder ? 1 : 0;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tif (heroState.infoTexture && heroState.infoTextureLinear) {\n\t\t\theroState.infoTexture.needsUpdate = true;\n\t\t\theroState.infoTextureLinear.needsUpdate = true;\n\t\t}\n\t}\n\n\tfunction _updateFreeBlocks() {\n\t\tif (lastSpawnedBlock) {\n\t\t\tconst block = heroState._blockList[lastSpawnedBlock.id];\n\t\t\tif (lastSpawnedBlock.currentTile) {\n\t\t\t\tblock.boardPos.set(lastSpawnedBlock.currentTile?.row, lastSpawnedBlock.currentTile?.col);\n\t\t\t}\n\t\t\tblock.showRatio = customEasing(math.saturate(lastSpawnedBlock.spawnAnimationRatioUnclamped));\n\t\t}\n\n\t\tblocks.forEach((logicBlock) => {\n\t\t\tconst block = heroState._blockList[logicBlock.id];\n\n\t\t\tif (block) {\n\t\t\t\tblock.showRatio = customEasing(math.saturate(logicBlock.spawnAnimationRatioUnclamped));\n\t\t\t\tif (logicBlock.currentTile) {\n\t\t\t\t\tblock.boardPos.set(logicBlock.currentTile?.row, logicBlock.currentTile?.col);\n\t\t\t\t}\n\n\t\t\t\tif (logicBlock.targetTile) {\n\t\t\t\t\tblock.boardDir.set(logicBlock.targetTile.row - (logicBlock.currentTile?.row || 0), logicBlock.targetTile.col - (logicBlock.currentTile?.col || 0));\n\t\t\t\t}\n\t\t\t\tblock.animation = logicBlock.hasAnimationEnded ? 0 : logicBlock.easedAnimationRatio;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction _updateAttributes(renderCount) {\n\t\tfor (let i = 0; i < renderCount; i++) {\n\t\t\tconst block = heroState._blockRenderList[i];\n\t\t\tblock.pos.toArray(heroState._instancePosArray || [], i * 3);\n\t\t\tblock.orient.toArray(heroState._instanceOrientArray || [], i * 4);\n\t\t\tif (heroState._instanceShowRatioArray) {\n\t\t\t\theroState._instanceShowRatioArray[i] = ease.quartInOut(block.showRatio);\n\t\t\t}\n\t\t\tblock.spinPivot.toArray(heroState._instanceSpinPivotArray || [], i * 3);\n\t\t\tblock.spinOrient.toArray(heroState._instanceSpinOrientArray || [], i * 4);\n\t\t\theroState._instanceNextDirectionArray?.set([block.boardDir.x, block.boardDir.y], i * 2);\n\t\t}\n\n\t\tconst geometry = heroState._blocksMesh?.geometry;\n\t\tif (geometry) {\n\t\t\tfor (const id in geometry.attributes) {\n\t\t\t\tconst attribute = geometry.attributes[id] as InstancedBufferAttribute;\n\t\t\t\tif (attribute.isBufferAttribute) {\n\t\t\t\t\tattribute.addUpdateRange(0, renderCount * attribute.itemSize);\n\t\t\t\t\tattribute.needsUpdate = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tgeometry.instanceCount = renderCount;\n\t\t}\n\t}\n\n\tfunction _updateStopAnimation(block, i) {\n\t\tif (result === AnimationResult.STOP) {\n\t\t\tif (i >= TOTAL_TILES) {\n\t\t\t\tconst _i = i - TOTAL_TILES;\n\t\t\t\tconst col = (_i % SIZE) - HALF_SIZE;\n\t\t\t\tconst row = Math.floor(_i / SIZE) - HALF_SIZE;\n\t\t\t\tconst tile = board.getTile(row, col);\n\t\t\t\tif (!tile.isOccupied) {\n\t\t\t\t\tconst ratio = math.saturate(stopSpawnRatio - tile.randomDelay);\n\t\t\t\t\ttile.activeRatio = ratio;\n\t\t\t\t\tblock.showRatio = customEasing(ratio);\n\t\t\t\t\tblock.boardPos.set(row, col);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _updateLongBlockAnimation(logicBlock, block) {\n\t\tif (logicBlock && logicBlock.isErrorBlock && logicBlock.errorLifeCycle >= properties.errorBlockMaxLifeCycle - 1) {\n\t\t\tconst tile = logicBlock.currentTile;\n\t\t\tconst animationRatio = logicBlock.errorFallAnimationTime;\n\n\t\t\tblock.boardPos.set(tile.row, tile.col);\n\t\t\t_v2_0.set(tile.row, tile.col).normalize();\n\t\t\tif (Math.abs(_v2_0.x) > Math.abs(_v2_0.y)) {\n\t\t\t\t_v2_0.set(Math.sign(_v2_0.x), 0);\n\t\t\t} else {\n\t\t\t\t_v2_0.set(0, Math.sign(_v2_0.y));\n\t\t\t}\n\t\t\tblock.boardDir.set(_v2_0.x, _v2_0.y);\n\t\t\tblock.animation = math.fit(animationRatio, 0, 1, 0, 1, ease.sineOut);\n\t\t\tblock.animation += Math.max(0, animationRatio - 0.8);\n\t\t\tblock.update(properties.deltaTime);\n\t\t\tblock.addsFallAnimation(Math.max(0, animationRatio - 0.8));\n\t\t}\n\t}\n\tfunction _updateFailAnimation(logicBlock, block, i) {\n\t\tif (result === AnimationResult.FAILED) {\n\t\t\tif (logicBlock) {\n\t\t\t\tconst tile = logicBlock.currentTile;\n\n\t\t\t\tif (failFloatingCubesRatio > 0) {\n\t\t\t\t\tconst frameStart = Math.floor(failFloatingCubesRatio * heroState.animationTotalFrames);\n\t\t\t\t\tconst frameEnd = Math.min(frameStart + 1, heroState.animationTotalFrames - 1);\n\t\t\t\t\tconst frameRatio = failFloatingCubesRatio * heroState.animationTotalFrames - frameStart;\n\n\t\t\t\t\t_v3_0.fromArray(tile.loseAnimationPositionArray, frameStart * 3);\n\t\t\t\t\t_v3_1.fromArray(tile.loseAnimationPositionArray, frameEnd * 3);\n\t\t\t\t\t_v3_0.lerp(_v3_1, frameRatio);\n\t\t\t\t\t_v3_0.y *= 0.5;\n\t\t\t\t\tblock.pos.set(_v3_0.z, _v3_0.y, -_v3_0.x);\n\n\t\t\t\t\t_q_0.fromArray(tile.loseAnimationOrientArray, frameStart * 4);\n\t\t\t\t\t_q_1.fromArray(tile.loseAnimationOrientArray, frameEnd * 4);\n\t\t\t\t\t_q_0.slerp(_q_1, frameRatio);\n\t\t\t\t\tblock.orient.copy(_q_0);\n\t\t\t\t}\n\n\t\t\t\tif (failShakeRatio > 0) {\n\t\t\t\t\tconst push = math.fit(failShakeRatio, 0, 1, 0, 1, ease.sineOut);\n\t\t\t\t\t_v2_0.set(tile.row, tile.col);\n\t\t\t\t\t_v2_0.normalize();\n\t\t\t\t\t_v2_0.multiplyScalar(0.1 * push);\n\n\t\t\t\t\tblock.pos.x += _v2_0.x;\n\t\t\t\t\tblock.pos.z -= _v2_0.y;\n\n\t\t\t\t\tif (failShakeRatio < 1) {\n\t\t\t\t\t\tconst shake = push * math.fit(failShakeRatio, 0.5, 0.8, 1, 0);\n\t\t\t\t\t\t_v2_0.set(logicBlock.randomVector.x, logicBlock.randomVector.y);\n\t\t\t\t\t\t_v2_0.normalize();\n\t\t\t\t\t\t_v2_0.multiplyScalar(shake);\n\t\t\t\t\t\t_v2_1.set(0, 0);\n\t\t\t\t\t\t_v2_1.addScaledVector(_v2_0, 0.08 * shake * Math.sin(shake * 80));\n\n\t\t\t\t\t\tblock.pos.x += _v2_1.x;\n\t\t\t\t\t\tblock.pos.z += _v2_1.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i >= TOTAL_TILES) {\n\t\t\t\tconst _i = i - TOTAL_TILES;\n\t\t\t\tconst col = (_i % SIZE) - HALF_SIZE;\n\t\t\t\tconst row = Math.floor(_i / SIZE) - HALF_SIZE;\n\t\t\t\tconst tile = board.getTile(row, col);\n\t\t\t\tconst ratio = math.saturate(failSpawnRatio - tile.randomDelay);\n\n\t\t\t\tif (!tile.isOccupied) {\n\t\t\t\t\ttile.activeRatio = ratio;\n\t\t\t\t}\n\t\t\t\tblock.showRatio = customEasing(ratio);\n\t\t\t\tblock.boardPos.set(row, col);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _updateFloatAnimation(logicBlock, block) {\n\t\tif (result === AnimationResult.COMPLETED || result === AnimationResult.REPLAY) {\n\t\t\tif (logicBlock) {\n\t\t\t\tconst tile = logicBlock.currentTile;\n\t\t\t\tconst delay = 0.1 * tile.randomDelay;\n\t\t\t\tconst ratio = floatingCubesRatio - delay;\n\n\t\t\t\tlet y = math.fit(ratio, 0, 0.5, 0, 1, (x) => 1 - Math.pow(1 - x, 5));\n\t\t\t\ty = math.fit(ratio, 0.7, 1, y, 0, (x) => Math.pow(x, 5));\n\n\t\t\t\tblock.pos.y += floatingCubesDisplacement * y;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction update(dt: number) {\n\t\t_updateFreeBlocks();\n\t\t_updateColors(dt);\n\t\t// update blocks;\n\t\tlet renderCount = 0;\n\t\tfor (let i = 0; i < TOTAL_BLOCKS; i++) {\n\t\t\tconst block = heroState._blockList[i];\n\t\t\tblock.update(dt);\n\n\t\t\tconst logicBlock = blocks.filter((block) => block.id === i)[0];\n\n\t\t\tif (block.showRatio > 0) {\n\t\t\t\theroState._blockRenderList[renderCount++] = block;\n\t\t\t}\n\n\t\t\t_updateFailAnimation(logicBlock, block, i);\n\t\t\t_updateLongBlockAnimation(logicBlock, block);\n\t\t\t_updateStopAnimation(block, i);\n\t\t\t_updateFloatAnimation(logicBlock, block);\n\t\t}\n\n\t\t_updateInfoTexture();\n\t\t_updateAttributes(renderCount);\n\n\t\tconst pushDownRatio = Math.min(1, stopPushDownRatio + failPushDownRatio + successPushDownRatio);\n\t\tconst easedRestartAnimationRatio = ease.backOut(pushDownRatio, 3);\n\t\tconst easedFirstStartAnimationRatio = 1 - customEasing(firstStartAnimationRatio);\n\t\theroContainer.position.y = -easedRestartAnimationRatio - 2 * easedFirstStartAnimationRatio;\n\t\theroContainer.rotation.y = 0.5 * Math.PI * easedFirstStartAnimationRatio;\n\t\theroContainer.rotation.y += 2 * Math.PI * ease.quartInOut(towerRotationRatio);\n\t\tif (heroState._baseMesh) {\n\t\t\theroState._baseMesh.material.uniforms.u_yDisplacement.value = -easedRestartAnimationRatio - 5 * easedFirstStartAnimationRatio;\n\t\t\theroState._baseMesh.material.uniforms.u_successAnimationRatio.value = successColorTowerRatio;\n\t\t}\n\t\tif (heroSharedUniforms) {\n\t\t\theroSharedUniforms.u_endAnimationRatio.value = Math.min(\n\t\t\t\t1,\n\t\t\t\tmath.fit(stopSpawnRatio, 0.5, 2, 0, 1) + math.fit(failSpawnRatio, 0.5, 2, 0, 1) + math.fit(successRatio, 0, 0.2, 0, 1),\n\t\t\t);\n\t\t\theroSharedUniforms.u_goboIntensity.value = properties.goboIntensity;\n\t\t\theroSharedUniforms.u_lightPosition.value.set(properties.lightPositionX, properties.lightPositionY, properties.lightPositionZ);\n\t\t}\n\n\t\tif (heroState.directLight) {\n\t\t\theroState.directLight.position.copy(heroSharedUniforms?.u_lightPosition.value);\n\t\t\theroState.directLight.shadow.camera.top = properties.lightCameraSize;\n\t\t\theroState.directLight.shadow.camera.bottom = -properties.lightCameraSize;\n\t\t\theroState.directLight.shadow.bias = properties.lightCameraBias;\n\t\t}\n\t}\n\n\treturn {\n\t\tpreload,\n\t\tinit,\n\t\treset,\n\t\tresetBlockFromLogicBlock,\n\t\tupdate,\n\t};\n};\n\nconst heroBlocks = Hero();\nexport { heroBlocks, heroContainer, heroSharedUniforms };\n","export default \"uniform float u_time;\\nuniform float u_ratio;\\nuniform float u_isFloating;\\n\\nattribute vec3 a_instancePosition;\\nattribute vec4 a_instanceQuaternion;\\nattribute float a_instanceCurveUV;\\nattribute vec3 a_instanceAoN;\\nattribute vec3 a_instanceAoP;\\nattribute vec3 a_instanceRand;\\nattribute vec3 SN;\\n\\n#ifdef IS_DEPTH\\n\\n    varying vec2 vHighPrecisionZW;\\n\\n#else\\n\\n    varying vec3 v_modelPosition;\\n    varying vec3 v_viewPosition;\\n    varying vec3 v_worldPosition;\\n    varying vec3 v_viewNormal;\\n    varying vec3 v_worldNormal;\\n    varying vec3 v_modelNormal;\\n    varying float v_ao;\\nuniform mat4 directionalShadowMatrix[1];\\nvarying vec4 vDirectionalShadowCoord[1];\\n\\nstruct DirectionalLightShadow {\\n    float shadowBias;\\n    float shadowNormalBias;\\n    float shadowRadius;\\n    vec2 shadowMapSize;\\n};\\n\\nuniform DirectionalLightShadow directionalLightShadows[1];\\n#endif\\n\\n#define PI 3.1415926538\\n\\n#ifndef saturate\\n\\t#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n\\nvec3 qrotate(vec4 q, vec3 v) {\\n\\treturn v + 2. * cross(q.xyz, cross(q.xyz, v) + q.w * v);\\n}\\n\\nvec4 quat_from_axis_angle(vec3 axis, float angle) {\\n  vec4 qr;\\n  float half_angle = (angle * 0.5) * 3.14159 / 180.0;\\n  qr.x = axis.x * sin(half_angle);\\n  qr.y = axis.y * sin(half_angle);\\n  qr.z = axis.z * sin(half_angle);\\n  qr.w = cos(half_angle);\\n  return qr;\\n}\\n\\nfloat linearstep(float edge0, float edge1, float x) {\\n    return  clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\\n}\\n\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\n\\nfloat cubicInOut(float t) {\\n  return t < 0.5\\n    ? 4.0 * t * t * t\\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\\n}\\n\\nvoid main () {\\n    vec3 pos = position;\\n    pos.y *= 1.5;\\n    vec3 nor = normal;\\n\\n    float ratio = saturate(a_instanceCurveUV + (2.0 * u_ratio - 1.0));\\n    float scale = linearstep(0.0, 0.1, ratio) * linearstep(0.4, 0.3, ratio);\\n\\n    if (u_isFloating < 0.5) {\\n        pos.xz *= scale;\\n        pos.y *= linearstep(0., 0.5, scale);\\n    }\\n\\n    vec4 localQuaternion = quat_from_axis_angle(vec3(0.0, 0.0, 1.0), 200.0 * (0.8 + 0.2 * a_instanceRand.x) * u_time);\\n    pos = qrotate(localQuaternion, pos);\\n    nor = qrotate(localQuaternion, nor);\\n    pos = qrotate(a_instanceQuaternion, pos);\\n    nor = qrotate(a_instanceQuaternion, nor);\\n\\n    #ifndef IS_DEPTH\\n        vec3 sn = qrotate(a_instanceQuaternion, qrotate(localQuaternion, SN));\\n        vec3 aoN = normalize(nor + sn * .5);\\n        vec3 aoVec = mix(a_instanceAoN, a_instanceAoP, sign(aoN) * 0.5 + 0.5);\\n        vec3 absN = abs(aoN);\\n        v_ao = pow(dot(absN, aoVec) / (absN.x + absN.y + absN.z), 1.0);\\n\\n    #endif\\n\\n    vec3 instancePos = a_instancePosition;\\n    if (u_isFloating > 0.5) {\\n        instancePos.xz *= 1.5;\\n        instancePos.y = mix(\\n            -10.0,\\n            -6.0 + 10.0 * abs(a_instanceRand.y),\\n            cubicInOut(linearstep(0.0, 0.4 - 0.2 * abs(a_instanceRand.z), u_ratio) * linearstep(1.0, 0.6 + 0.2 * abs(a_instanceRand.x), u_ratio))\\n        );\\n    }\\n    pos += instancePos;\\n\\n    vec3 viewNormal = normalMatrix * nor;\\n    vec4 worldPosition = (modelMatrix * vec4(pos, 1.0));\\n    vec4 viewPos = modelViewMatrix * vec4(pos, 1.0);\\n\\n    gl_Position = projectionMatrix * viewPos;\\n\\n\\n    #ifndef IS_DEPTH\\n\\n        v_modelPosition = position;\\n        v_viewPosition = -viewPos.xyz;\\n        v_worldPosition = worldPosition.xyz;\\n        v_viewNormal = normalMatrix * nor;\\n        v_worldNormal = inverseTransformDirection(viewNormal, viewMatrix);\\n        v_modelNormal = normal;\\n        vDirectionalShadowCoord[0] = directionalShadowMatrix[0] * worldPosition + vec4(v_worldNormal * directionalLightShadows[0].shadowNormalBias, 0. );\\n    #else\\n\\n        vHighPrecisionZW = gl_Position.zw;\\n\\n    #endif\\n}\\n\"","export default \"uniform vec3 u_bgColor1;\\nuniform vec3 u_bgColor2;\\nuniform vec2 u_resolution;\\nuniform sampler2D u_matcapTexture;\\nuniform sampler2D u_goboTexture;\\nvarying vec4 vDirectionalShadowCoord[1];\\nvarying vec3 v_viewPosition;\\nvarying vec3 v_worldPosition;\\nvarying vec3 v_viewNormal;\\nvarying vec3 v_modelNormal;\\nvarying vec3 v_worldNormal;\\nvarying float v_ao;\\n\\n#define PI 3.14159265359\\n\\n#ifndef saturate\\n\\t#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n\\nvec3 SRGBtoLinear(vec3 srgb) {\\n    return pow(srgb, vec3(2.2));\\n}\\n\\nvec3 linearToSRGB(vec3 color) {\\n    return pow(color, vec3(1.0 / 2.2));\\n}\\n\\nfloat linearstep(float edge0, float edge1, float x) {\\n    return  clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\\n}\\n\\nvec3 LinearToneMapping( vec3 color, float toneMappingExposure ) {\\n\\treturn saturate( toneMappingExposure * color );\\n}\\n\\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\n// this implementation of ACES is modified to accommodate a brighter viewing environment.\\n// the scale factor of 1/0.6 is subjective. see discussion in #19621.\\nvec3 ACESFilmicToneMapping( vec3 color, float toneMappingExposure ) {\\n\\n\\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ), // transposed from source\\n\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\n\\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ), // transposed from source\\n\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\n\\tcolor = ACESInputMat * color;\\n\\n\\t// Apply RRT and ODT\\n\\tcolor = RRTAndODTFit( color );\\n\\n\\tcolor = ACESOutputMat * color;\\n\\n\\t// Clamp to [0, 1]\\n\\treturn saturate( color );\\n}\\n\\nvoid main () {\\n\\tvec3 viewNormal = normalize(v_viewNormal);\\n    vec3 viewDir = normalize( v_viewPosition );\\n\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 matcapUv = vec2( dot( x, viewNormal ), dot( y, viewNormal ) ) * 0.495 + 0.5; // 0.495 to remove artifacts caused by undersized matcap disks\\n    vec3 matcapColor = texture2D(u_matcapTexture, vec2(matcapUv.x, matcapUv.y)).rgb;\\n\\n\\tvec3 color = SRGBtoLinear(matcapColor);\\n    color *= 1.0 + 2.0 * clamp(v_worldNormal.y, 0.0, 1.0);\\n\\tcolor *= v_ao;\\n    color *= 1.0 - 0.5 * dot(vec3(1.0), fwidth(v_modelNormal));\\n\\n    float gobo = 1.0 - texture2D(u_goboTexture, (vDirectionalShadowCoord[0].yx / vDirectionalShadowCoord[0].w + 0.5) * 0.8 - 0.5).r;\\n\\tcolor *= 0.3 + 0.7 * linearstep(0.1, 1.0, gobo);\\n\\n    gl_FragColor = vec4(linearToSRGB(ACESFilmicToneMapping(color, 0.9)), 1.);\\n\\n    vec2 screenUv = gl_FragCoord.xy / u_resolution;\\n    float alpha = linearstep(-6.0, -2.0, v_worldPosition.y);\\n    gl_FragColor.rgb = mix(linearToSRGB(mix(u_bgColor1, u_bgColor2, screenUv.y)), gl_FragColor.rgb, alpha);\\n\\n}\\n\"","export default \"#include <common>\\n#include <packing>\\n\\nvarying vec2 vHighPrecisionZW;\\n\\nvoid main() {\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n    gl_FragColor = packDepthToRGBA( fragCoordZ );\\n}\\n\"","import * as THREE from 'three';\n\nimport loader from '../../core/loader';\nimport { properties } from '../../core/properties';\nimport blueNoise from '../../utils/blueNoise/blueNoise';\nimport { heroSharedUniforms } from '../hero/hero';\n\nimport vert from './coins.vert?raw';\nimport frag from './coins.frag?raw';\nimport fragDepth from './coinsDepth.frag?raw';\nimport { floatingCoinsRatio, vortexCoinsRatio } from '../../logic/successAnimationManager';\nimport { BufferGeometry, InstancedBufferGeometry, Mesh, ShaderMaterial } from 'three';\nimport { ASSETS_PATH } from '../../core/settings';\n\nconst coinContainer = new THREE.Object3D();\nlet coinMesh: Mesh | null = null;\nlet coinGeometry: InstancedBufferGeometry | null = null;\nlet coinMaterial: ShaderMaterial | null = null;\nlet positionsArray = null;\nlet orientArray = null;\nlet curveuArray = null;\nlet aoNArray = null;\nlet aoPArray = null;\nlet coinsCount = 0;\nlet animationRatio = 0;\nconst isFloating = true;\nlet matcapTexture;\nlet refGeometry: BufferGeometry;\nlet randsArray;\nconst coinsSharedUniforms = {\n\tu_time: { value: 0 },\n\tu_ratio: { value: 0 },\n\tu_isFloating: { value: 1 },\n};\n\nconst Coins = () => {\n\tasync function preload() {\n\t\tconst modelPath = ASSETS_PATH + 'models';\n\t\tconst texturePath = ASSETS_PATH + 'textures';\n\t\tloader.loadTexture(`${texturePath}/matcap_gold.jpg`, (texture) => {\n\t\t\tmatcapTexture = texture;\n\t\t\tmatcapTexture.needsUpdate = true;\n\t\t});\n\t\tloader.loadBuf(`${modelPath}/COIN.buf`, (geometry) => {\n\t\t\trefGeometry = geometry;\n\t\t});\n\t\tloader.loadBuf(`${modelPath}/COIN_PLACEMENT.buf`, (geometry) => {\n\t\t\tconst { position, aoN, aoP, curveu, orient } = geometry.attributes;\n\t\t\tpositionsArray = position.array;\n\t\t\taoNArray = aoN.array;\n\t\t\taoPArray = aoP.array;\n\t\t\tcurveuArray = curveu.array;\n\t\t\torientArray = orient.array;\n\n\t\t\tcoinsCount = position.count;\n\t\t});\n\t}\n\n\tfunction init() {\n\t\t_setupGeometry();\n\t\t_setupMaterial();\n\t\t_setupMesh();\n\t\tif (coinMesh) {\n\t\t\tcoinContainer.add(coinMesh);\n\t\t}\n\t}\n\n\tfunction _setupGeometry() {\n\t\trefGeometry.computeVertexNormals();\n\t\tconst geometry = new THREE.InstancedBufferGeometry();\n\t\tgeometry.index = refGeometry.index;\n\t\tObject.entries(refGeometry.attributes).forEach(([id, attr]) => geometry.setAttribute(id, attr));\n\n\t\trandsArray = new Float32Array(coinsCount * 3).map(() => Math.random() * 2 - 1);\n\n\t\tconst instanceAttributes = [\n\t\t\t['a_instancePosition', positionsArray, 3],\n\t\t\t['a_instanceQuaternion', orientArray, 4],\n\t\t\t['a_instanceCurveUV', curveuArray, 1],\n\t\t\t['a_instanceAoN', aoNArray, 3],\n\t\t\t['a_instanceAoP', aoPArray, 3],\n\t\t\t['a_instanceRand', randsArray, 3],\n\t\t];\n\n\t\tinstanceAttributes.forEach(([name, array, itemSize]) => {\n\t\t\tgeometry.setAttribute(name, new THREE.InstancedBufferAttribute(array, itemSize));\n\t\t});\n\n\t\tcoinGeometry = geometry;\n\t}\n\n\tfunction _setupMaterial() {\n\t\tcoinMaterial = new THREE.ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\t...heroSharedUniforms,\n\t\t\t\t...properties.sharedUniforms,\n\t\t\t\t...coinsSharedUniforms,\n\t\t\t\t...blueNoise.bn_sharedUniforms,\n\t\t\t\t...THREE.UniformsUtils.merge([THREE.UniformsLib.lights]),\n\t\t\t\tu_matcapTexture: { value: matcapTexture },\n\t\t\t},\n\t\t\tvertexShader: vert,\n\t\t\tfragmentShader: frag,\n\t\t\tlights: true,\n\t\t});\n\t}\n\n\tfunction _setupMesh() {\n\t\tif (coinGeometry && coinMaterial) {\n\t\t\tcoinMesh = new THREE.Mesh(coinGeometry, coinMaterial);\n\t\t\tcoinMesh.frustumCulled = false;\n\t\t\tcoinMesh.castShadow = true;\n\t\t\tcoinMesh.receiveShadow = true;\n\n\t\t\tcoinMesh.customDepthMaterial = new THREE.ShaderMaterial({\n\t\t\t\tuniforms: { ...coinsSharedUniforms },\n\t\t\t\tvertexShader: vert,\n\t\t\t\tfragmentShader: fragDepth,\n\t\t\t\tdefines: { IS_DEPTH: true },\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction update(dt: number) {\n\t\tconst isFloatingAnimationActive = vortexCoinsRatio === 0;\n\n\t\tanimationRatio = isFloatingAnimationActive ? floatingCoinsRatio : vortexCoinsRatio;\n\n\t\tcoinsSharedUniforms.u_ratio.value = animationRatio;\n\t\tcoinsSharedUniforms.u_time.value += dt;\n\n\t\tcoinsSharedUniforms.u_isFloating.value = isFloatingAnimationActive ? 1 : 0;\n\t\tif (coinMesh) {\n\t\t\tcoinMesh.rotation.y = (isFloating ? 0 : 4) * animationRatio;\n\t\t\tcoinMesh.visible = animationRatio > 0 && animationRatio < 1;\n\t\t}\n\t}\n\n\treturn {\n\t\tpreload,\n\t\tinit,\n\t\tupdate,\n\t};\n};\n\nconst coins = Coins();\n\nexport { coins, coinContainer };\n","export default \"varying vec2 v_uv;\\n\\nvoid main() {\\n    gl_Position = vec4(position.xy, 1.0, 1.0);\\n    v_uv = uv;\\n}\\n\"","export default \"uniform vec3 u_bgColor1;\\nuniform vec3 u_bgColor2;\\n\\nvarying vec2 v_uv;\\n\\nvec3 linearToSRGB(vec3 color) {\\n    return pow(color, vec3(1.0 / 2.2));\\n}\\n\\n#include <getBlueNoise>\\n\\nvoid main() {\\n    vec3 color = mix(u_bgColor1, u_bgColor2, v_uv.y);\\n    gl_FragColor = vec4(linearToSRGB(color) + getBlueNoise(gl_FragCoord.xy) * .004, 1.0);\\n}\\n\"","export default \"attribute vec3 a_instancePosition;\\nattribute vec3 a_instanceRandom;\\n\\nvarying vec2 v_uv;\\nvarying float v_opacity;\\n\\nuniform vec2 u_resolution;\\nuniform float u_size;\\nuniform float u_time;\\n\\nvec4 mod289(vec4 x) {\\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nfloat mod289(float x) {\\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n    return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nfloat permute(float x) {\\n    return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r) {\\n    return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat taylorInvSqrt(float r) {\\n    return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nvec4 grad4(float j, vec4 ip) {\\n    const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\\n    vec4 p,s;\\n\\n    p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\\n    p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\\n    s = vec4(lessThan(p, vec4(0.0)));\\n    p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\\n\\n    return p;\\n}\\n\\n#define F4 0.309016994374947451\\n#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n\\n\\nvec4 simplexNoiseDerivatives (vec4 v) {\\n    const vec4  C = vec4( 0.138196601125011,0.276393202250021,0.414589803375032,-0.447213595499958);\\n\\n    vec4 i  = floor(v + dot(v, vec4(F4)) );\\n    vec4 x0 = v -   i + dot(i, C.xxxx);\\n\\n    vec4 i0;\\n    vec3 isX = step( x0.yzw, x0.xxx );\\n    vec3 isYZ = step( x0.zww, x0.yyz );\\n    i0.x = isX.x + isX.y + isX.z;\\n    i0.yzw = 1.0 - isX;\\n    i0.y += isYZ.x + isYZ.y;\\n    i0.zw += 1.0 - isYZ.xy;\\n    i0.z += isYZ.z;\\n    i0.w += 1.0 - isYZ.z;\\n\\n    vec4 i3 = clamp( i0, 0.0, 1.0 );\\n    vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\\n    vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\\n\\n    vec4 x1 = x0 - i1 + C.xxxx;\\n    vec4 x2 = x0 - i2 + C.yyyy;\\n    vec4 x3 = x0 - i3 + C.zzzz;\\n    vec4 x4 = x0 + C.wwww;\\n\\n    i = mod289(i);\\n    float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\\n    vec4 j1 = permute( permute( permute( permute (\\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\\n\\n\\n    vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\\n\\n    vec4 p0 = grad4(j0,   ip);\\n    vec4 p1 = grad4(j1.x, ip);\\n    vec4 p2 = grad4(j1.y, ip);\\n    vec4 p3 = grad4(j1.z, ip);\\n    vec4 p4 = grad4(j1.w, ip);\\n\\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n    p0 *= norm.x;\\n    p1 *= norm.y;\\n    p2 *= norm.z;\\n    p3 *= norm.w;\\n    p4 *= taylorInvSqrt(dot(p4,p4));\\n\\n    vec3 values0 = vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2)); //value of contributions from each corner at point\\n    vec2 values1 = vec2(dot(p3, x3), dot(p4, x4));\\n\\n    vec3 m0 = max(0.5 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0); //(0.5 - x^2) where x is the distance\\n    vec2 m1 = max(0.5 - vec2(dot(x3,x3), dot(x4,x4)), 0.0);\\n\\n    vec3 temp0 = -6.0 * m0 * m0 * values0;\\n    vec2 temp1 = -6.0 * m1 * m1 * values1;\\n\\n    vec3 mmm0 = m0 * m0 * m0;\\n    vec2 mmm1 = m1 * m1 * m1;\\n\\n    float dx = temp0[0] * x0.x + temp0[1] * x1.x + temp0[2] * x2.x + temp1[0] * x3.x + temp1[1] * x4.x + mmm0[0] * p0.x + mmm0[1] * p1.x + mmm0[2] * p2.x + mmm1[0] * p3.x + mmm1[1] * p4.x;\\n    float dy = temp0[0] * x0.y + temp0[1] * x1.y + temp0[2] * x2.y + temp1[0] * x3.y + temp1[1] * x4.y + mmm0[0] * p0.y + mmm0[1] * p1.y + mmm0[2] * p2.y + mmm1[0] * p3.y + mmm1[1] * p4.y;\\n    float dz = temp0[0] * x0.z + temp0[1] * x1.z + temp0[2] * x2.z + temp1[0] * x3.z + temp1[1] * x4.z + mmm0[0] * p0.z + mmm0[1] * p1.z + mmm0[2] * p2.z + mmm1[0] * p3.z + mmm1[1] * p4.z;\\n    float dw = temp0[0] * x0.w + temp0[1] * x1.w + temp0[2] * x2.w + temp1[0] * x3.w + temp1[1] * x4.w + mmm0[0] * p0.w + mmm0[1] * p1.w + mmm0[2] * p2.w + mmm1[0] * p3.w + mmm1[1] * p4.w;\\n\\n    return vec4(dx, dy, dz, dw) * 49.0;\\n}\\n\\nvoid main() {\\n    vec2 aspect = vec2(1.0, u_resolution.y / u_resolution.x);\\n\\n    vec3 noise = simplexNoiseDerivatives(vec4(1.0 * (a_instancePosition + a_instanceRandom), 0.05 * u_time)).xyz;\\n    float ratio = fract(1.5 * (0.2 + 0.2 * a_instanceRandom.x) * u_time);\\n\\n    vec3 pos = position;\\n    pos *= u_size;\\n    pos += a_instancePosition;\\n    pos.x += 1.0 * ratio * (0.5 + 0.5 * a_instanceRandom.x);\\n    pos.y += noise.y;\\n    pos.x *= u_resolution.y / u_resolution.x;\\n\\n    gl_Position = vec4(pos, 1.0);\\n\\n    v_uv = uv;\\n    v_opacity = sin(PI * ratio);\\n\\n}\\n\"","export default \"varying vec2 v_uv;\\nvarying float v_opacity;\\nuniform vec3 u_color;\\nuniform float u_opacity;\\n\\nvoid main() {\\n    float dist = length(2.0 * (v_uv - 0.5));\\n    float alpha = 1.0 - dist;\\n\\n    gl_FragColor = vec4(u_color, u_opacity * alpha * v_opacity);\\n}\\n\"","import * as THREE from 'three';\nimport { properties } from '../../core/properties';\nimport blueNoise from '../../utils/blueNoise/blueNoise';\n\nimport vert from './bg.vert?raw';\nimport frag from './bg.frag?raw';\nimport particlesVert from './particles.vert?raw';\nimport particlesFrag from './particles.frag?raw';\nimport { Mesh, ShaderMaterial } from 'three';\n\nconst Background = () => {\n\tconst container = new THREE.Object3D();\n\tlet particles: Mesh & { material: ShaderMaterial };\n\n\tfunction init() {\n\t\tconst material = new THREE.ShaderMaterial({\n\t\t\tuniforms: Object.assign(\n\t\t\t\t{\n\t\t\t\t\tu_resolution: properties.sharedUniforms?.u_resolution,\n\t\t\t\t\tu_bgColor1: properties.sharedUniforms?.u_bgColor1,\n\t\t\t\t\tu_bgColor2: properties.sharedUniforms?.u_bgColor2,\n\t\t\t\t},\n\t\t\t\tblueNoise.bn_sharedUniforms,\n\t\t\t),\n\t\t\tvertexShader: vert,\n\t\t\tfragmentShader: frag,\n\t\t});\n\t\tconst mesh = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), material);\n\t\tmesh.renderOrder = 1;\n\t\tcontainer.add(mesh);\n\n\t\tinitParticles();\n\t}\n\n\tfunction initParticles() {\n\t\tconst particlesCount = 50;\n\t\tconst refGeometry = new THREE.PlaneGeometry(1, 1);\n\n\t\tconst geometry = new THREE.InstancedBufferGeometry();\n\t\tgeometry.index = refGeometry.index;\n\t\tObject.keys(refGeometry.attributes).forEach((id) => {\n\t\t\tgeometry.setAttribute(id, refGeometry.attributes[id]);\n\t\t});\n\t\tgeometry.instanceCount = particlesCount;\n\n\t\tconst positionArray = new Float32Array(particlesCount * 3);\n\t\tconst randomArray = new Float32Array(particlesCount * 3);\n\n\t\tfor (let i = 0; i < particlesCount; i++) {\n\t\t\tpositionArray[i * 3] = 3 * (Math.random() * 2 - 1);\n\t\t\tpositionArray[i * 3 + 1] = Math.random() * 2 - 1;\n\t\t\tpositionArray[i * 3 + 2] = 0.5 + 0.5 * Math.random();\n\n\t\t\trandomArray[i * 3] = Math.random();\n\t\t\trandomArray[i * 3 + 1] = Math.random();\n\t\t\trandomArray[i * 3 + 2] = Math.random();\n\t\t}\n\n\t\tgeometry.setAttribute('a_instancePosition', new THREE.InstancedBufferAttribute(positionArray, 3));\n\t\tgeometry.setAttribute('a_instanceRandom', new THREE.InstancedBufferAttribute(randomArray, 3));\n\n\t\tconst material = new THREE.ShaderMaterial({\n\t\t\tvertexShader: particlesVert,\n\t\t\tfragmentShader: particlesFrag,\n\t\t\tuniforms: {\n\t\t\t\tu_time: properties.sharedUniforms?.u_time || { value: properties.time },\n\t\t\t\tu_resolution: properties.sharedUniforms?.u_resolution || { value: properties.resolution },\n\t\t\t\tu_size: { value: 0.01 },\n\t\t\t\tu_color: { value: new THREE.Color() },\n\t\t\t\tu_opacity: { value: 0 },\n\t\t\t},\n\t\t\ttransparent: true,\n\t\t});\n\n\t\tparticles = new THREE.Mesh(geometry, material);\n\t\tparticles.renderOrder = 2;\n\t\tparticles.frustumCulled = false;\n\t\tcontainer.add(particles);\n\t}\n\n\tfunction update(_dt: number) {\n\t\tparticles.material.uniforms.u_size.value = properties.particlesSize;\n\t\tparticles.material.uniforms.u_color.value.set(properties.particlesColor);\n\t\tparticles.material.uniforms.u_opacity.value = properties.particlesOpacity;\n\t}\n\n\treturn { init, container, update };\n};\n\nexport default Background;\n","import * as THREE from 'three';\nimport { OrbitControls } from './controls/OrbitControls';\nimport { properties, resetProperties } from './core/properties';\nimport { heroBlocks, heroContainer } from './visuals/hero/hero';\nimport { coinContainer, coins } from './visuals/coins/coins';\nimport blueNoise from './utils/blueNoise/blueNoise';\nimport game from './logic/systemManager';\nimport settings from './core/settings';\nimport loader from './core/loader';\n\nimport Background from './visuals/bg/bg';\nimport { result, status } from './logic/stateManager';\nimport { setAnimationState } from '../main';\nimport { stopAnimationDuration } from './logic/stopAnimationManager';\nimport { AnimationResult } from '../types';\nimport { errorAnimationDuration } from './logic/errorAnimationManager';\nimport { successAnimationDuration } from './logic/successAnimationManager';\n\nTHREE.ColorManagement.enabled = false;\nconst background = Background();\n\nlet time = 0;\nlet lastRender = 0;\nconst targetFPS = 60;\nconst frameInterval = 1 / targetFPS;\n\nfunction render(dt: number) {\n\tif (properties.isPaused) {\n\t\tdt *= 0;\n\t}\n\n\tdt = Math.min(dt, 1 / 15);\n\n\tproperties.time += dt;\n\tproperties.deltaTime = dt;\n\tif (properties.sharedUniforms) {\n\t\tproperties.sharedUniforms.u_time.value = properties.time;\n\t\tproperties.sharedUniforms.u_deltaTime.value = dt;\n\t}\n\n\tconst viewportWidth = properties.viewportWidth;\n\tconst viewportHeight = properties.viewportHeight;\n\tconst cameraZoom = (properties.cameraZoom * viewportHeight) / 10;\n\tconst cameraOffsetX = properties.cameraOffsetX;\n\tconst cameraOffsetY = properties.cameraOffsetY;\n\tif (properties.camera) {\n\t\tproperties.camera.zoom = cameraZoom;\n\t\tproperties.camera.left = -viewportWidth / 2 - (cameraOffsetX * viewportWidth) / cameraZoom / 2;\n\t\tproperties.camera.right = viewportWidth / 2 - (cameraOffsetX * viewportWidth) / cameraZoom / 2;\n\t\tproperties.camera.top = viewportHeight / 2 - (cameraOffsetY * viewportHeight) / cameraZoom / 2;\n\t\tproperties.camera.bottom = -viewportHeight / 2 - (cameraOffsetY * viewportHeight) / cameraZoom / 2;\n\t\tproperties.camera.updateProjectionMatrix();\n\t}\n\n\tblueNoise.update(dt);\n\tgame.update(dt);\n\n\tconst camera = properties.camera;\n\tproperties.orbitControls?.update();\n\tproperties.orbitCamera?.updateMatrix();\n\tif (camera) {\n\t\tproperties.orbitCamera?.matrix.decompose(camera.position, camera.quaternion, camera.scale);\n\t\tcamera.matrix.compose(camera.position, camera.quaternion, camera.scale);\n\t}\n\n\theroBlocks.update(dt);\n\tcoins.update(dt);\n\tbackground.update(dt);\n\tif (properties.camera && properties.scene && properties.renderer) {\n\t\tproperties.renderer.render(properties?.scene, properties.camera);\n\t}\n}\nfunction animate() {\n\tconst newTime = performance.now() / 1000;\n\tconst dt = newTime - time;\n\tif (newTime - lastRender >= frameInterval) {\n\t\tlastRender = newTime;\n\t\trender(dt);\n\t\ttime = newTime;\n\t}\n\tproperties.renderer?.setAnimationLoop(animate);\n}\nfunction initAll() {\n\tif (properties.renderer) {\n\t\tproperties.renderer.shadowMap.enabled = true;\n\t\tproperties.renderer.shadowMap.type = THREE.PCFShadowMap;\n\t}\n\n\tproperties.scene = new THREE.Scene();\n\tproperties.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 1, 60);\n\tproperties.scene.add(properties.camera);\n\tproperties.camera.position.fromArray(settings.DEFAULT_POSITION);\n\n\tproperties.orbitCamera = properties.camera.clone();\n\n\tconst orbitControls = (properties.orbitControls = new OrbitControls(properties.orbitCamera, properties.orbitTarget));\n\torbitControls.target0.fromArray(settings.DEFAULT_LOOKAT_POSITION);\n\torbitControls.enableDamping = true;\n\torbitControls.enablePan = false;\n\torbitControls.minPolarAngle = Math.PI * 0.2; // radians\n\torbitControls.maxPolarAngle = Math.PI * 0.45; // radians\n\tif (properties.sharedUniforms) {\n\t\tconst bgColor1 = properties.sharedUniforms.u_bgColor1.value;\n\t\tconst bgColor2 = properties.sharedUniforms.u_bgColor2.value;\n\t\tbgColor1.set(properties.bgColor1).convertSRGBToLinear();\n\t\tbgColor2.set(properties.bgColor2).convertSRGBToLinear();\n\t}\n\n\tproperties.renderer?.setClearColor(properties.bgColor1, 1);\n\n\t// first the logic\n\tgame.init();\n\t// then the visuals\n\theroBlocks.init();\n\tcoins.init();\n\tbackground.init();\n\n\tproperties.scene.add(coinContainer);\n\tproperties.scene.add(background.container);\n\tproperties.scene.add(heroContainer);\n}\nfunction setSize(viewportWidth: number, viewportHeight: number) {\n\tproperties.viewportWidth = viewportWidth;\n\tproperties.viewportHeight = viewportHeight;\n\tproperties.viewportResolution.set(viewportWidth, window.innerHeight);\n\n\tlet dprWidth = viewportWidth * settings.DPR;\n\tlet dprHeight = viewportHeight * settings.DPR;\n\n\tif (settings.USE_PIXEL_LIMIT && dprWidth * dprHeight > settings.MAX_PIXEL_COUNT) {\n\t\tconst aspect = dprWidth / dprHeight;\n\t\tdprHeight = Math.sqrt(settings.MAX_PIXEL_COUNT / aspect);\n\t\tdprWidth = Math.ceil(dprHeight * aspect);\n\t\tdprHeight = Math.ceil(dprHeight);\n\t}\n\n\tproperties.width = dprWidth;\n\tproperties.height = dprHeight;\n\tproperties.resolution.set(dprWidth, dprHeight);\n\n\tproperties.camera?.updateProjectionMatrix();\n\tproperties.renderer?.setSize(dprWidth, dprHeight);\n\tif (properties.canvas) {\n\t\tproperties.canvas.style.width = `${viewportWidth}px`;\n\t\tproperties.canvas.style.height = `${viewportHeight}px`;\n\t}\n}\n\nfunction onResize(offset?: number) {\n\tproperties.cameraOffsetX = offset ? offset / window.innerWidth : 0;\n\tsetSize(window.innerWidth, window.innerHeight);\n}\nfunction initCallback(offset?: number) {\n\tinitAll();\n\ttime = performance.now() / 1000;\n\tlastRender = time;\n\twindow.addEventListener('resize', () => onResize(offset));\n\tonResize(offset);\n\tanimate();\n}\n\nexport async function loadTowerAnimation(canvasId: string, offset?: number) {\n\tconst existingCanvas = properties.renderer?.domElement || document.getElementById(canvasId);\n\tif (existingCanvas) return;\n\n\tawait heroBlocks.preload();\n\tawait coins.preload();\n\tawait blueNoise.preInit();\n\n\t// put it here to have the texture anisotropy support in the loader\n\tproperties.renderer = new THREE.WebGLRenderer({ ...settings.WEBGL_OPTS });\n\tif (properties.renderer) {\n\t\tproperties.renderer.domElement.id = canvasId;\n\t\tproperties.canvas = properties.renderer.domElement;\n\t\tproperties.orbitTarget = properties.renderer.domElement;\n\t\tloader.start(() => initCallback(offset));\n\t\tdocument.body.appendChild(properties.renderer.domElement);\n\t}\n}\n\nfunction removeCanvas(canvasId) {\n\tconst canvas = document.getElementById(canvasId);\n\n\tcanvas?.remove();\n\n\tproperties.renderer?.domElement?.remove();\n\tproperties.renderer?.state?.reset();\n\tproperties.renderer?.resetState();\n\tproperties.canvas = undefined;\n\tproperties.orbitTarget = undefined;\n\tproperties.renderer?.dispose();\n\tproperties.renderer = undefined;\n\n\tresetProperties();\n}\n\nexport async function removeTowerAnimation(canvasId: string) {\n\tconst canvas = document.getElementById(canvasId);\n\tif (!canvas) return;\n\n\tconst resultDelays = {\n\t\t[AnimationResult.FAILED]: errorAnimationDuration,\n\t\t[AnimationResult.COMPLETED]: successAnimationDuration,\n\t\t[AnimationResult.REPLAY]: successAnimationDuration,\n\t\t[AnimationResult.STOP]: stopAnimationDuration,\n\t};\n\tconst alreadyStopped = status === 'not-started';\n\tconst useResultDelay = result !== null;\n\n\tconst baseDelay = 1000 * 3.5;\n\tconst resultDelay = (resultDelays[result] || 1) * 1000 + baseDelay;\n\tconst baseStopDelay = stopAnimationDuration * 1000 * 2;\n\n\tconst removeDelay = useResultDelay ? resultDelay : baseDelay;\n\tconst stopDelay = useResultDelay ? baseStopDelay + resultDelay : baseStopDelay;\n\n\tif (!alreadyStopped) {\n\t\tsetTimeout(() => setAnimationState('stop'), stopDelay);\n\t}\n\n\tsetTimeout(() => removeCanvas(canvasId), alreadyStopped ? removeDelay : removeDelay + stopDelay);\n}\n","import { loadTowerAnimation, removeTowerAnimation } from './scripts/index';\nimport { properties } from './scripts/core/properties';\nimport { result, stateManager, status, statusIndex } from './scripts/logic/stateManager';\n\nexport function setAnimationState(id: string, isReplay = false) {\n\tstateManager.set(id, isReplay);\n}\ninterface Property {\n\tproperty: string;\n\tvalue: unknown;\n}\nexport function setAnimationProperties(newProps: Property[]) {\n\tfor (const item of newProps) {\n\t\tproperties[item.property] = item.value;\n\t}\n}\n\nexport { loadTowerAnimation, removeTowerAnimation, status as animationStatus, statusIndex as animationStatusIndex, result as animationResult };\n"],"names":["_changeEvent","_startEvent","_endEvent","OrbitControls","EventDispatcher","object","domElement","Vector3","MOUSE","TOUCH","scope","state","STATE","offset","quat","Quaternion","quatInverse","lastPosition","lastQuaternion","twoPI","position","spherical","rotateLeft","getAutoRotationAngle","sphericalDelta","min","max","scale","panOffset","zoomChanged","EPS","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","angle","rotateUp","panLeft","v","distance","objectMatrix","panUp","pan","deltaX","deltaY","element","targetDistance","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","event","handleMouseDownDolly","handleMouseDownPan","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","handleMouseWheel","handleTouchStartRotate","x","y","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchStartDollyPan","handleTouchStartDollyRotate","handleTouchMoveRotate","getSecondPointerPosition","handleTouchMovePan","handleTouchMoveDolly","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onPointerDown","onPointerMove","onPointerUp","addPointer","onTouchStart","onMouseDown","onTouchMove","onMouseMove","removePointer","onPointerCancel","mouseAction","onMouseWheel","trackPointer","onContextMenu","i","pointer","ASSETS_PATH","DPR","USE_PIXEL_LIMIT","MAX_PIXEL_COUNT","FREE_BLOCKS_COUNT","AUTO_RESTART","AUTO_START","SHOW_BLOCK","DEFAULT_POSITION","DEFAULT_LOOKAT_POSITION","WEBGL_OPTS","settings","getDistance","row","col","Tile","id","__publicField","HALF_SIZE","_a","neighbour","a","b","j","_dt","SIZE","SIZE_WITH_PADDING","TOTAL_TILES","TOTAL_TILES_WITH_PADDING","mainTile","tiles","Board","init","_","tile","_getNeighbouringTiles","getTile","getRandomFreeTile","freeTiles","reset","preUpdate","dt","update","board","resolution","THREE","viewportResolution","sharedUniforms","maxFreeBlocksCount","baseStyleProperties","propertiesInitialState","properties","resetProperties","BASE","BOX","COIN","COIN_PLACEMENT","LOSE_ANIMATION","gobo","LDR_RGB1_0","matcap_gold","assets","Loader","list","loadedCount","onLoadCallback","loadBuf","filename","cb","url","response","buffer","schematicJsonSize","schematic","vertexCount","indexCount","schematicAttributeList","geometry","offsetMap","schematicAttribute","componentSize","storageType","needsPack","packedComponents","dataLength","StorageType","tmpArr","byteSize","outArr","_packAttribute","_onLoad","error","packedComponentCount","isSign","size","divider","jk","k","delta","from","loadTexture","texture","start","loadFunction","loader","MathUtils","val","ratio","toMin","toMax","ease","math","Ease","quartInOut","e","sineOut","backIn","backOut","t","backInOut","cubicBezier","x1","y1","x2","y2","bezier","p0","p1","p2","p3","cX","bX","solveBezier","epsilon","t0","t1","xEstimate","customEasing","getBlueNoiseShader","BlueNoise","bn_sharedUniforms","TEXTURE_SIZE","preInit","blueNoise","stateSignal","MinSignal","spawnSignal","endCycleSignal","gameEndedSignal","errorAnimationEndedSignal","completeAnimationEndedSignal","stopAnimationEndedSignal","lightCameraHelperSignal","lightCameraUpdateSignal","AnimationStatus","AnimationResult","SuccessLevel","PREVENT_CYCLE_STATES","statusOrder","resetCycleResults","statusIndex","status","hasNotStarted","isStart","isFree","isResult","isResultAnimation","isRestart","isReplayResult","isSuccessResult","isFailResult","isStopped","result","statusUpdateQueue","completeAnimationLevel","StateManager","updateAfterCycle","setFree","setResultAnimation","callback","updateFlags","_canUpdateStatus","newStatus","hasResult","isReplay","newStateIndex","_updateStatusAndResult","newResult","animationStyle","set","actions","setStart","setPause","setResume","setStop","setFail","setRestartAnimation","setRestart","showVisual","successActions","setComplete","setComplete2","setComplete3","_b","_queueStatusUpdate","logicBlock","blocks","block","blocksVisual","stateManager","Block","rand","thresh","neighbours","animationDelay","bestTile","keepId","clampedMoveAnimationRatio","isActive","stopRatio","stopAnimationDuration","stopSpawnRatio","stopPushDownRatio","StopAnimationManager","resetRatios","stopAnimationManager","failRatio","errorAnimationDuration","failShakeRatio","failFloatingCubesRatio","failSpawnRatio","failPushDownRatio","ErrorAnimationManager","errorAnimationManager","currentAnimationStyle","successRatio","successAnimationDuration","towerRotationRatio","floatingCoinsRatio","floatingCubesRatio","vortexCoinsRatio","successPushDownRatio","successColorTowerRatio","floatingCubesDisplacement","SuccessAnimationManager","_triggerNewAnimation","_updateRatios1","_updateRatios2","_updateRatios3","successAnimationManager","firstStartAnimationRatio","lastSpawnedBlock","cycleIndex","previousSuccessBlocksAnimationRatio","SystemManager","_spawnBlock","_shouldPreventSpawn","_spawnMultipleBlocks","_spawnSingleBlock","blocksToSpawn","newTile","needsErrorBlockReplacement","canAddNewBlock","_startNewCycle","_calculatePaths","_isFree","index","needsRestart","_updateAnimationRatios","_checkCycleCompletion","isCycleComplete","game","vert$2","frag$2","fragDepth$1","HALF_PI","_v0","HeroBlockCoordinates","TOTAL_BLOCKS","_v2_0","_v2_1","_v3_0","_v3_1","_q_0","_q_1","MAIN_COLOR","SUCCESS_COLOR","ERROR_COLOR","DEFAULT_COLOR","_c","_c2","heroContainer","heroSharedUniforms","heroState","Hero","preload","arr","modelPath","texturePath","_onBaseBlocksLoaded","_onBoxLoaded","orient","uniforms","material","vert","frag","fragDepth","refGeometry","createInstancedAttribute","name","itemSize","array","_assignFinalAnimationToTiles","infoData","i4","rowMap","tileIndex","posIndex","orientIndex","resetBlockFromLogicBlock","_updateColors","color","preFallColorRatio","_updateInfoTexture","endAnimationRatio","_updateFreeBlocks","_d","_updateAttributes","renderCount","attribute","_updateStopAnimation","_i","_updateLongBlockAnimation","animationRatio","_updateFailAnimation","frameStart","frameEnd","frameRatio","push","shake","_updateFloatAnimation","delay","pushDownRatio","easedRestartAnimationRatio","easedFirstStartAnimationRatio","heroBlocks","vert$1","frag$1","coinContainer","coinMesh","coinGeometry","coinMaterial","positionsArray","orientArray","curveuArray","aoNArray","aoPArray","coinsCount","matcapTexture","randsArray","coinsSharedUniforms","Coins","aoN","aoP","curveu","_setupGeometry","_setupMaterial","_setupMesh","attr","isFloatingAnimationActive","coins","particlesVert","particlesFrag","Background","container","particles","mesh","initParticles","positionArray","randomArray","background","time","lastRender","targetFPS","frameInterval","render","viewportWidth","viewportHeight","cameraZoom","cameraOffsetX","cameraOffsetY","camera","animate","newTime","initAll","orbitControls","bgColor1","bgColor2","setSize","dprWidth","dprHeight","aspect","onResize","initCallback","loadTowerAnimation","canvasId","removeCanvas","canvas","_e","_f","removeTowerAnimation","resultDelays","alreadyStopped","useResultDelay","baseDelay","resultDelay","baseStopDelay","removeDelay","stopDelay","setAnimationState","setAnimationProperties","newProps","item"],"mappings":"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"}