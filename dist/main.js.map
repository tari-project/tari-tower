{"version":3,"file":"main.js","sources":["../lib/scripts/controls/OrbitControls.js","../lib/scripts/core/settings.ts","../lib/scripts/logic/Tile.ts","../lib/scripts/logic/board.ts","../lib/scripts/core/properties.ts","../lib/scripts/core/loader.ts","../lib/scripts/utils/math.ts","../lib/scripts/utils/ease.ts","../lib/scripts/utils/blueNoise/getBlueNoise.glsl?raw","../lib/scripts/utils/blueNoise/blueNoise.ts","../lib/scripts/logic/signals.ts","../lib/types/stateManager.ts","../lib/scripts/logic/stateManager.ts","../lib/scripts/logic/Block.ts","../lib/scripts/logic/stopAnimationManager.ts","../lib/scripts/logic/errorAnimationManager.ts","../lib/scripts/logic/successAnimationManager.ts","../lib/scripts/logic/systemManager.ts","../lib/scripts/visuals/hero/hero.vert?raw","../lib/scripts/visuals/hero/hero.frag?raw","../lib/scripts/visuals/hero/heroDepth.frag?raw","../lib/scripts/visuals/hero/HeroBlockCoordinates.ts","../lib/scripts/visuals/hero/hero.ts","../lib/scripts/visuals/coins/coins.vert?raw","../lib/scripts/visuals/coins/coins.frag?raw","../lib/scripts/visuals/coins/coinsDepth.frag?raw","../lib/scripts/visuals/coins/coins.ts","../lib/scripts/visuals/bg/bg.vert?raw","../lib/scripts/visuals/bg/bg.frag?raw","../lib/scripts/visuals/bg/particles.vert?raw","../lib/scripts/visuals/bg/particles.frag?raw","../lib/scripts/visuals/bg/bg.ts","../lib/scripts/index.ts","../lib/main.ts"],"sourcesContent":["// https://github.com/mrdoob/three.js/blob/d7f2d9ac3af4228f0940d3b2410b1ad6f0dda529/examples/jsm/controls/OrbitControls.js#L43\n// eslint-disable @typescript-eslint/no-this-alias\n// @typescript-eslint-disable @typescript-eslint/no-this-alias\n\nimport { EventDispatcher, MOUSE, Quaternion, Spherical, TOUCH, Vector2, Vector3 } from 'three';\n\n/**\n * This set of controls performs orbiting, dollying (zooming), and panning.\n * Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n *\n *    Orbit - left mouse / touch: one-finger move\n *    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n *    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n */\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\n\nclass OrbitControls extends EventDispatcher {\n\tconstructor(object, domElement) {\n\t\tsuper();\n\n\t\tif (domElement === undefined) console.warn('THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.');\n\t\tif (domElement === document) console.error('THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n\n\t\tthis.object = object;\n\t\tthis.domElement = domElement;\n\t\tthis.domElement.style.touchAction = 'none'; // disable touch scroll\n\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\tthis.target = new Vector3();\n\n\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\n\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = Math.PI * 0.2; // radians\n\t\tthis.maxPolarAngle = Math.PI * 0.45; // radians\n\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\t\tthis.minAzimuthAngle = -Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.15;\n\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = false;\n\t\tthis.zoomSpeed = 1.0;\n\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 0.5;\n\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = false;\n\t\tthis.panSpeed = 1.0;\n\t\tthis.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };\n\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n\t\t// Touch fingers\n\t\tthis.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n\t\t// for reset\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\t\tthis.scale = 1;\n\n\t\t// the target DOM element for key events\n\n\t\t//\n\t\t// public methods\n\t\t//\n\n\t\tthis.reset = function () {\n\t\t\tscope.target.copy(scope.target0);\n\t\t\tscope.object.position.copy(scope.position0);\n\t\t\tscope.object.zoom = scope.zoom0;\n\t\t\tscope.scale = 1;\n\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent(_changeEvent);\n\n\t\t\tscope.update();\n\n\t\t\tstate = STATE.NONE;\n\t\t};\n\n\t\tthis.update = (function () {\n\t\t\tconst offset = new Vector3();\n\n\t\t\t// so camera.up is the orbit axis\n\t\t\tconst quat = new Quaternion().setFromUnitVectors(object.up, new Vector3(0, 1, 0));\n\t\t\tconst quatInverse = quat.clone().invert();\n\n\t\t\tconst lastPosition = new Vector3();\n\t\t\tconst lastQuaternion = new Quaternion();\n\n\t\t\tconst twoPI = 2 * Math.PI;\n\n\t\t\treturn function update() {\n\t\t\t\tconst position = scope.object.position;\n\t\t\t\toffset.copy(position).sub(scope.target);\n\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion(quat);\n\n\t\t\t\t// angle from z-axis around y-axis\n\t\t\t\tspherical.setFromVector3(offset);\n\n\t\t\t\tif (scope.autoRotate && state === STATE.NONE) {\n\t\t\t\t\trotateLeft(getAutoRotationAngle());\n\t\t\t\t}\n\n\t\t\t\tif (scope.enableDamping) {\n\t\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\t\t\t\t} else {\n\t\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\t\tspherical.phi += sphericalDelta.phi;\n\t\t\t\t}\n\n\t\t\t\t// restrict theta to be between desired limits\n\n\t\t\t\tlet min = scope.minAzimuthAngle;\n\t\t\t\tlet max = scope.maxAzimuthAngle;\n\n\t\t\t\tif (isFinite(min) && isFinite(max)) {\n\t\t\t\t\tif (min < -Math.PI) min += twoPI;\n\t\t\t\t\telse if (min > Math.PI) min -= twoPI;\n\n\t\t\t\t\tif (max < -Math.PI) max += twoPI;\n\t\t\t\t\telse if (max > Math.PI) max -= twoPI;\n\n\t\t\t\t\tif (min <= max) {\n\t\t\t\t\t\tspherical.theta = Math.max(min, Math.min(max, spherical.theta));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tspherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tspherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));\n\n\t\t\t\tspherical.makeSafe();\n\n\t\t\t\tlet scale = scope.enableDamping ? (scope.scale - 1) * scope.dampingFactor + 1 : scope.scale;\n\t\t\t\tspherical.radius *= scale;\n\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tspherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius));\n\n\t\t\t\t// move target to panned location\n\n\t\t\t\tif (scope.enableDamping === true) {\n\t\t\t\t\tscope.target.addScaledVector(panOffset, scope.dampingFactor);\n\t\t\t\t} else {\n\t\t\t\t\tscope.target.add(panOffset);\n\t\t\t\t}\n\n\t\t\t\toffset.setFromSpherical(spherical);\n\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion(quatInverse);\n\n\t\t\t\tposition.copy(scope.target).add(offset);\n\n\t\t\t\tscope.object.lookAt(scope.target);\n\n\t\t\t\tif (scope.enableDamping === true) {\n\t\t\t\t\tsphericalDelta.theta *= 1 - scope.dampingFactor;\n\t\t\t\t\tsphericalDelta.phi *= 1 - scope.dampingFactor;\n\n\t\t\t\t\tpanOffset.multiplyScalar(1 - scope.dampingFactor);\n\t\t\t\t} else {\n\t\t\t\t\tsphericalDelta.set(0, 0, 0);\n\n\t\t\t\t\tpanOffset.set(0, 0, 0);\n\t\t\t\t}\n\n\t\t\t\tscope.scale = scope.scale / scale;\n\n\t\t\t\t/**\n\t\t\t\t * update condition is:\n\t\t\t\t * min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t * using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\t\t\t\t */\n\t\t\t\tif (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n\t\t\t\t\tscope.dispatchEvent(_changeEvent);\n\t\t\t\t\tlastPosition.copy(scope.object.position);\n\t\t\t\t\tlastQuaternion.copy(scope.object.quaternion);\n\t\t\t\t\tzoomChanged = false;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t};\n\t\t})();\n\n\t\t/**\n\t\t * INTERNALS\n\t\t */\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tconst scope = this;\n\n\t\tconst STATE = {\n\t\t\tNONE: -1,\n\t\t\tROTATE: 0,\n\t\t\tDOLLY: 1,\n\t\t\tPAN: 2,\n\t\t\tTOUCH_ROTATE: 3,\n\t\t\tTOUCH_PAN: 4,\n\t\t\tTOUCH_DOLLY_PAN: 5,\n\t\t\tTOUCH_DOLLY_ROTATE: 6,\n\t\t};\n\n\t\tlet state = STATE.NONE;\n\n\t\tconst EPS = 0.000001;\n\n\t\t// current position in spherical coordinates\n\t\tconst spherical = new Spherical();\n\t\tconst sphericalDelta = new Spherical();\n\n\t\tconst panOffset = new Vector3();\n\t\tlet zoomChanged = false;\n\n\t\tconst rotateStart = new Vector2();\n\t\tconst rotateEnd = new Vector2();\n\t\tconst rotateDelta = new Vector2();\n\n\t\tconst panStart = new Vector2();\n\t\tconst panEnd = new Vector2();\n\t\tconst panDelta = new Vector2();\n\n\t\tconst dollyStart = new Vector2();\n\t\tconst dollyEnd = new Vector2();\n\t\tconst dollyDelta = new Vector2();\n\n\t\tconst pointers = [];\n\t\tconst pointerPositions = {};\n\n\t\tfunction getAutoRotationAngle() {\n\t\t\treturn ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\n\t\t}\n\n\t\tfunction getZoomScale() {\n\t\t\treturn Math.pow(0.95, scope.zoomSpeed);\n\t\t}\n\n\t\tfunction rotateLeft(angle) {\n\t\t\tsphericalDelta.theta -= angle;\n\t\t}\n\n\t\tfunction rotateUp(angle) {\n\t\t\tsphericalDelta.phi -= angle;\n\t\t}\n\n\t\tconst panLeft = (function () {\n\t\t\tconst v = new Vector3();\n\n\t\t\treturn function panLeft(distance, objectMatrix) {\n\t\t\t\tv.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n\t\t\t\tv.multiplyScalar(-distance);\n\n\t\t\t\tpanOffset.add(v);\n\t\t\t};\n\t\t})();\n\n\t\tconst panUp = (function () {\n\t\t\tconst v = new Vector3();\n\n\t\t\treturn function panUp(distance, objectMatrix) {\n\t\t\t\tif (scope.screenSpacePanning === true) {\n\t\t\t\t\tv.setFromMatrixColumn(objectMatrix, 1);\n\t\t\t\t} else {\n\t\t\t\t\tv.setFromMatrixColumn(objectMatrix, 0);\n\t\t\t\t\tv.crossVectors(scope.object.up, v);\n\t\t\t\t}\n\n\t\t\t\tv.multiplyScalar(distance);\n\n\t\t\t\tpanOffset.add(v);\n\t\t\t};\n\t\t})();\n\n\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\tconst pan = (function () {\n\t\t\tconst offset = new Vector3();\n\n\t\t\treturn function pan(deltaX, deltaY) {\n\t\t\t\tconst element = scope.domElement;\n\n\t\t\t\tif (scope.object.isPerspectiveCamera) {\n\t\t\t\t\t// perspective\n\t\t\t\t\tconst position = scope.object.position;\n\t\t\t\t\toffset.copy(position).sub(scope.target);\n\t\t\t\t\tlet targetDistance = offset.length();\n\n\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\ttargetDistance *= Math.tan(((scope.object.fov / 2) * Math.PI) / 180.0);\n\n\t\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\t\tpanLeft((2 * deltaX * targetDistance) / element.clientHeight, scope.object.matrix);\n\t\t\t\t\tpanUp((2 * deltaY * targetDistance) / element.clientHeight, scope.object.matrix);\n\t\t\t\t} else if (scope.object.isOrthographicCamera) {\n\t\t\t\t\t// orthographic\n\t\t\t\t\tpanLeft((deltaX * (scope.object.right - scope.object.left)) / scope.object.zoom / element.clientWidth, scope.object.matrix);\n\t\t\t\t\tpanUp((deltaY * (scope.object.top - scope.object.bottom)) / scope.object.zoom / element.clientHeight, scope.object.matrix);\n\t\t\t\t} else {\n\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\tconsole.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n\t\t\t\t\tscope.enablePan = false;\n\t\t\t\t}\n\t\t\t};\n\t\t})();\n\n\t\tfunction dollyOut(dollyScale) {\n\t\t\tif (scope.object.isPerspectiveCamera) {\n\t\t\t\tscope.scale /= dollyScale;\n\t\t\t} else if (scope.object.isOrthographicCamera) {\n\t\t\t\tscope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\t\t\t} else {\n\t\t\t\tconsole.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n\t\t\t\tscope.enableZoom = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction dollyIn(dollyScale) {\n\t\t\tif (scope.object.isPerspectiveCamera) {\n\t\t\t\tscope.scale *= dollyScale;\n\t\t\t} else if (scope.object.isOrthographicCamera) {\n\t\t\t\tscope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\t\t\t} else {\n\t\t\t\tconsole.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n\t\t\t\tscope.enableZoom = false;\n\t\t\t}\n\t\t}\n\n\t\t//\n\t\t// event callbacks - update the object state\n\t\t//\n\n\t\tfunction handleMouseDownRotate(event) {\n\t\t\trotateStart.set(event.clientX, event.clientY);\n\t\t}\n\n\t\tfunction handleMouseDownDolly(event) {\n\t\t\tdollyStart.set(event.clientX, event.clientY);\n\t\t}\n\n\t\tfunction handleMouseDownPan(event) {\n\t\t\tpanStart.set(event.clientX, event.clientY);\n\t\t}\n\n\t\tfunction handleMouseMoveRotate(event) {\n\t\t\trotateEnd.set(event.clientX, event.clientY);\n\t\t\trotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n\n\t\t\tconst element = scope.domElement;\n\t\t\trotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight);\n\t\t\trotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight);\n\t\t\trotateStart.copy(rotateEnd);\n\t\t\tscope.update();\n\t\t}\n\n\t\tfunction handleMouseMoveDolly(event) {\n\t\t\tdollyEnd.set(event.clientX, event.clientY);\n\t\t\tdollyDelta.subVectors(dollyEnd, dollyStart);\n\n\t\t\tif (dollyDelta.y > 0) {\n\t\t\t\tdollyOut(getZoomScale());\n\t\t\t} else if (dollyDelta.y < 0) {\n\t\t\t\tdollyIn(getZoomScale());\n\t\t\t}\n\n\t\t\tdollyStart.copy(dollyEnd);\n\t\t\tscope.update();\n\t\t}\n\n\t\tfunction handleMouseMovePan(event) {\n\t\t\tpanEnd.set(event.clientX, event.clientY);\n\t\t\tpanDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n\t\t\tpan(panDelta.x, panDelta.y);\n\t\t\tpanStart.copy(panEnd);\n\t\t\tscope.update();\n\t\t}\n\n\t\tfunction handleMouseWheel(event) {\n\t\t\tif (event.deltaY < 0) {\n\t\t\t\tdollyIn(getZoomScale());\n\t\t\t} else if (event.deltaY > 0) {\n\t\t\t\tdollyOut(getZoomScale());\n\t\t\t}\n\n\t\t\tscope.update();\n\t\t}\n\n\t\tfunction handleTouchStartRotate() {\n\t\t\tif (pointers.length === 1) {\n\t\t\t\trotateStart.set(pointers[0].pageX, pointers[0].pageY);\n\t\t\t} else {\n\t\t\t\tconst x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n\t\t\t\tconst y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n\n\t\t\t\trotateStart.set(x, y);\n\t\t\t}\n\t\t}\n\n\t\tfunction handleTouchStartPan() {\n\t\t\tif (pointers.length === 1) {\n\t\t\t\tpanStart.set(pointers[0].pageX, pointers[0].pageY);\n\t\t\t} else {\n\t\t\t\tconst x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n\t\t\t\tconst y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n\n\t\t\t\tpanStart.set(x, y);\n\t\t\t}\n\t\t}\n\n\t\tfunction handleTouchStartDolly() {\n\t\t\tconst dx = pointers[0].pageX - pointers[1].pageX;\n\t\t\tconst dy = pointers[0].pageY - pointers[1].pageY;\n\t\t\tconst distance = Math.sqrt(dx * dx + dy * dy);\n\t\t\tdollyStart.set(0, distance);\n\t\t}\n\n\t\tfunction handleTouchStartDollyPan() {\n\t\t\tif (scope.enableZoom) handleTouchStartDolly();\n\t\t\tif (scope.enablePan) handleTouchStartPan();\n\t\t}\n\n\t\tfunction handleTouchStartDollyRotate() {\n\t\t\tif (scope.enableZoom) handleTouchStartDolly();\n\t\t\tif (scope.enableRotate) handleTouchStartRotate();\n\t\t}\n\n\t\tfunction handleTouchMoveRotate(event) {\n\t\t\tif (pointers.length === 1) {\n\t\t\t\trotateEnd.set(event.pageX, event.pageY);\n\t\t\t} else {\n\t\t\t\tconst position = getSecondPointerPosition(event);\n\t\t\t\tconst x = 0.5 * (event.pageX + position.x);\n\t\t\t\tconst y = 0.5 * (event.pageY + position.y);\n\t\t\t\trotateEnd.set(x, y);\n\t\t\t}\n\n\t\t\trotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n\n\t\t\tconst element = scope.domElement;\n\t\t\trotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight);\n\t\t\trotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight);\n\t\t\trotateStart.copy(rotateEnd);\n\t\t}\n\n\t\tfunction handleTouchMovePan(event) {\n\t\t\tif (pointers.length === 1) {\n\t\t\t\tpanEnd.set(event.pageX, event.pageY);\n\t\t\t} else {\n\t\t\t\tconst position = getSecondPointerPosition(event);\n\t\t\t\tconst x = 0.5 * (event.pageX + position.x);\n\t\t\t\tconst y = 0.5 * (event.pageY + position.y);\n\t\t\t\tpanEnd.set(x, y);\n\t\t\t}\n\n\t\t\tpanDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n\t\t\tpan(panDelta.x, panDelta.y);\n\t\t\tpanStart.copy(panEnd);\n\t\t}\n\n\t\tfunction handleTouchMoveDolly(event) {\n\t\t\tconst position = getSecondPointerPosition(event);\n\t\t\tconst dx = event.pageX - position.x;\n\t\t\tconst dy = event.pageY - position.y;\n\t\t\tconst distance = Math.sqrt(dx * dx + dy * dy);\n\n\t\t\tdollyEnd.set(0, distance);\n\t\t\tdollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));\n\t\t\tdollyOut(dollyDelta.y);\n\t\t\tdollyStart.copy(dollyEnd);\n\t\t}\n\n\t\tfunction handleTouchMoveDollyPan(event) {\n\t\t\tif (scope.enableZoom) handleTouchMoveDolly(event);\n\t\t\tif (scope.enablePan) handleTouchMovePan(event);\n\t\t}\n\n\t\tfunction handleTouchMoveDollyRotate(event) {\n\t\t\tif (scope.enableZoom) handleTouchMoveDolly(event);\n\t\t\tif (scope.enableRotate) handleTouchMoveRotate(event);\n\t\t}\n\n\t\t/**\n\t\t * event handlers - FSM: listen for events and reset state\n\t\t */\n\n\t\tfunction onPointerDown(event) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (pointers.length === 0) {\n\t\t\t\tscope.domElement.setPointerCapture(event.pointerId);\n\t\t\t\tscope.domElement.addEventListener('pointermove', onPointerMove);\n\t\t\t\tscope.domElement.addEventListener('pointerup', onPointerUp);\n\t\t\t}\n\n\t\t\taddPointer(event);\n\n\t\t\tif (event.pointerType === 'touch') {\n\t\t\t\tonTouchStart(event);\n\t\t\t} else {\n\t\t\t\tonMouseDown(event);\n\t\t\t}\n\t\t}\n\n\t\tfunction onPointerMove(event) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (event.pointerType === 'touch') {\n\t\t\t\tonTouchMove(event);\n\t\t\t} else {\n\t\t\t\tonMouseMove(event);\n\t\t\t}\n\t\t}\n\n\t\tfunction onPointerUp(event) {\n\t\t\tremovePointer(event);\n\t\t\tif (pointers.length === 0) {\n\t\t\t\tscope.domElement.releasePointerCapture(event.pointerId);\n\t\t\t\tscope.domElement.removeEventListener('pointermove', onPointerMove);\n\t\t\t\tscope.domElement.removeEventListener('pointerup', onPointerUp);\n\t\t\t}\n\n\t\t\tscope.dispatchEvent(_endEvent);\n\t\t\tstate = STATE.NONE;\n\t\t}\n\n\t\tfunction onPointerCancel(event) {\n\t\t\tremovePointer(event);\n\t\t}\n\n\t\tfunction onMouseDown(event) {\n\t\t\tlet mouseAction;\n\n\t\t\tswitch (event.button) {\n\t\t\t\tcase 0:\n\t\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tmouseAction = -1;\n\t\t\t}\n\n\t\t\tswitch (mouseAction) {\n\t\t\t\tcase MOUSE.DOLLY:\n\t\t\t\t\tif (scope.enableZoom === false) return;\n\t\t\t\t\thandleMouseDownDolly(event);\n\t\t\t\t\tstate = STATE.DOLLY;\n\t\t\t\t\tbreak;\n\t\t\t\tcase MOUSE.ROTATE:\n\t\t\t\t\tif (event.ctrlKey || event.metaKey || event.shiftKey) {\n\t\t\t\t\t\tif (scope.enablePan === false) return;\n\t\t\t\t\t\thandleMouseDownPan(event);\n\t\t\t\t\t\tstate = STATE.PAN;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\t\t\t\t\thandleMouseDownRotate(event);\n\t\t\t\t\t\tstate = STATE.ROTATE;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase MOUSE.PAN:\n\t\t\t\t\tif (event.ctrlKey || event.metaKey || event.shiftKey) {\n\t\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\t\t\t\t\thandleMouseDownRotate(event);\n\t\t\t\t\t\tstate = STATE.ROTATE;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (scope.enablePan === false) return;\n\t\t\t\t\t\thandleMouseDownPan(event);\n\t\t\t\t\t\tstate = STATE.PAN;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstate = STATE.NONE;\n\t\t\t}\n\n\t\t\tif (state !== STATE.NONE) {\n\t\t\t\tscope.dispatchEvent(_startEvent);\n\t\t\t}\n\t\t}\n\n\t\tfunction onMouseMove(event) {\n\t\t\tif (scope.enabled === false) return;\n\n\t\t\tswitch (state) {\n\t\t\t\tcase STATE.ROTATE:\n\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\t\t\t\thandleMouseMoveRotate(event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase STATE.DOLLY:\n\t\t\t\t\tif (scope.enableZoom === false) return;\n\t\t\t\t\thandleMouseMoveDolly(event);\n\t\t\t\t\tbreak;\n\t\t\t\tcase STATE.PAN:\n\t\t\t\t\tif (scope.enablePan === false) return;\n\t\t\t\t\thandleMouseMovePan(event);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction onMouseWheel(event) {\n\t\t\tif (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE) return;\n\t\t\t// event.preventDefault();\n\t\t\tscope.dispatchEvent(_startEvent);\n\t\t\thandleMouseWheel(event);\n\t\t\tscope.dispatchEvent(_endEvent);\n\t\t}\n\n\t\tfunction onTouchStart(event) {\n\t\t\ttrackPointer(event);\n\t\t\tswitch (pointers.length) {\n\t\t\t\tcase 1:\n\t\t\t\t\tswitch (scope.touches.ONE) {\n\t\t\t\t\t\tcase TOUCH.ROTATE:\n\t\t\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\t\t\t\t\t\thandleTouchStartRotate();\n\t\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase TOUCH.PAN:\n\t\t\t\t\t\t\tif (scope.enablePan === false) return;\n\t\t\t\t\t\t\thandleTouchStartPan();\n\t\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tstate = STATE.NONE;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tswitch (scope.touches.TWO) {\n\t\t\t\t\t\tcase TOUCH.DOLLY_PAN:\n\t\t\t\t\t\t\tif (scope.enableZoom === false && scope.enablePan === false) return;\n\t\t\t\t\t\t\thandleTouchStartDollyPan();\n\t\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase TOUCH.DOLLY_ROTATE:\n\t\t\t\t\t\t\tif (scope.enableZoom === false && scope.enableRotate === false) return;\n\t\t\t\t\t\t\thandleTouchStartDollyRotate();\n\t\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tstate = STATE.NONE;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstate = STATE.NONE;\n\t\t\t}\n\n\t\t\tif (state !== STATE.NONE) {\n\t\t\t\tscope.dispatchEvent(_startEvent);\n\t\t\t}\n\t\t}\n\n\t\tfunction onTouchMove(event) {\n\t\t\ttrackPointer(event);\n\t\t\tswitch (state) {\n\t\t\t\tcase STATE.TOUCH_ROTATE:\n\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\t\t\t\thandleTouchMoveRotate(event);\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\t\t\tcase STATE.TOUCH_PAN:\n\t\t\t\t\tif (scope.enablePan === false) return;\n\t\t\t\t\thandleTouchMovePan(event);\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\t\t\t\t\tif (scope.enableZoom === false && scope.enablePan === false) return;\n\t\t\t\t\thandleTouchMoveDollyPan(event);\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\t\t\t\t\tif (scope.enableZoom === false && scope.enableRotate === false) return;\n\t\t\t\t\thandleTouchMoveDollyRotate(event);\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstate = STATE.NONE;\n\t\t\t}\n\t\t}\n\n\t\tfunction onContextMenu(event) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\tfunction addPointer(event) {\n\t\t\tpointers.push(event);\n\t\t}\n\n\t\tfunction removePointer(event) {\n\t\t\tdelete pointerPositions[event.pointerId];\n\t\t\tfor (let i = 0; i < pointers.length; i++) {\n\t\t\t\tif (pointers[i].pointerId === event.pointerId) {\n\t\t\t\t\tpointers.splice(i, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction trackPointer(event) {\n\t\t\tlet position = pointerPositions[event.pointerId];\n\t\t\tif (position === undefined) {\n\t\t\t\tposition = new Vector2();\n\t\t\t\tpointerPositions[event.pointerId] = position;\n\t\t\t}\n\t\t\tposition.set(event.pageX, event.pageY);\n\t\t}\n\n\t\tfunction getSecondPointerPosition(event) {\n\t\t\tconst pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];\n\t\t\treturn pointerPositions[pointer.pointerId];\n\t\t}\n\n\t\tscope.domElement.addEventListener('contextmenu', onContextMenu);\n\t\tscope.domElement.addEventListener('pointerdown', onPointerDown);\n\t\tscope.domElement.addEventListener('pointercancel', onPointerCancel);\n\t\tscope.domElement.addEventListener('wheel', onMouseWheel, { passive: false });\n\n\t\t// force an update at start\n\n\t\tthis.update();\n\t}\n}\n\n/**\n * This set of controls performs orbiting, dollying (zooming), and panning.\n * Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n * This is very similar to OrbitControls, another set of touch behavior\n *\n *    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n *    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n *    Pan - left mouse, or arrow keys / touch: one-finger move\n */\n\nexport { OrbitControls };\n","export const ASSETS_PATH = '/assets';\nconst DPR = Math.min(2, window.devicePixelRatio || 1);\nconst USE_PIXEL_LIMIT = true;\nconst MAX_PIXEL_COUNT = 2560 * 1440;\nconst FREE_BLOCKS_COUNT = 12;\nconst AUTO_RESTART = true;\nconst AUTO_START = false;\nconst SHOW_BLOCK = false;\nconst DEFAULT_POSITION = [-20, 18, 20];\nconst DEFAULT_LOOKAT_POSITION = [0, 0, 0];\nconst WEBGL_OPTS = { antialias: true, alpha: false };\n\nconst settings = {\n\tDPR,\n\tUSE_PIXEL_LIMIT,\n\tMAX_PIXEL_COUNT,\n\tDEFAULT_POSITION,\n\tDEFAULT_LOOKAT_POSITION,\n\tWEBGL_OPTS,\n\tFREE_BLOCKS_COUNT,\n\tAUTO_RESTART,\n\tAUTO_START,\n\tSHOW_BLOCK,\n};\nexport default settings;\n","import { HALF_SIZE } from './board';\n\nconst getDistance = (row, col) => Math.hypot(row, col);\n\nexport default class Tile {\n\tid = 0;\n\trow = 0;\n\tcol = 0;\n\tdistance: number = getDistance(this.row, this.col);\n\tMAX_DISTANCE: number = getDistance(HALF_SIZE, HALF_SIZE);\n\tpriority: number = this.MAX_DISTANCE - this.distance;\n\tisMain: boolean = this.row === 0 && this.col === 0;\n\tisBorder: boolean = Math.abs(this.row) === 2 || Math.abs(this.col) === 2;\n\tisOccupied = false;\n\twillBeOccupied = false;\n\tactiveRatio = 0;\n\tneighbours: (Tile | null)[] | null = null;\n\treachableNeighbours: (Tile | null)[] | null = null;\n\tprioritySortedReachableNeighbours: (Tile | null)[] | null = null;\n\trandomDelay: number = Math.random() * 0.5 + (this.MAX_DISTANCE - this.priority) * 0.5;\n\tloseAnimationPositionArray: Float32Array<ArrayBuffer> = [] as unknown as Float32Array<ArrayBuffer>;\n\tloseAnimationOrientArray: Float32Array<ArrayBuffer> = [] as unknown as Float32Array<ArrayBuffer>;\n\n\tconstructor(id = 0, row = 0, col = 0) {\n\t\tthis.id = id;\n\t\tthis.row = row;\n\t\tthis.col = col;\n\t\tthis.distance = getDistance(row, col);\n\t\tthis.MAX_DISTANCE = getDistance(HALF_SIZE, HALF_SIZE);\n\t\tthis.priority = this.MAX_DISTANCE - this.distance;\n\t\tthis.isMain = row === 0 && col === 0;\n\t\tthis.isBorder = Math.abs(row) === 2 || Math.abs(col) === 2;\n\t\tthis.isOccupied = false;\n\t\tthis.willBeOccupied = false;\n\t\tthis.activeRatio = 0;\n\t\tthis.neighbours = null;\n\t\tthis.reachableNeighbours = null;\n\t\tthis.prioritySortedReachableNeighbours = null;\n\t\tthis.randomDelay = Math.random() * 0.5 + (this.MAX_DISTANCE - this.priority) * 0.5;\n\t}\n\n\tinit() {\n\t\tthis.reachableNeighbours = this.neighbours?.filter((neighbour) => neighbour?.row === this.row || neighbour?.col === this.col) || null;\n\n\t\tthis._sortPriorityNeighbours();\n\t}\n\n\t_sortPriorityNeighbours() {\n\t\tthis.prioritySortedReachableNeighbours = this.reachableNeighbours ? [...this.reachableNeighbours].sort((a, b) => (a?.priority || 0) - (b?.priority || 0)) : null;\n\t}\n\n\tshuffleReachableNeighbours() {\n\t\tif (this.reachableNeighbours) {\n\t\t\tfor (let i = this.reachableNeighbours.length - 1; i > 0; i--) {\n\t\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t\t[this.reachableNeighbours[i], this.reachableNeighbours[j]] = [this.reachableNeighbours[j], this.reachableNeighbours[i]];\n\t\t\t}\n\t\t}\n\n\t\tthis._sortPriorityNeighbours();\n\t}\n\n\tpreUpdate(_dt: number) {\n\t\tthis.activeRatio = 0;\n\t}\n\n\treset() {\n\t\tthis.isOccupied = false;\n\t\tthis.willBeOccupied = false;\n\t\tthis.activeRatio = 0;\n\t}\n\n\tupdate(_dt: number) {\n\t\t// TODO: check this update flow\n\t}\n}\n","import Tile from './Tile';\n\nexport const SIZE = 5;\nexport const SIZE_WITH_PADDING = SIZE + 2;\nexport const HALF_SIZE = Math.floor(SIZE / 2);\nexport const TOTAL_TILES = SIZE * SIZE;\nexport const TOTAL_TILES_WITH_PADDING = SIZE_WITH_PADDING * SIZE_WITH_PADDING;\n\nlet mainTile: Tile | null = null;\nlet tiles: Tile[][] = [];\nconst Board = () => {\n\tfunction init() {\n\t\ttiles = Array.from({ length: SIZE }, (_, i) =>\n\t\t\tArray.from({ length: SIZE }, (_, j) => {\n\t\t\t\tconst row = i - HALF_SIZE;\n\t\t\t\tconst col = j - HALF_SIZE;\n\t\t\t\treturn new Tile(i * SIZE + j, row, col);\n\t\t\t}),\n\t\t);\n\n\t\ttiles.forEach((row, i) =>\n\t\t\trow.forEach((tile, j) => {\n\t\t\t\ttile.neighbours = _getNeighbouringTiles(i - HALF_SIZE, j - HALF_SIZE);\n\t\t\t\ttile.init();\n\t\t\t}),\n\t\t);\n\n\t\tmainTile = getTile(0, 0);\n\t}\n\n\tfunction getTile(row, col) {\n\t\treturn tiles[row + HALF_SIZE]?.[col + HALF_SIZE] || null;\n\t}\n\n\tfunction getRandomFreeTile() {\n\t\tconst freeTiles = tiles.flat().filter((tile) => !tile.isOccupied);\n\t\treturn freeTiles.length ? freeTiles[Math.floor(Math.random() * freeTiles.length)] : null;\n\t}\n\n\tfunction _getNeighbouringTiles(row, col) {\n\t\treturn [-1, 0, 1].flatMap((i) =>\n\t\t\t[-1, 0, 1]\n\t\t\t\t.map((j) => {\n\t\t\t\t\tif (i === 0 && j === 0) return null;\n\t\t\t\t\treturn getTile(row + i, col + j);\n\t\t\t\t})\n\t\t\t\t.filter(Boolean),\n\t\t);\n\t}\n\n\tfunction reset() {\n\t\ttiles.flat().forEach((tile) => tile.reset());\n\t}\n\n\tfunction preUpdate(dt: number) {\n\t\ttiles.flat().forEach((tile) => tile.preUpdate(dt));\n\t}\n\n\tfunction update(dt: number) {\n\t\ttiles.flat().forEach((tile) => tile.update(dt));\n\t}\n\n\treturn {\n\t\tinit,\n\t\tgetTile,\n\t\tgetRandomFreeTile,\n\t\treset,\n\t\tpreUpdate,\n\t\tupdate,\n\t};\n};\nconst board = Board();\n\nexport { board, mainTile, tiles };\n","import * as THREE from 'three';\nimport settings from './settings';\n\nimport { TOTAL_TILES } from '../logic/board';\nimport { PropertiesType } from '../../types/properties';\n\nconst resolution = new THREE.Vector2();\nconst viewportResolution = new THREE.Vector2();\nconst sharedUniforms: PropertiesType['sharedUniforms'] = {\n\tu_time: { value: 0 },\n\tu_deltaTime: { value: 1 },\n\tu_resolution: { value: resolution },\n\tu_viewportResolution: { value: viewportResolution },\n\tu_bgColor1: { value: new THREE.Color() },\n\tu_bgColor2: { value: new THREE.Color() },\n};\nconst maxFreeBlocksCount = TOTAL_TILES - 5;\n\nconst baseStyleProperties = {\n\tbgColor1: '#ffffff',\n\tbgColor2: '#d0d0d0',\n\tneutralColor: '#ffffff',\n\tmainColor: '#0096ff',\n\tsuccessColor: '#00c881',\n\tfailColor: '#ca0101',\n\tparticlesColor: '#505050',\n\tgoboIntensity: 0.45,\n\tparticlesOpacity: 0.75,\n\tparticlesSize: 0.01,\n};\nconst propertiesInitialState: PropertiesType = {\n\tcanvasId: undefined,\n\ttime: 0,\n\tdeltaTime: 0,\n\twidth: 0,\n\theight: 0,\n\tviewportWidth: 0,\n\tviewportHeight: 0,\n\tcamera: undefined,\n\torbitCamera: undefined,\n\tcameraZoom: 1,\n\tcameraOffsetX: 0,\n\tcameraOffsetY: 0,\n\trenderer: undefined,\n\tscene: undefined,\n\tpostprocessing: false,\n\tresolution,\n\tviewportResolution,\n\tcanvas: null,\n\torbitTarget: null,\n\tsharedUniforms,\n\tisPaused: false,\n\tshowVisual: settings.SHOW_BLOCK,\n\tloadList: [],\n\tanimationSpeed: 1.1,\n\tactiveBlocksCount: 0,\n\tmaxFreeBlocksCount,\n\tlightPositionX: -2,\n\tlightPositionY: 6,\n\tlightPositionZ: -4,\n\tlightCameraSize: 4.5,\n\tlightCameraBias: 0.005,\n\tlightCameraNear: 3,\n\tlightCameraFar: 16,\n\terrorBlock: null,\n\terrorBlockMaxLifeCycle: 4,\n\tminSpawnedBlocksForTheErrorBlock: maxFreeBlocksCount - 2,\n\t...baseStyleProperties,\n};\nlet properties = propertiesInitialState;\n\nexport function resetProperties() {\n\tproperties = propertiesInitialState;\n}\n\nexport { properties };\n","import * as THREE from 'three';\nimport { properties } from './properties';\n\ninterface LoaderItems {\n\tlist: (() => void | Promise<void>)[];\n\tloadedCount: number;\n\tonLoadCallback: (() => void) | null;\n}\n\nconst Loader = () => {\n\tlet list: LoaderItems['list'] = [];\n\tlet loadedCount: LoaderItems['loadedCount'] = 0;\n\tlet onLoadCallback: LoaderItems['onLoadCallback'] = null;\n\n\tfunction loadBuf(url, cb) {\n\t\tconsole.debug(`url= ${url}`);\n\t\tlist.push(async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(url);\n\t\t\t\tconsole.debug(response);\n\t\t\t\tconst buffer = await response.arrayBuffer();\n\t\t\t\tconst schematicJsonSize = new Uint32Array(buffer, 0, 1)[0];\n\t\t\t\tconst schematic = JSON.parse(new TextDecoder().decode(new Uint8Array(buffer, 4, schematicJsonSize)));\n\n\t\t\t\tconst { vertexCount, indexCount, attributes: schematicAttributeList } = schematic;\n\t\t\t\tlet offset = 4 + schematicJsonSize;\n\n\t\t\t\tconst geometry = new THREE.BufferGeometry();\n\t\t\t\tconst offsetMap = {};\n\n\t\t\t\tschematicAttributeList.forEach((schematicAttribute) => {\n\t\t\t\t\tconst { id, componentSize, storageType, needsPack, packedComponents } = schematicAttribute;\n\t\t\t\t\tconst dataLength = id === 'indices' ? indexCount : vertexCount;\n\t\t\t\t\tconst StorageType = window[storageType as string];\n\t\t\t\t\tconst tmpArr = new StorageType(buffer, offset, dataLength * componentSize);\n\t\t\t\t\tconst byteSize = StorageType.BYTES_PER_ELEMENT;\n\n\t\t\t\t\tlet outArr;\n\t\t\t\t\tif (needsPack) {\n\t\t\t\t\t\toutArr = _packAttribute(tmpArr, dataLength, componentSize, packedComponents, storageType);\n\t\t\t\t\t} else {\n\t\t\t\t\t\toffsetMap[id] = offset;\n\t\t\t\t\t\toutArr = tmpArr;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (id === 'indices') {\n\t\t\t\t\t\tgeometry.setIndex(new THREE.BufferAttribute(outArr, 1));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgeometry.setAttribute(id, new THREE.BufferAttribute(outArr, componentSize));\n\t\t\t\t\t}\n\n\t\t\t\t\toffset += dataLength * componentSize * byteSize;\n\t\t\t\t});\n\n\t\t\t\tif (cb) cb(geometry);\n\t\t\t\t_onLoad();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error loading buffer:', error);\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction _packAttribute(tmpArr, dataLength, componentSize, packedComponents, storageType) {\n\t\tconst packedComponentCount = packedComponents.length;\n\t\tconst isSign = storageType.indexOf('Int') === 0;\n\t\tconst size = 1 << (tmpArr.BYTES_PER_ELEMENT * 8);\n\t\tconst offset = isSign ? size * 0.5 : 0;\n\t\tconst divider = 1 / size;\n\n\t\tconst outArr = new Float32Array(dataLength * componentSize);\n\t\tfor (let j = 0, jk = 0; j < dataLength; j++) {\n\t\t\tfor (let k = 0; k < packedComponentCount; k++) {\n\t\t\t\tconst { delta, from } = packedComponents[k];\n\t\t\t\toutArr[jk] = (tmpArr[jk] + offset) * divider * delta + from;\n\t\t\t\tjk++;\n\t\t\t}\n\t\t}\n\t\treturn outArr;\n\t}\n\n\tfunction loadTexture(url, cb) {\n\t\tlist.push(() => {\n\t\t\tnew THREE.TextureLoader().load(\n\t\t\t\turl,\n\t\t\t\t(texture) => {\n\t\t\t\t\ttexture.minFilter = THREE.LinearMipMapLinearFilter;\n\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = true;\n\t\t\t\t\ttexture.anisotropy = properties.renderer?.capabilities.getMaxAnisotropy() || 1;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tif (cb) cb(texture);\n\t\t\t\t\t_onLoad();\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\t(error) => console.error('Error loading texture:', error),\n\t\t\t);\n\t\t});\n\t}\n\n\tfunction start(cb) {\n\t\tloadedCount = 0;\n\t\tonLoadCallback = cb;\n\t\tlist.forEach((loadFunction) => loadFunction());\n\t}\n\n\tfunction _onLoad() {\n\t\tloadedCount++;\n\t\tif (loadedCount === list.length) {\n\t\t\tlist = [];\n\t\t\tif (onLoadCallback) {\n\t\t\t\tonLoadCallback();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tloadBuf,\n\t\tloadTexture,\n\t\tstart,\n\t\tlist,\n\t\tloadedCount,\n\t\tonLoadCallback,\n\t};\n};\n\nconst loader = Loader();\nexport default loader;\n","class MathUtils {\n\tPI: number = Math.PI;\n\n\tclamp(val, min, max) {\n\t\treturn val < min ? min : val > max ? max : val;\n\t}\n\n\tmix(min, max, ratio) {\n\t\treturn min + (max - min) * ratio;\n\t}\n\n\tcUnMix(min, max, val) {\n\t\treturn this.clamp((val - min) / (max - min), 0, 1);\n\t}\n\n\tsaturate(val) {\n\t\treturn this.clamp(val, 0, 1);\n\t}\n\n\tfit(val, min, max, toMin, toMax, ease?) {\n\t\tval = this.cUnMix(min, max, val);\n\t\tif (ease) val = ease(val);\n\t\treturn toMin + val * (toMax - toMin);\n\t}\n}\n\nexport default new MathUtils();\n","// from https://github.com/kaelzhang/easing-functions/\n\nconst Ease = () => {\n\tfunction quartInOut(e) {\n\t\tif ((e *= 2) < 1) return 0.5 * e * e * e * e;\n\t\treturn -0.5 * ((e -= 2) * e * e * e - 2);\n\t}\n\tfunction sineOut(e) {\n\t\treturn Math.sin((e * Math.PI) / 2);\n\t}\n\tfunction backIn(e) {\n\t\tconst t = 1.70158;\n\t\treturn e * e * ((t + 1) * e - t);\n\t}\n\tfunction backOut(e, t = 1.70158) {\n\t\treturn --e * e * ((t + 1) * e + t) + 1;\n\t}\n\tfunction backInOut(e) {\n\t\tconst t = 1.70158 * 1.525;\n\t\tif ((e *= 2) < 1) return 0.5 * e * e * ((t + 1) * e - t);\n\t\treturn 0.5 * ((e -= 2) * e * ((t + 1) * e + t) + 2);\n\t}\n\n\treturn {\n\t\tquartInOut,\n\t\tsineOut,\n\t\tbackIn,\n\t\tbackOut,\n\t\tbackInOut,\n\t};\n};\n\nfunction cubicBezier(x, x1, y1, x2, y2) {\n\tif (x === 0) return 0;\n\tif (x === 1) return 1;\n\n\t// Helper function to calculate a point on a cubic Bezier curve\n\tfunction bezier(t, p0, p1, p2, p3) {\n\t\tconst cX = 3 * (p1 - p0);\n\t\tconst bX = 3 * (p2 - p1) - cX;\n\t\tconst aX = p3 - p0 - cX - bX;\n\n\t\treturn ((aX * t + bX) * t + cX) * t + p0;\n\t}\n\n\t// Since the x-coordinate needs to be found, we perform a binary search to find t\n\tfunction solveBezier(x, x1, x2, epsilon = 1e-6) {\n\t\tlet t0 = 0;\n\t\tlet t1 = 1;\n\t\tlet t = x;\n\n\t\twhile (t0 < t1) {\n\t\t\tconst xEstimate = bezier(t, 0, x1, x2, 1);\n\t\t\tif (Math.abs(xEstimate - x) < epsilon) {\n\t\t\t\treturn t;\n\t\t\t}\n\t\t\tif (xEstimate < x) {\n\t\t\t\tt0 = t;\n\t\t\t} else {\n\t\t\t\tt1 = t;\n\t\t\t}\n\t\t\tt = (t0 + t1) / 2;\n\t\t}\n\n\t\treturn t;\n\t}\n\n\t// Find the corresponding t for the given x using the x1, x2 values\n\tconst t = solveBezier(x, x1, x2);\n\n\t// Calculate the y value using the y1, y2 values\n\treturn bezier(t, 0, y1, y2, 1);\n}\n\nexport function customEasing(x) {\n\treturn cubicBezier(x, 0.3, 0, 0, 1);\n}\n\nconst ease = Ease();\nexport default ease;\n","export default \"uniform sampler2D u_blueNoiseTexture;\\nuniform vec2 u_blueNoiseTexelSize;\\nuniform vec2 u_blueNoiseCoordOffset;\\n\\nvec3 getBlueNoise (vec2 coord) {\\n\\treturn texture2D(u_blueNoiseTexture, coord * u_blueNoiseTexelSize + u_blueNoiseCoordOffset).rgb;\\n}\\n\"","import * as THREE from 'three';\nimport loader from '../../core/loader';\n\nimport getBlueNoiseShader from './getBlueNoise.glsl?raw';\nimport { SharedUniforms } from '../../../types/properties';\nimport { ASSETS_PATH } from '../../core/settings';\n\nconst BlueNoise = () => {\n\tconst bn_sharedUniforms: SharedUniforms = {\n\t\tu_blueNoiseTexture: { value: null },\n\t\tu_blueNoiseTexelSize: { value: null },\n\t\tu_blueNoiseCoordOffset: { value: new THREE.Vector2() },\n\t};\n\tconst TEXTURE_SIZE = 128;\n\n\tasync function preInit() {\n\t\tloader.loadTexture(`${ASSETS_PATH + '/textures'}/LDR_RGB1_0.png`, (texture) => {\n\t\t\ttexture.generateMipmaps = false;\n\t\t\ttexture.minFilter = texture.magFilter = THREE.NearestFilter;\n\t\t\ttexture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\t\t\ttexture.needsUpdate = true;\n\t\t\tif (bn_sharedUniforms) {\n\t\t\t\tbn_sharedUniforms.u_blueNoiseTexture.value = texture;\n\t\t\t\tbn_sharedUniforms.u_blueNoiseTexelSize.value = new THREE.Vector2(1 / TEXTURE_SIZE, 1 / TEXTURE_SIZE);\n\t\t\t}\n\t\t});\n\t\tTHREE.ShaderChunk['getBlueNoise'] = getBlueNoiseShader;\n\t}\n\n\tfunction update(_dt: number) {\n\t\tbn_sharedUniforms?.u_blueNoiseCoordOffset.value.set(Math.random(), Math.random());\n\t}\n\n\treturn {\n\t\tupdate,\n\t\tpreInit,\n\t\tTEXTURE_SIZE,\n\t\tbn_sharedUniforms,\n\t};\n};\n\nconst blueNoise = BlueNoise();\nexport default blueNoise;\n","import MinSignal from 'min-signal';\n\nexport const stateSignal = new MinSignal();\nexport const spawnSignal = new MinSignal();\nexport const endCycleSignal = new MinSignal();\nexport const gameEndedSignal = new MinSignal();\n\nexport const errorAnimationEndedSignal = new MinSignal();\nexport const completeAnimationEndedSignal = new MinSignal();\nexport const stopAnimationEndedSignal = new MinSignal();\n\nexport const lightCameraHelperSignal = new MinSignal();\nexport const lightCameraUpdateSignal = new MinSignal();\n","export enum AnimationStatus {\n\tNOT_STARTED = 'not-started',\n\tSTARTED = 'started',\n\tFREE = 'free',\n\tRESULT = 'result',\n\tRESULT_ANIMATION = 'result_animation',\n\tRESTART_ANIMATION = 'restart_animation',\n\tRESTART = 'restart',\n}\nexport enum AnimationResult {\n\tNONE = 'none',\n\tPAUSE = 'pause',\n\tSTOP = 'stop',\n\tCOMPLETED = 'completed',\n\tFAILED = 'failed',\n\tREPLAY = 'replay',\n}\n\nexport enum SuccessLevel {\n\tONE = 1,\n\tTWO = 2,\n\tTHREE = 3,\n}\n\nexport interface StatusManagerState {\n\tstatus: AnimationStatus;\n\tstatusIndex: number;\n\tresult: AnimationResult;\n\tcompleteAnimationLevel: SuccessLevel | null;\n\n\tisStart: boolean;\n\tisFree: boolean;\n\tisResult: boolean;\n\tisResultAnimation: boolean;\n\thasNotStarted: boolean;\n\tisRestart: boolean;\n\tisReplayResult: boolean;\n\tisSuccessResult: boolean;\n\tisFailResult: boolean;\n\tisStopped: boolean;\n\tstatusUpdateQueue: (() => void)[];\n}\n","import { properties } from '../core/properties';\nimport settings from '../core/settings';\nimport { heroBlocks as blocksVisual } from '../visuals/hero/hero';\n\nimport { blocks } from './systemManager';\nimport { gameEndedSignal, stateSignal } from './signals';\nimport { AnimationResult, AnimationStatus, StatusManagerState, SuccessLevel } from '../../types/stateManager';\n\nexport const PREVENT_CYCLE_STATES = [AnimationStatus.NOT_STARTED, AnimationStatus.RESTART_ANIMATION, AnimationStatus.RESTART, AnimationStatus.STARTED];\nconst statusOrder = Object.values(AnimationStatus);\n\nexport const resetCycleResults = [AnimationResult.FAILED, AnimationResult.COMPLETED];\n\nlet statusIndex: StatusManagerState['statusIndex'] = 0;\nlet status: StatusManagerState['status'] = statusOrder[statusIndex];\nlet hasNotStarted: StatusManagerState['hasNotStarted'] = true;\nlet isStart: StatusManagerState['isStart'] = false;\nlet isFree: StatusManagerState['isFree'] = false;\nlet isResult: StatusManagerState['isResult'] = false;\nlet isResultAnimation: StatusManagerState['isResultAnimation'] = false;\nlet isRestart: StatusManagerState['isRestart'] = false;\nlet isReplayResult: StatusManagerState['isReplayResult'] = false;\nlet isSuccessResult: StatusManagerState['isSuccessResult'] = false;\nlet isFailResult: StatusManagerState['isFailResult'] = false;\nlet isStopped: StatusManagerState['isStopped'] = false;\nlet result: StatusManagerState['result'] = AnimationResult.NONE;\nconst statusUpdateQueue: StatusManagerState['statusUpdateQueue'] = [];\nlet completeAnimationLevel: StatusManagerState['completeAnimationLevel'] = SuccessLevel.ONE;\n\nconst StateManager = () => {\n\tfunction updateAfterCycle() {\n\t\tif (properties.errorBlock) {\n\t\t\tif (properties.errorBlock.isErrorBlockFalling || properties.errorBlock.errorLifeCycle < properties.errorBlockMaxLifeCycle) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (isStart) {\n\t\t\tsetFree();\n\t\t}\n\t\tif (isResult) {\n\t\t\tsetResultAnimation();\n\t\t}\n\n\t\tconst callback = statusUpdateQueue.shift();\n\t\tcallback?.();\n\t}\n\n\tfunction updateFlags() {\n\t\thasNotStarted = status === AnimationStatus.NOT_STARTED;\n\t\tisStart = status === AnimationStatus.STARTED;\n\t\tisFree = status === AnimationStatus.FREE;\n\t\tisResult = status === AnimationStatus.RESULT;\n\t\tisResultAnimation = status === AnimationStatus.RESULT_ANIMATION;\n\t\tisRestart = status === AnimationStatus.RESTART;\n\t\tisReplayResult = (isResult || isResultAnimation) && result === AnimationResult.REPLAY;\n\t\tisSuccessResult = (isResult || isResultAnimation) && result === AnimationResult.COMPLETED;\n\t\tisFailResult = (isResult || isResultAnimation) && result === AnimationResult.FAILED;\n\t\tisStopped = (isResult || isResultAnimation) && result === AnimationResult.STOP;\n\t}\n\n\tfunction _canUpdateStatus(newStatus, hasResult = false, isReplay = false) {\n\t\tif (!properties.showVisual || !properties.canvas) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (isReplay && statusIndex === 0) {\n\t\t\tstatusIndex = 2;\n\t\t}\n\t\tconst newStateIndex = statusOrder.indexOf(newStatus);\n\t\tconst nextStatusIndexMatches = (statusIndex + 1) % statusOrder.length === newStateIndex;\n\n\t\tif (nextStatusIndexMatches) {\n\t\t\tstatusIndex = newStateIndex;\n\t\t\tstatus = statusOrder[statusIndex];\n\t\t\tif (!hasResult) {\n\t\t\t\tupdateFlags();\n\t\t\t\tstateSignal.dispatch(status, result);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction _updateStatusAndResult({\n\t\tstatus: newStatus,\n\t\tresult: newResult,\n\t\tanimationStyle,\n\t}: {\n\t\tstatus: AnimationStatus;\n\t\tresult: AnimationResult;\n\t\tanimationStyle: SuccessLevel | null;\n\t}) {\n\t\tif (_canUpdateStatus(newStatus, true, newResult === AnimationResult.REPLAY)) {\n\t\t\tif (properties.errorBlock && !properties.errorBlock.isErrorBlockFalling) {\n\t\t\t\tproperties.errorBlock.preventErrorBlockFallAnimation();\n\t\t\t\tproperties.errorBlock = null;\n\t\t\t}\n\n\t\t\tresult = newResult;\n\t\t\tcompleteAnimationLevel = animationStyle;\n\n\t\t\tupdateFlags();\n\t\t\tstateSignal.dispatch(status, result, completeAnimationLevel);\n\t\t}\n\t}\n\n\tfunction set(id: string, isReplay = false) {\n\t\tconst actions = {\n\t\t\tstart: () => setStart(),\n\t\t\tfree: () => setFree(),\n\t\t\tpause: () => setPause(),\n\t\t\tresume: () => setResume(),\n\t\t\tstop: () => setStop(),\n\t\t\tfail: () => setFail(),\n\t\t\tresultAnimation: () => setResultAnimation(),\n\t\t\trestartAnimation: () => setRestartAnimation(),\n\t\t\trestart: () => setRestart(),\n\t\t\tshowVisual: () => showVisual(),\n\t\t};\n\t\tconst successActions = {\n\t\t\tsuccess: (isReplay?: boolean) => setComplete(isReplay),\n\t\t\tsuccess2: (isReplay?: boolean) => setComplete2(isReplay),\n\t\t\tsuccess3: (isReplay?: boolean) => setComplete3(isReplay),\n\t\t};\n\t\tactions[id]?.();\n\t\tsuccessActions[id]?.(isReplay);\n\t}\n\n\tfunction showVisual() {\n\t\tproperties.showVisual = true;\n\t}\n\n\tfunction _queueStatusUpdate({\n\t\tstatus,\n\t\tresult = null,\n\t\tanimationStyle = null,\n\t}: {\n\t\tstatus: AnimationStatus;\n\t\tresult?: AnimationResult | null;\n\t\tanimationStyle?: SuccessLevel | null;\n\t}) {\n\t\tif (properties.errorBlock && properties.errorBlock?.errorFallAnimationTime < 1) {\n\t\t\tconst logicBlock = blocks?.find((block) => block?.id === properties.errorBlock?.id);\n\t\t\tif (logicBlock) {\n\t\t\t\tlogicBlock.isErrorBlock = false;\n\t\t\t\tblocksVisual.resetBlockFromLogicBlock(logicBlock);\n\t\t\t}\n\t\t\tproperties.errorBlock = null;\n\t\t}\n\n\t\tstatusUpdateQueue.push(() => (result ? _updateStatusAndResult({ status, result, animationStyle }) : _canUpdateStatus(status)));\n\t}\n\n\tfunction reset() {\n\t\t_queueStatusUpdate({ status: AnimationStatus.NOT_STARTED, result: AnimationResult.NONE });\n\t}\n\n\tfunction setStart() {\n\t\t_queueStatusUpdate({ status: AnimationStatus.STARTED });\n\t}\n\n\tfunction setFree() {\n\t\t_queueStatusUpdate({ status: AnimationStatus.FREE });\n\t}\n\n\tfunction setPause() {\n\t\tproperties.isPaused = true;\n\t}\n\n\tfunction setResume() {\n\t\tproperties.isPaused = false;\n\t}\n\n\tfunction setStop() {\n\t\t_queueStatusUpdate({ status: AnimationStatus.RESULT, result: AnimationResult.STOP });\n\t}\n\n\tfunction setComplete(isReplay = false) {\n\t\tconst result = isReplay && hasNotStarted ? AnimationResult.REPLAY : AnimationResult.COMPLETED;\n\t\t_queueStatusUpdate({ status: AnimationStatus.RESULT, result, animationStyle: SuccessLevel.ONE });\n\t}\n\n\tfunction setComplete2(isReplay = false) {\n\t\tconst result = isReplay && hasNotStarted ? AnimationResult.REPLAY : AnimationResult.COMPLETED;\n\t\t_queueStatusUpdate({ status: AnimationStatus.RESULT, result, animationStyle: SuccessLevel.TWO });\n\t}\n\n\tfunction setComplete3(isReplay = false) {\n\t\tconst result = isReplay && hasNotStarted ? AnimationResult.REPLAY : AnimationResult.COMPLETED;\n\n\t\t_queueStatusUpdate({ status: AnimationStatus.RESULT, result, animationStyle: SuccessLevel.THREE });\n\t}\n\n\tfunction setFail() {\n\t\t_queueStatusUpdate({ status: AnimationStatus.RESULT, result: AnimationResult.FAILED });\n\t}\n\n\tfunction setResultAnimation() {\n\t\t_queueStatusUpdate({ status: AnimationStatus.RESULT_ANIMATION });\n\t}\n\n\tfunction setRestartAnimation() {\n\t\t_queueStatusUpdate({ status: AnimationStatus.RESTART_ANIMATION });\n\t}\n\n\tfunction setRestart() {\n\t\tstatusUpdateQueue.push(() => {\n\t\t\tif (_canUpdateStatus(AnimationStatus.RESTART)) {\n\t\t\t\tgameEndedSignal.dispatch();\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction init() {\n\t\tupdateFlags();\n\n\t\tif (settings.AUTO_START) {\n\t\t\tsetStart();\n\t\t}\n\t}\n\treturn {\n\t\tinit,\n\t\tupdateAfterCycle,\n\t\tset,\n\t\tshowVisual,\n\t\treset,\n\t\tsetStart,\n\t\tsetRestartAnimation,\n\t\tsetRestart,\n\t};\n};\n\nconst stateManager = StateManager();\n\nexport {\n\tstateManager,\n\tstatusIndex,\n\tstatus,\n\thasNotStarted,\n\tisFree,\n\tisResult,\n\tisResultAnimation,\n\tisRestart,\n\tisReplayResult,\n\tisSuccessResult,\n\tisFailResult,\n\tisStopped,\n\tresult,\n\tstatusUpdateQueue,\n};\n","import { properties } from '../core/properties';\nimport math from '../utils/math';\nimport { customEasing } from '../utils/ease';\nimport { isFree, isResult, isResultAnimation } from './stateManager';\nimport { BlockType } from '../../types/block';\n\nexport default class Block {\n\tid: BlockType['id'] = -1;\n\tisMoving: BlockType['isMoving'] = false;\n\thasBeenSpawned: BlockType['hasBeenSpawned'] = false;\n\thasAnimationEnded: BlockType['hasAnimationEnded'] = false;\n\thasBeenEvaluated: BlockType['hasBeenEvaluated'] = false;\n\tcurrentTile: BlockType['currentTile'] = null;\n\ttargetTile: BlockType['targetTile'] = null;\n\tmoveAnimationRatio: BlockType['moveAnimationRatio'] = 0;\n\tspawnAnimationRatio: BlockType['spawnAnimationRatio'] = 0;\n\tspawnAnimationRatioUnclamped: BlockType['spawnAnimationRatioUnclamped'] = -Math.random();\n\teasedAnimationRatio: BlockType['easedAnimationRatio'] = 0;\n\n\trandomVector: BlockType['randomVector'] = {\n\t\tx: Math.random() - 0.5,\n\t\ty: Math.random() - 0.5,\n\t};\n\n\tlifeCycle: BlockType['lifeCycle'] = 0;\n\teasingFunction: BlockType['easingFunction'] = null;\n\terrorLifeCycle: BlockType['errorLifeCycle'] = 0;\n\tisErrorBlock: BlockType['isErrorBlock'] = false;\n\terrorPreFallAnimationTime: BlockType['errorPreFallAnimationTime'] = 0;\n\terrorPreFallAnimationTimeScale: BlockType['errorPreFallAnimationTimeScale'] = 0;\n\terrorFallAnimationTime: BlockType['errorFallAnimationTime'] = 0;\n\tisErrorBlockFalling: BlockType['isErrorBlockFalling'] = false;\n\tskipFallAnimation: BlockType['skipFallAnimation'] = false;\n\n\tconstructor(id) {\n\t\tthis.id = id;\n\t\tthis.init();\n\t}\n\n\tinit() {\n\t\tthis._setNewEasingFunction();\n\t}\n\n\t_setNewEasingFunction() {\n\t\tconst rand = Math.random();\n\t\tconst thresh = 0.25;\n\t\tthis.easingFunction = (x) => customEasing(math.fit(x, rand * thresh, rand * thresh + (1 - thresh), 0, 1));\n\t}\n\n\tupdateTile() {\n\t\tif (this.currentTile) {\n\t\t\tthis.currentTile.isOccupied = true;\n\t\t\tthis.currentTile.willBeOccupied = false;\n\t\t}\n\t}\n\n\t_findBestTile(neighbours, isFree) {\n\t\treturn neighbours.find((tile) => {\n\t\t\tif (tile.isOccupied || tile.willBeOccupied || tile.isMain) return false;\n\t\t\treturn isFree || (this.currentTile?.priority ?? 0) >= tile.priority;\n\t\t});\n\t}\n\n\tmoveToNextTile(isFree = false, animationDelay = 0) {\n\t\tthis.hasBeenEvaluated = true;\n\t\tthis.moveAnimationRatio = -animationDelay * (this.isErrorBlock ? 0 : 1);\n\n\t\tif (!this.currentTile) return;\n\t\tif (this.isErrorBlock) {\n\t\t\tthis.isMoving = true;\n\t\t\tthis.targetTile = this.currentTile;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.currentTile.shuffleReachableNeighbours();\n\t\tconst neighbours = isFree ? this.currentTile.reachableNeighbours : this.currentTile.prioritySortedReachableNeighbours;\n\n\t\tconst bestTile = this._findBestTile(neighbours, isFree);\n\n\t\tif (bestTile && (!this.currentTile.isMain || Math.random() <= 0.8)) {\n\t\t\tthis.targetTile = bestTile;\n\t\t\tif (this.targetTile) {\n\t\t\t\tthis.targetTile.willBeOccupied = true;\n\t\t\t}\n\t\t\tthis.isMoving = true;\n\t\t} else {\n\t\t\tthis.hasAnimationEnded = true;\n\t\t}\n\t}\n\n\tresetAfterCycle() {\n\t\tthis.hasBeenEvaluated = false;\n\t\tthis.hasAnimationEnded = false;\n\t\tthis.moveAnimationRatio = 0;\n\t\tthis.easedAnimationRatio = 0;\n\n\t\tthis.isMoving = false;\n\t\tthis.lifeCycle++;\n\n\t\tif (this.isErrorBlock && !this.skipFallAnimation) {\n\t\t\tthis.errorLifeCycle++;\n\t\t\tthis.isErrorBlockFalling = this.errorLifeCycle >= properties.errorBlockMaxLifeCycle - 1;\n\t\t}\n\n\t\tif (this.currentTile?.isBorder && !properties.errorBlock && Math.random() < 0.5 && properties.activeBlocksCount >= properties.minSpawnedBlocksForTheErrorBlock && isFree) {\n\t\t\tproperties.errorBlock = this;\n\t\t\tthis.isErrorBlock = true;\n\t\t}\n\n\t\tthis._setNewEasingFunction();\n\t\tthis.updateTile();\n\t}\n\n\treset(keepId = false) {\n\t\tif (this.isErrorBlock) {\n\t\t\tthis.errorLifeCycle = 0;\n\t\t\tthis.isErrorBlock = false;\n\t\t\tthis.currentTile?.reset();\n\t\t\tthis.targetTile?.reset();\n\t\t\tthis.errorFallAnimationTime = 0;\n\t\t\tthis.isErrorBlockFalling = false;\n\t\t\tthis.errorPreFallAnimationTime = 0;\n\t\t\tthis.errorPreFallAnimationTimeScale = 0;\n\t\t\tthis.errorFallAnimationTime = 0;\n\t\t\tthis.skipFallAnimation = false;\n\t\t}\n\t\tthis.id = keepId ? this.id : -1;\n\t\tthis.isMoving = false;\n\t\tthis.hasBeenSpawned = false;\n\t\tthis.hasAnimationEnded = false;\n\t\tthis.hasBeenEvaluated = false;\n\t\tthis.currentTile = null;\n\t\tthis.targetTile = null;\n\t\tthis.moveAnimationRatio = 0;\n\t\tthis.spawnAnimationRatio = 0;\n\t\tthis.spawnAnimationRatioUnclamped = -Math.random();\n\t\tthis.easedAnimationRatio = 0;\n\t\tthis.lifeCycle = 0;\n\t}\n\tpreventErrorBlockFallAnimation() {\n\t\tthis.skipFallAnimation = true;\n\t}\n\t_onMovementEnd() {\n\t\tthis.moveAnimationRatio = 1;\n\n\t\tif (this.currentTile) {\n\t\t\tthis.currentTile.isOccupied = false;\n\t\t}\n\t\tthis.currentTile = this.targetTile;\n\t\tthis.targetTile = null;\n\n\t\tthis.hasAnimationEnded = true;\n\n\t\tthis.updateTile();\n\t}\n\n\t_updateSpawnAnimation(dt: number) {\n\t\tthis.spawnAnimationRatioUnclamped += 0.75 * properties.animationSpeed * dt;\n\t\tthis.spawnAnimationRatio = Math.max(0, Math.min(1, this.spawnAnimationRatioUnclamped));\n\n\t\tif (this.spawnAnimationRatio === 1) {\n\t\t\tthis.hasBeenSpawned = true;\n\t\t}\n\t}\n\n\t_updateMovement(dt: number) {\n\t\tif ((this.isMoving && !this.hasAnimationEnded) || isResultAnimation) {\n\t\t\tthis.moveAnimationRatio = Math.min(1, this.moveAnimationRatio + properties.animationSpeed * dt * (this.isErrorBlock ? 0.7 : 1));\n\t\t\tthis.easedAnimationRatio = this.easingFunction?.(Math.max(0, this.moveAnimationRatio)) || 0;\n\n\t\t\tif (this.easedAnimationRatio === 1 && (isFree || isResult)) {\n\t\t\t\tthis._onMovementEnd();\n\t\t\t}\n\t\t}\n\t}\n\n\t_updateTileRatios() {\n\t\tconst clampedMoveAnimationRatio = Math.max(0, Math.min(1, this.hasBeenSpawned ? this.easedAnimationRatio : this.spawnAnimationRatio));\n\n\t\tif (this.currentTile) {\n\t\t\tthis.currentTile.activeRatio = this.hasBeenSpawned ? (this.targetTile ? 1 - clampedMoveAnimationRatio : 1) : this.spawnAnimationRatio;\n\t\t}\n\t\tif (this.targetTile) {\n\t\t\tthis.targetTile.activeRatio = clampedMoveAnimationRatio;\n\t\t}\n\n\t\tif (this.isErrorBlock && this.isErrorBlockFalling) {\n\t\t\tif (this.currentTile) {\n\t\t\t\tthis.currentTile.activeRatio = 0;\n\t\t\t}\n\t\t\tif (this.targetTile) {\n\t\t\t\tthis.targetTile.activeRatio = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tupdate(dt: number) {\n\t\tif (!this.hasBeenSpawned) {\n\t\t\tthis._updateSpawnAnimation(dt);\n\t\t} else {\n\t\t\tthis._updateMovement(dt);\n\t\t}\n\n\t\tif (this.isErrorBlockFalling) {\n\t\t\tthis.errorFallAnimationTime = this.errorFallAnimationTime + 3 * properties.animationSpeed * dt;\n\t\t}\n\t\tif (this.isErrorBlock) {\n\t\t\tthis.errorPreFallAnimationTimeScale = this.errorPreFallAnimationTimeScale + 3 * dt;\n\t\t\tthis.errorPreFallAnimationTimeScale = Math.min(20, this.errorPreFallAnimationTimeScale);\n\t\t\tthis.errorPreFallAnimationTime = this.errorPreFallAnimationTime + this.errorPreFallAnimationTimeScale * dt;\n\t\t\tif (this.skipFallAnimation) {\n\t\t\t\tthis.errorPreFallAnimationTime = 0;\n\t\t\t\tthis.errorPreFallAnimationTimeScale = 0;\n\t\t\t}\n\t\t}\n\n\t\tthis._updateTileRatios();\n\t}\n}\n","import math from '../utils/math';\nimport { stateSignal, stopAnimationEndedSignal } from './signals';\nimport { AnimationResult, AnimationStatus } from '../../types/stateManager';\n\nlet isActive = false;\nlet stopRatio = 0;\nconst stopAnimationDuration = 2.5; // seconds\nlet stopSpawnRatio = 0;\nlet stopPushDownRatio = 0;\n\nconst StopAnimationManager = () => {\n\tfunction init() {\n\t\tstateSignal.add((status, result) => {\n\t\t\tif (status === AnimationStatus.RESULT && result === AnimationResult.STOP) {\n\t\t\t\tisActive = true;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction resetRatios() {\n\t\tstopRatio = 0;\n\t\tstopPushDownRatio = 0;\n\t\tstopSpawnRatio = 0;\n\t\tisActive = false;\n\t}\n\n\tfunction update(dt: number) {\n\t\tstopRatio += ((isActive ? 1 : 0) * dt) / stopAnimationDuration;\n\t\tstopRatio = math.clamp(stopRatio, 0, 1);\n\n\t\tstopSpawnRatio = math.fit(stopRatio, 0, 0.5, 0, 2.5);\n\t\tstopPushDownRatio = math.fit(stopRatio, 0.4, 0.65, 0, 1);\n\n\t\tif (stopRatio >= 1) {\n\t\t\tstopAnimationEndedSignal.dispatch();\n\t\t\tresetRatios();\n\t\t}\n\t}\n\n\treturn {\n\t\tinit,\n\t\tupdate,\n\t\tresetRatios,\n\t};\n};\nconst stopAnimationManager = StopAnimationManager();\nexport { stopAnimationManager, stopSpawnRatio, stopPushDownRatio, stopAnimationDuration };\n","import math from '../utils/math';\n\nimport { errorAnimationEndedSignal, stateSignal } from './signals';\nimport { AnimationResult, AnimationStatus } from '../../types/stateManager';\n\nlet isActive = false;\nlet failRatio = 0;\nconst errorAnimationDuration = 3.5; // seconds\nlet failShakeRatio = 0;\nlet failFloatingCubesRatio = 0;\nlet failSpawnRatio = 0;\nlet failPushDownRatio = 0;\n\nconst ErrorAnimationManager = () => {\n\tfunction init() {\n\t\tstateSignal.add((status, result) => {\n\t\t\tif (status === AnimationStatus.RESULT && result === AnimationResult.FAILED) {\n\t\t\t\tisActive = true;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction resetRatios() {\n\t\tfailRatio = 0;\n\t\tfailShakeRatio = 0;\n\t\tfailFloatingCubesRatio = 0;\n\t\tfailPushDownRatio = 0;\n\t\tfailSpawnRatio = 0;\n\t\tisActive = false;\n\t}\n\n\tfunction update(dt: number) {\n\t\tfailRatio += ((isActive ? 1 : 0) * dt) / errorAnimationDuration;\n\t\tfailRatio = math.clamp(failRatio, 0, 1);\n\n\t\tfailShakeRatio = math.fit(failRatio, 0.0, 0.3, 0, 1);\n\t\tfailFloatingCubesRatio = math.fit(failRatio, 0.35, 0.65, 0, 1);\n\t\tfailSpawnRatio = math.fit(failRatio, 0.3, 0.55, 0, 2.5);\n\t\tfailPushDownRatio = math.fit(failRatio, 0.6, 0.8, 0, 1);\n\t\tif (failRatio >= 1) {\n\t\t\terrorAnimationEndedSignal.dispatch();\n\t\t\tresetRatios();\n\t\t}\n\t}\n\n\treturn {\n\t\tinit,\n\t\tresetRatios,\n\t\tupdate,\n\t};\n};\nconst errorAnimationManager = ErrorAnimationManager();\nexport { errorAnimationManager, failShakeRatio, failFloatingCubesRatio, failSpawnRatio, failPushDownRatio, errorAnimationDuration };\n","import math from '../utils/math';\n\nimport { completeAnimationEndedSignal, stateSignal } from './signals';\nimport { AnimationResult, AnimationStatus, SuccessLevel } from '../../types/stateManager';\n\nlet currentAnimationStyle: SuccessLevel | null;\nlet successRatio = 0;\nconst successAnimationDuration = 6.5; // seconds\nlet towerRotationRatio = 0;\nlet floatingCoinsRatio = 0;\nlet floatingCubesRatio = 0;\nlet vortexCoinsRatio = 0;\nlet successPushDownRatio = 0;\nlet successColorTowerRatio = 0;\nlet floatingCubesDisplacement = 1;\n\nconst SuccessAnimationManager = () => {\n\tfunction init() {\n\t\tstateSignal.add((status, result, completeAnimationLevel) => {\n\t\t\tif (status === AnimationStatus.RESULT && (result === AnimationResult.COMPLETED || result === AnimationResult.REPLAY)) {\n\t\t\t\t_triggerNewAnimation(completeAnimationLevel);\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction _triggerNewAnimation(animationStyle) {\n\t\tcurrentAnimationStyle = animationStyle;\n\t}\n\n\tfunction resetRatios() {\n\t\tsuccessRatio = 0;\n\t\ttowerRotationRatio = 0;\n\t\tfloatingCoinsRatio = 0;\n\t\tfloatingCubesRatio = 0;\n\t\tvortexCoinsRatio = 0;\n\t\tsuccessPushDownRatio = 0;\n\t\tsuccessColorTowerRatio = 0;\n\t\tfloatingCubesDisplacement = 1;\n\n\t\tcurrentAnimationStyle = null;\n\t}\n\n\tfunction _updateRatios1() {\n\t\tfloatingCubesDisplacement = 1;\n\t\ttowerRotationRatio = 0;\n\t\tfloatingCoinsRatio = 0;\n\t\tfloatingCubesRatio = math.fit(successRatio, 0.2, 0.49, 0, 1.2);\n\t\tsuccessPushDownRatio = math.fit(successRatio, 0.45, 0.55, 0, 1);\n\t\tsuccessColorTowerRatio = math.fit(successRatio, 0.45, 0.7, 0, 1);\n\t\tvortexCoinsRatio = math.fit(successRatio, 0.55, 1, 0, 1);\n\t}\n\n\tfunction _updateRatios2() {\n\t\tfloatingCubesDisplacement = 1.5;\n\t\tfloatingCoinsRatio = 0;\n\t\ttowerRotationRatio = math.fit(successRatio, 0.1, 0.45, 0, 1);\n\t\tfloatingCubesRatio = math.fit(successRatio, 0.15, 0.49, 0, 1.2);\n\t\tsuccessPushDownRatio = math.fit(successRatio, 0.45, 0.55, 0, 1);\n\t\tsuccessColorTowerRatio = math.fit(successRatio, 0.45, 0.7, 0, 1);\n\t\tvortexCoinsRatio = math.fit(successRatio, 0.55, 1, 0, 1);\n\t}\n\n\tfunction _updateRatios3() {\n\t\tfloatingCubesDisplacement = 2;\n\t\ttowerRotationRatio = math.fit(successRatio, 0.1, 0.5, 0, 1);\n\t\tfloatingCoinsRatio = math.fit(successRatio, 0.2, 0.51, 0, 1);\n\t\tfloatingCubesRatio = math.fit(successRatio, 0.2, 0.49, 0, 1.2);\n\t\tsuccessPushDownRatio = math.fit(successRatio, 0.45, 0.55, 0, 1);\n\t\tsuccessColorTowerRatio = math.fit(successRatio, 0.45, 0.7, 0, 1);\n\t\tvortexCoinsRatio = math.fit(successRatio, 0.6, 1, 0, 1);\n\t}\n\n\tfunction update(dt: number) {\n\t\tsuccessRatio += ((currentAnimationStyle ? 1 : 0) * dt) / successAnimationDuration;\n\t\tsuccessRatio = math.clamp(successRatio, 0, 1);\n\n\t\tswitch (currentAnimationStyle) {\n\t\t\tcase SuccessLevel.ONE:\n\t\t\t\t_updateRatios1();\n\t\t\t\tbreak;\n\t\t\tcase SuccessLevel.TWO:\n\t\t\t\t_updateRatios2();\n\t\t\t\tbreak;\n\t\t\tcase SuccessLevel.THREE:\n\t\t\t\t_updateRatios3();\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (successRatio >= 1) {\n\t\t\tcompleteAnimationEndedSignal.dispatch();\n\t\t\tresetRatios();\n\t\t}\n\t}\n\n\treturn {\n\t\tinit,\n\t\tupdate,\n\t\tresetRatios,\n\t};\n};\n\nconst successAnimationManager = SuccessAnimationManager();\nexport {\n\tsuccessAnimationManager,\n\tsuccessRatio,\n\ttowerRotationRatio,\n\tfloatingCoinsRatio,\n\tfloatingCubesRatio,\n\tvortexCoinsRatio,\n\tsuccessPushDownRatio,\n\tsuccessColorTowerRatio,\n\tfloatingCubesDisplacement,\n\tsuccessAnimationDuration,\n};\n","import math from '../utils/math';\nimport { properties } from '../core/properties';\nimport { heroBlocks as blocksVisual } from '../visuals/hero/hero';\n\nimport {\n\thasNotStarted,\n\tisFailResult,\n\tisFree,\n\tisReplayResult,\n\tisRestart,\n\tisResult,\n\tisResultAnimation,\n\tisStopped,\n\tisSuccessResult,\n\tPREVENT_CYCLE_STATES,\n\tresetCycleResults,\n\tresult,\n\tstateManager,\n\tstatus,\n} from './stateManager';\nimport { board, mainTile, TOTAL_TILES } from './board';\nimport Block from './Block';\n\nimport { stopAnimationManager } from './stopAnimationManager';\nimport { errorAnimationManager } from './errorAnimationManager';\nimport { successAnimationManager } from '../logic/successAnimationManager';\nimport { completeAnimationEndedSignal, endCycleSignal, errorAnimationEndedSignal, spawnSignal, stopAnimationEndedSignal } from '../logic/signals';\nimport { SystemManagerState } from '../../types/systemManager';\n\nlet firstStartAnimationRatio: SystemManagerState['firstStartAnimationRatio'] = 0;\nlet blocks: SystemManagerState['blocks'] = [];\nlet lastSpawnedBlock: SystemManagerState['lastSpawnedBlock'] = null;\nlet cycleIndex: SystemManagerState['cycleIndex'] = 0;\nlet animationSpeedRatio: SystemManagerState['animationSpeedRatio'] = 0;\nlet previousSuccessBlocksAnimationRatio: SystemManagerState['previousSuccessBlocksAnimationRatio'] = 0;\n\nconst SystemManager = () => {\n\tfunction _spawnBlock() {\n\t\tif (_shouldPreventSpawn()) return;\n\t\tif (isSuccessResult || isReplayResult) {\n\t\t\t_spawnMultipleBlocks();\n\t\t} else {\n\t\t\t_spawnSingleBlock();\n\t\t}\n\n\t\tif (blocks.length === properties.maxFreeBlocksCount && isFree) return;\n\t\tspawnSignal.dispatch();\n\t}\n\n\tfunction _shouldPreventSpawn() {\n\t\treturn isFailResult || result === 'failed' || isStopped || blocks.length >= TOTAL_TILES || (mainTile?.isOccupied && !isSuccessResult && !isReplayResult);\n\t}\n\n\tfunction _spawnMultipleBlocks() {\n\t\tlet blocksToSpawn = TOTAL_TILES - properties.activeBlocksCount;\n\t\tif (properties.errorBlock) {\n\t\t\tif (properties.errorBlock.currentTile) {\n\t\t\t\tproperties.errorBlock.currentTile.isOccupied = false;\n\t\t\t}\n\t\t\tblocksToSpawn += 1;\n\t\t}\n\t\tfor (let i = 0; i < blocksToSpawn; i++) {\n\t\t\tconst newTile = board.getRandomFreeTile();\n\t\t\tif (newTile) {\n\t\t\t\tconst block = new Block(blocks.length);\n\t\t\t\tblock.currentTile = newTile;\n\t\t\t\tblock.init();\n\t\t\t\tblock.updateTile();\n\t\t\t\tblocks = [block, ...blocks];\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _spawnSingleBlock() {\n\t\tlet block: Block | null | undefined = null;\n\n\t\tconst needsErrorBlockReplacement = Boolean(properties.errorBlock && properties.errorBlock.errorLifeCycle >= properties.errorBlockMaxLifeCycle);\n\t\tconst canAddNewBlock = Boolean(blocks.length < properties.maxFreeBlocksCount && isFree);\n\t\tif (!needsErrorBlockReplacement) {\n\t\t\tif (canAddNewBlock) {\n\t\t\t\tblock = new Block(blocks.length);\n\t\t\t\tlastSpawnedBlock = block;\n\t\t\t}\n\t\t} else {\n\t\t\tproperties.errorBlock?.reset(true);\n\t\t\tblocksVisual.resetBlockFromLogicBlock(properties.errorBlock);\n\t\t\tblock = properties.errorBlock;\n\t\t\tproperties.errorBlock = null;\n\t\t}\n\t\tif (block) {\n\t\t\tblock.currentTile = mainTile;\n\t\t\tblock.init();\n\t\t\tblock.updateTile();\n\t\t}\n\t}\n\n\tfunction _startNewCycle() {\n\t\tstateManager.updateAfterCycle();\n\t\tif (PREVENT_CYCLE_STATES.includes(status)) return;\n\n\t\tif (lastSpawnedBlock) {\n\t\t\tblocks = [lastSpawnedBlock, ...blocks];\n\t\t\tlastSpawnedBlock = null;\n\t\t}\n\t\tproperties.activeBlocksCount = blocks.length;\n\n\t\tif (isFailResult || isStopped) return;\n\n\t\tblocks.forEach((block) => block.resetAfterCycle());\n\n\t\tendCycleSignal.dispatch();\n\t\tcycleIndex++;\n\n\t\t_spawnBlock();\n\t\t_calculatePaths();\n\t}\n\n\tfunction _calculatePaths() {\n\t\tif (lastSpawnedBlock?.hasBeenSpawned) {\n\t\t\tlastSpawnedBlock.moveToNextTile(isFree, 0);\n\t\t}\n\n\t\tconst _isFree = cycleIndex % 2 === 0 ? true : properties.activeBlocksCount < properties.maxFreeBlocksCount - 1;\n\n\t\tblocks.forEach((block, index) => {\n\t\t\tif (!block.hasBeenEvaluated && block.hasBeenSpawned) {\n\t\t\t\tblock.moveToNextTile(_isFree, index * 0.2);\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction reset() {\n\t\tblocks.forEach((block) => block.reset());\n\t\tblocksVisual.reset();\n\t\tboard.reset();\n\n\t\tblocks = [];\n\t\tlastSpawnedBlock = null;\n\t\tcycleIndex = 0;\n\n\t\tanimationSpeedRatio = 0;\n\n\t\tconst needsRestart = resetCycleResults.includes(result);\n\t\tstateManager.reset();\n\t\t_startNewCycle();\n\n\t\tif (needsRestart) {\n\t\t\tstateManager.setStart();\n\t\t}\n\n\t\tcompleteAnimationEndedSignal.remove(() => {\n\t\t\tstateManager.setRestart();\n\t\t\t_startNewCycle();\n\t\t\tpreviousSuccessBlocksAnimationRatio = 1;\n\t\t});\n\t\tstopAnimationEndedSignal.remove(() => {\n\t\t\tstateManager.setRestart();\n\t\t\treset();\n\t\t});\n\t\terrorAnimationEndedSignal.remove(() => {\n\t\t\tstateManager.setRestart();\n\t\t\t_startNewCycle();\n\t\t});\n\t}\n\n\tfunction _updateAnimationRatios(dt: number) {\n\t\tconst _isResult = isResult;\n\t\tfirstStartAnimationRatio = math.saturate(firstStartAnimationRatio + dt * (properties.showVisual ? 1 : 0));\n\t\tanimationSpeedRatio = Math.min(1, animationSpeedRatio + dt * (_isResult ? 1 : 0));\n\t\tpreviousSuccessBlocksAnimationRatio = math.saturate(previousSuccessBlocksAnimationRatio - dt / 1.5);\n\t}\n\n\tfunction _checkCycleCompletion() {\n\t\tlet isCycleComplete = true;\n\t\tif (lastSpawnedBlock) {\n\t\t\tisCycleComplete = Boolean(isCycleComplete && lastSpawnedBlock.hasBeenSpawned);\n\t\t}\n\n\t\tblocks.forEach((block) => {\n\t\t\tif (block.lifeCycle > 0) {\n\t\t\t\tisCycleComplete = Boolean(isCycleComplete && block.hasBeenEvaluated && block.hasAnimationEnded);\n\t\t\t} else {\n\t\t\t\tisCycleComplete = isCycleComplete && block.spawnAnimationRatio === 1;\n\t\t\t}\n\t\t});\n\n\t\treturn isCycleComplete || isResultAnimation || isFailResult || isStopped;\n\t}\n\n\tfunction update(dt: number) {\n\t\t_updateAnimationRatios(dt);\n\n\t\tsuccessAnimationManager.update(dt);\n\t\tstopAnimationManager.update(dt);\n\t\terrorAnimationManager.update(dt);\n\n\t\tif (hasNotStarted) {\n\t\t\t_startNewCycle();\n\t\t\treturn;\n\t\t}\n\n\t\tif (isRestart) {\n\t\t\treset();\n\t\t\treturn;\n\t\t}\n\n\t\tif (isResultAnimation) {\n\t\t\tstateManager.setRestartAnimation();\n\t\t}\n\n\t\tboard.preUpdate(dt);\n\t\tif (lastSpawnedBlock) {\n\t\t\tlastSpawnedBlock.update(dt);\n\t\t}\n\t\tblocks.forEach((block) => block.update(dt));\n\t\tboard.update(dt);\n\n\t\tconst isCycleComplete = _checkCycleCompletion();\n\n\t\tif (isCycleComplete) {\n\t\t\t_startNewCycle();\n\t\t}\n\t}\n\n\tfunction init() {\n\t\tstateManager.init();\n\t\tsuccessAnimationManager.init();\n\t\tstopAnimationManager.init();\n\t\terrorAnimationManager.init();\n\t\tboard.init();\n\n\t\tcompleteAnimationEndedSignal.add(() => {\n\t\t\tstateManager.setRestart();\n\t\t\t_startNewCycle();\n\t\t\tpreviousSuccessBlocksAnimationRatio = 1;\n\t\t});\n\t\tstopAnimationEndedSignal.add(() => {\n\t\t\tstateManager.setRestart();\n\t\t\treset();\n\t\t});\n\t\terrorAnimationEndedSignal.add(() => {\n\t\t\tstateManager.setRestart();\n\t\t\t_startNewCycle();\n\t\t});\n\t}\n\n\treturn {\n\t\tinit,\n\t\tupdate,\n\t\treset,\n\t};\n};\nconst game = SystemManager();\nexport default game;\nexport { firstStartAnimationRatio, blocks, lastSpawnedBlock, previousSuccessBlocksAnimationRatio };\n","export default \"#ifndef IS_BASE\\n    attribute vec3 instancePos;\\n    attribute vec4 instanceOrient;\\n    attribute float instanceShowRatio;\\n    attribute vec3 instanceSpinPivot;\\n    attribute vec4 instanceSpinOrient;\\n    attribute vec3 instanceColor;\\n    attribute float instanceIsActive;\\n    attribute vec2 instanceNextDirection;\\n    varying float v_clipY;\\n#endif\\n\\n#ifdef IS_DEPTH\\n    varying vec2 vHighPrecisionZW;\\n#else\\n    varying vec3 v_modelPosition;\\n    varying vec3 v_viewPosition;\\n    varying vec3 v_worldPosition;\\n    varying vec3 v_viewNormal;\\n    varying vec3 v_worldNormal;\\n    varying vec2 v_uv;\\n    varying float v_ao;\\n    varying vec3 v_color;\\n\\n    uniform sampler2D u_infoTexture;\\n    uniform sampler2D u_infoTextureLinear;\\n    uniform float u_endAnimationRatio;\\n    uniform float u_time;\\nuniform mat4 directionalShadowMatrix[1];\\nvarying vec4 vDirectionalShadowCoord[1];\\nvarying vec4 v_goboCoord;\\n\\nstruct DirectionalLightShadow {\\n    float shadowBias;\\n    float shadowNormalBias;\\n    float shadowRadius;\\n    vec2 shadowMapSize;\\n};\\n\\nuniform DirectionalLightShadow directionalLightShadows[1];\\n#endif\\n\\nvec3 qrotate(vec4 q, vec3 v) {\\n\\treturn v + 2. * cross(q.xyz, cross(q.xyz, v) + q.w * v);\\n}\\n\\nfloat linearstep(float edge0, float edge1, float x) {\\n    return  clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\\n}\\n\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\n\\nvoid main () {\\n    vec3 pos = position;\\n    vec3 nor = normal;\\n\\n    #ifndef IS_BASE\\n        pos.y += 1.01 * (instanceShowRatio - 1.0);\\n        v_clipY = pos.y + 0.51;\\n\\n        // local spin\\n        pos = qrotate(instanceSpinOrient, pos - instanceSpinPivot) + instanceSpinPivot;\\n        nor = qrotate(instanceSpinOrient, nor);\\n\\n        // global transform\\n        pos = qrotate(instanceOrient, pos) + instancePos;\\n        nor = qrotate(instanceOrient, nor);\\n    #endif\\n\\n    vec4 viewPos = modelViewMatrix * vec4(pos, 1.0);\\n    gl_Position = projectionMatrix * viewPos;\\n\\n    #ifndef IS_DEPTH\\n\\n        vec3 viewNormal = normalMatrix * nor;\\n        vec4 worldPosition = (modelMatrix * vec4(pos, 1.0));\\n\\n        v_modelPosition = position;\\n        v_viewPosition = -viewPos.xyz;\\n        v_worldPosition = worldPosition.xyz;\\n        v_viewNormal = normalMatrix * nor;\\n        v_worldNormal = inverseTransformDirection(viewNormal, viewMatrix);\\n\\n        #ifndef IS_BASE\\n            v_color = instanceColor;\\n        #endif\\n\\n    // Offsetting the position used for querying occlusion along the world normal can be used to reduce shadow acne.\\n    vec4 shadowWorldPosition;\\n\\n    #ifdef IS_BASE\\n    shadowWorldPosition = vec4((position - vec3(0., -2.5, 0.)) * 1.005 + vec3(0., -2.5, 0.), 1.);\\n    shadowWorldPosition = modelMatrix * shadowWorldPosition;\\n    #else\\n    shadowWorldPosition = vec4(position * 0.98, 1.);\\n    shadowWorldPosition.y += instanceShowRatio - 1.;\\n    shadowWorldPosition.xyz = qrotate(instanceSpinOrient, shadowWorldPosition.xyz - instanceSpinPivot) + instanceSpinPivot;\\n    shadowWorldPosition.xyz = qrotate(instanceOrient, shadowWorldPosition.xyz) + instancePos;\\n    shadowWorldPosition = modelMatrix * shadowWorldPosition;\\n    #endif\\n    vDirectionalShadowCoord[0] = directionalShadowMatrix[0] * shadowWorldPosition;\\n\\n    v_goboCoord = directionalShadowMatrix[0] * (0.2 * vec4(sin(u_time * 0.1), 0.0, cos(u_time * 0.15), 0.0) + worldPosition + vec4(v_worldNormal * directionalLightShadows[0].shadowNormalBias, 0. ));\\n\\n\\n    #ifndef IS_BASE\\n            v_uv = (instancePos.xz + 3.5) / 7.0;\\n        #else\\n            v_uv = (position.xz + 3.5) / 7.0;\\n        #endif\\n\\n        // ao\\n        float ao = 0.0;\\n        vec4 infoTexture = texture2D(u_infoTexture, vec2(1.0 - v_uv.y, v_uv.x));\\n\\n        #ifndef IS_BASE\\n\\n            float texel = 1.0 / 7.0;\\n\\n            vec2 infoTextureUv = vec2(1.0 - v_uv.y, v_uv.x);\\n            vec2 infoTextureUvNext = infoTextureUv + texel * vec2(instanceNextDirection.y, instanceNextDirection.x);\\n\\n            vec3 texelVec = vec3(texel, -texel, 0.0);\\n            float activeRatio = mix(1.0, infoTexture.x, instanceIsActive);\\n\\n            vec4 infoTextureTop = vec4(1.0);\\n            vec4 infoTextureRight = vec4(1.0);\\n            vec4 infoTextureBottom = vec4(1.0);\\n            vec4 infoTextureLeft = vec4(1.0);\\n\\n            if (instanceIsActive > 0.5) {\\n                infoTextureTop = mix(texture2D(u_infoTextureLinear, infoTextureUv + texelVec.xz), texture2D(u_infoTextureLinear, infoTextureUvNext + texelVec.xz), 1. - activeRatio);\\n                infoTextureRight = mix(texture2D(u_infoTextureLinear, infoTextureUv + texelVec.zx), texture2D(u_infoTextureLinear, infoTextureUvNext + texelVec.zx), 1. - activeRatio);\\n                infoTextureBottom = mix(texture2D(u_infoTextureLinear, infoTextureUv + texelVec.yz), texture2D(u_infoTextureLinear, infoTextureUvNext + texelVec.yz), 1. - activeRatio);\\n                infoTextureLeft = mix(texture2D(u_infoTextureLinear, infoTextureUv + texelVec.zy), texture2D(u_infoTextureLinear, infoTextureUvNext + texelVec.zy), 1. - activeRatio);\\n            }\\n\\n            float texel2 = texel * 2.0;\\n            ao = max(ao, v_uv.y < texel2 ? 0.0 : infoTextureTop.x * max(-nor.z, 0.0));\\n            ao = max(ao, v_uv.x > 1.0 - texel2 ? 0.0 : infoTextureRight.x * max(nor.x, 0.0));\\n            ao = max(ao, v_uv.y > 1.0 - texel2 ? 0.0 : infoTextureBottom.x * max(nor.z, 0.0));\\n            ao = max(ao, v_uv.x < texel2 ? 0.0 : infoTextureLeft.x * max(-nor.x, 0.0));\\n            ao = 1.0 - ao * 0.8;\\n            ao *= clamp(v_worldNormal.y * 0.5 + 0.5 + ao, 0.0, 1.0);\\n\\n        #else\\n\\n            float aoThreshold = 2.5;\\n            float depth = 0.03;\\n            ao = linearstep(aoThreshold - depth, aoThreshold, abs(v_modelPosition.x));\\n            ao += linearstep(aoThreshold - depth, aoThreshold, abs(v_modelPosition.z));\\n            aoThreshold = 0.5;\\n            ao += linearstep(aoThreshold + depth, aoThreshold, -v_modelPosition.y + depth * u_endAnimationRatio * 0.75);\\n            ao = min(1.0, ao);\\n\\n        #endif\\n\\n        v_ao = ao;\\n\\n    #else\\n\\n        vHighPrecisionZW = gl_Position.zw;\\n\\n    #endif\\n\\n}\\n\"","export default \"uniform vec3 u_lightPosition;\\nuniform sampler2D u_infoTexture;\\nuniform sampler2D u_infoTextureLinear;\\nuniform sampler2D u_goboTexture;\\nuniform float u_goboIntensity;\\n\\nuniform float u_endAnimationRatio;\\nuniform float u_time;\\n\\n#ifdef IS_BASE\\nuniform vec2 u_resolution;\\nuniform vec3 u_bgColor1;\\nuniform vec3 u_bgColor2;\\nuniform vec3 u_color;\\nuniform vec3 u_blocksColor;\\nuniform float u_yDisplacement;\\nuniform float u_successAnimationRatio;\\nuniform vec3 u_successColor;\\nuniform vec3 u_prevSuccessColor;\\n#endif\\n\\nvarying vec3 v_modelPosition;\\nvarying vec3 v_worldPosition;\\n\\nvarying vec3 v_viewNormal;\\nvarying vec3 v_worldNormal;\\n\\nvarying vec2 v_uv;\\n\\nvarying float v_ao;\\nvarying vec3 v_color;\\nvarying float v_clipY;\\n\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n\\nvec3 SRGBtoLinear(vec3 srgb) {\\n    return pow(srgb, vec3(2.2));\\n}\\n\\nvec3 linearToSRGB(vec3 color) {\\n    return pow(color, vec3(1.0 / 2.2));\\n}\\n\\nfloat linearstep(float edge0, float edge1, float x) {\\n    return  clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\\n}\\n\\nvec3 LinearToneMapping( vec3 color, float toneMappingExposure ) {\\n\\treturn saturate( toneMappingExposure * color );\\n}\\n\\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\n// this implementation of ACES is modified to accommodate a brighter viewing environment.\\n// the scale factor of 1/0.6 is subjective. see discussion in #19621.\\nvec3 ACESFilmicToneMapping( vec3 color, float toneMappingExposure ) {\\n\\n\\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ), // transposed from source\\n\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\n\\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ), // transposed from source\\n\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\n\\tcolor = ACESInputMat * color;\\n\\n\\t// Apply RRT and ODT\\n\\tcolor = RRTAndODTFit( color );\\n\\n\\tcolor = ACESOutputMat * color;\\n\\n\\t// Clamp to [0, 1]\\n\\treturn saturate( color );\\n}\\n\\nvec4 cubic(float v) {\\n    vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;\\n    vec4 s = n * n * n;\\n    float x = s.x;\\n    float y = s.y - 4.0 * s.x;\\n    float z = s.z - 4.0 * s.y + 6.0 * s.x;\\n    float w = 6.0 - x - y - z;\\n    return vec4(x, y, z, w);\\n}\\n\\n// https://stackoverflow.com/questions/13501081/efficient-bicubic-filtering-code-in-glsl\\nvec4 textureBicubic(sampler2D t, vec2 texCoords, vec2 textureSize) {\\n   vec2 invTexSize = 1.0 / textureSize;\\n   texCoords = texCoords * textureSize - 0.5;\\n\\n    vec2 fxy = fract(texCoords);\\n    texCoords -= fxy;\\n    vec4 xcubic = cubic(fxy.x);\\n    vec4 ycubic = cubic(fxy.y);\\n\\n    vec4 c = texCoords.xxyy + vec2 (-0.5, 1.5).xyxy;\\n\\n    vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);\\n    vec4 offset = c + vec4 (xcubic.yw, ycubic.yw) / s;\\n\\n    offset *= invTexSize.xxyy;\\n\\n    vec4 sample0 = texture2D(t, offset.xz);\\n    vec4 sample1 = texture2D(t, offset.yz);\\n    vec4 sample2 = texture2D(t, offset.xw);\\n    vec4 sample3 = texture2D(t, offset.yw);\\n\\n    float sx = s.x / (s.x + s.y);\\n    float sy = s.z / (s.z + s.w);\\n\\n    return mix(\\n       mix(sample3, sample2, sx), mix(sample1, sample0, sx)\\n    , sy);\\n}\\n\\n\\n#include <packing>\\n\\nuniform sampler2D directionalShadowMap[1];\\nvarying vec4 vDirectionalShadowCoord[1];\\nvarying vec4 v_goboCoord;\\n\\nstruct DirectionalLightShadow {\\n    float shadowBias;\\n    float shadowNormalBias;\\n    float shadowRadius;\\n    vec2 shadowMapSize;\\n};\\n\\nuniform DirectionalLightShadow directionalLightShadows[1];\\nuniform bool receiveShadow;\\nstruct DirectionalLight {\\n    vec3 direction;\\n    vec3 color;\\n};\\nuniform DirectionalLight directionalLights[1];\\n\\nfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n    return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n}\\n\\nfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n    float shadow = 1.0;\\n\\n    shadowCoord.xyz /= shadowCoord.w;\\n    shadowCoord.z += shadowBias;\\n\\n    bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\\n    bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\\n\\n    if ( frustumTest ) {\\n        vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n        float dx = texelSize.x;\\n        float dy = texelSize.y;\\n\\n        vec2 uv = shadowCoord.xy;\\n        vec2 f = fract( uv * shadowMapSize + 0.5 );\\n        uv -= f * texelSize;\\n\\n        shadow = (\\n        texture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n        texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n        texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n        texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n        mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\\n        texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n        f.x ) +\\n        mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\\n        texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n        f.x ) +\\n        mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\\n        texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n        f.y ) +\\n        mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\\n        texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n        f.y ) +\\n        mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\\n        texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n        f.x ),\\n        mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\\n        texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n        f.x ),\\n        f.y )\\n        ) * ( 1.0 / 9.0 );\\n    }\\n    return shadow;\\n}\\n\\n\\n#include <getBlueNoise>\\n\\nvoid main () {\\n\\n    #ifndef IS_BASE\\n    \\tif (v_clipY < 0.0) discard;\\n    #endif\\n\\n    #ifdef IS_BASE\\n    \\tvec4 infoTexture = texture2D(u_infoTexture, vec2(1.0 - v_uv.y, v_uv.x));\\n    #endif\\n\\n\\tvec3 viewNormal = normalize(v_viewNormal);\\n\\tvec3 N = normalize(v_worldNormal); // normal in world space\\n\\tvec3 V = normalize(cameraPosition - v_worldPosition); // view direction\\n\\tvec3 L = u_lightPosition - v_worldPosition; // light direction\\n\\tfloat lightDistance = length(L);\\n\\tL /= lightDistance;\\n\\tvec3 H = normalize(L + V); // half vector\\n\\n    // basic shading\\n    float attenuation = 1. / (0.08 * lightDistance + 0.001 * lightDistance * lightDistance);\\n\\tfloat NdL = max(0., dot(N, L));\\n\\tfloat NdV = max(0., dot(N, V));\\n\\tfloat specular = pow(max(0., dot(N, H)), 50.);\\n\\n    // ao\\n    float ao = v_ao;\\n\\n    // shadows\\n    float shadowMask = 1.0;\\n    DirectionalLightShadow directionalLight = directionalLightShadows[0];\\n    vec3 noises = 0.*getBlueNoise(gl_FragCoord.xy);\\n    shadowMask = getShadow( directionalShadowMap[0], directionalLight.shadowMapSize, directionalLight.shadowBias + noises.z * -0.001, directionalLight.shadowRadius, vDirectionalShadowCoord[0] + vec4((noises.xy - 0.5) / directionalLight.shadowMapSize, 0.0, 0.0));\\n\\n    shadowMask *= smoothstep(-.5, .5, dot(v_worldNormal, normalize(u_lightPosition)));\\n    #ifdef IS_BASE\\n    shadowMask -= 0.9 * infoTexture.x * linearstep(-0.525, -0.5, v_modelPosition.y);\\n    shadowMask = saturate(shadowMask);\\n    #endif\\n\\n    float gobo = 1.0 - u_goboIntensity * texture2D(u_goboTexture, (v_goboCoord.yx / v_goboCoord.w + 0.5) * 0.8 - 0.5).r;\\n\\n    // final\\n    #ifdef IS_BASE\\n\\tvec3 albedo = (u_color);\\n\\talbedo = mix(albedo, (u_prevSuccessColor), step(-1.5, v_modelPosition.y));\\n\\talbedo = mix(albedo, (u_successColor), smoothstep(0., 0.05, u_successAnimationRatio) * linearstep(1., .5, u_successAnimationRatio));\\n    #else\\n        vec3 albedo = (v_color);\\n    #endif\\n\\tvec3 color = albedo * (0.65 + 0.35 * NdL) + specular * 0.12;\\n\\tcolor += clamp(N.y, 0.0, 0.1);\\n    color *= attenuation;\\n    color += 0.1 * (1.0 - NdV);\\n    color += 0.1 * shadowMask * gobo;\\n    color *= 0.4 + 0.6  * shadowMask * linearstep(0.1, 1.0, gobo);\\n\\n    #ifdef IS_BASE\\n\\tvec4 infoTextureLinear = textureBicubic(u_infoTextureLinear, vec2(1.0 - v_uv.y, v_uv.x), vec2(7.0));\\n\\tfloat blockAo = smoothstep(0.7, 0.1, infoTextureLinear.x);\\n\\tvec3 blockAoColor = u_blocksColor * (1. - blockAo);\\n\\n\\t// color = color + (0.5 + 0.5 * shadowMask) * color * 8.0 * linearstep(0.5, 0.0, u_endAnimationRatio) * blockAoColor * infoTextureLinear.x * linearstep(-0.55, -0.5, v_modelPosition.y);\\n\\tfloat giFactor = infoTextureLinear.x * linearstep(-0.55, -0.5, v_modelPosition.y) * linearstep(0.5, 0.0, u_endAnimationRatio);\\n\\tcolor = mix(color, (color + 0.2) * u_blocksColor, 1.2 * giFactor);\\n\\n\\tcolor *= saturate(1.5 - infoTexture.x * linearstep(-0.525, -0.5, v_modelPosition.y));\\n\\tcolor *= min(1., max(blockAo * 0.5 + 0.5 + u_endAnimationRatio, linearstep(-0.5, -0.55, v_modelPosition.y)));\\n    #else\\n\\t\\tcolor += 0.5 * albedo * linearstep(1.0, 0.0, u_endAnimationRatio) * (1.0 - ao);\\n    #endif\\n\\tcolor *= 0.3 + 0.7 * ao;\\n\\n\\tfloat luma = dot(color, vec3(0.299, 0.587, 0.114));\\n\\tcolor = mix(vec3(luma), color, 1.5);\\n\\n\\tgl_FragColor = vec4(linearToSRGB(ACESFilmicToneMapping(color, 0.8)), 1.);\\n\\n    #ifdef IS_BASE\\n        vec2 screenUv = gl_FragCoord.xy / u_resolution;\\n        float alpha = smoothstep(-6.0, -1.0, v_modelPosition.y + u_yDisplacement);\\n        gl_FragColor.rgb = mix(linearToSRGB(mix(u_bgColor1, u_bgColor2, screenUv.y)), gl_FragColor.rgb, alpha);\\n    #endif\\n\\n}\\n\"","export default \"#include <common>\\n#include <packing>\\n\\nvarying vec2 vHighPrecisionZW;\\nvarying float v_clipY;\\n\\nvoid main() {\\n    #ifndef IS_BASE\\n        if (v_clipY < 0.0) discard;\\n    #endif\\n\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n    gl_FragColor = packDepthToRGBA( fragCoordZ );\\n}\\n\"","import math from '../../utils/math';\nimport * as THREE from 'three';\nimport { Quaternion, Vector2, Vector3 } from 'three';\n\nconst HALF_PI = Math.PI / 2;\nconst _v0 = new THREE.Vector3();\n\nexport default class HeroBlockCoordinates {\n\tanimation = 0;\n\tboardDir: Vector2 = new THREE.Vector2();\n\tboardPos: Vector2 = new THREE.Vector2();\n\tpos: Vector3 = new THREE.Vector3();\n\torient: Quaternion = new THREE.Quaternion();\n\tshowRatio = 0;\n\tspinPivot: Vector3 = new THREE.Vector3();\n\tspinOrient: Quaternion = new THREE.Quaternion();\n\n\tconstructor() {\n\t\tthis.animation = 0;\n\t\tthis.boardDir = new THREE.Vector2();\n\t\tthis.boardPos = new THREE.Vector2();\n\t\tthis.pos = new THREE.Vector3();\n\t\tthis.orient = new THREE.Quaternion();\n\t\tthis.showRatio = 0;\n\t\tthis.spinPivot = new THREE.Vector3();\n\t\tthis.spinOrient = new THREE.Quaternion();\n\t}\n\n\treset() {\n\t\tthis.animation = 0;\n\t\tthis.boardDir.set(0, 0);\n\t\tthis.boardPos.set(0, 0);\n\t\tthis.pos.set(0, 0, 0);\n\t\tthis.orient.identity();\n\t\tthis.showRatio = 0;\n\t\tthis.spinPivot.set(0, 0, 0);\n\t\tthis.spinOrient.identity();\n\t}\n\n\tupdate(_dt: number) {\n\t\tthis.pos.set(this.boardPos.x, 0, -this.boardPos.y);\n\t\tthis.spinPivot.set(this.boardDir.x * 0.5, -0.5, -this.boardDir.y * 0.5);\n\t\t_v0.set(-this.boardDir.y, 0, -this.boardDir.x);\n\t\tthis.spinOrient.setFromAxisAngle(_v0, this.animation * HALF_PI);\n\t}\n\n\taddsFallAnimation(ratio) {\n\t\t_v0.set(this.boardDir.x, -ratio, -this.boardDir.y);\n\t\tthis.pos.addScaledVector(_v0, ratio);\n\t\t_v0.set(this.boardDir.x * 0.5, 0, -this.boardDir.y * 0.5);\n\t\tthis.spinPivot.lerp(_v0, math.saturate(ratio));\n\t}\n}\n","import * as THREE from 'three';\n\nimport loader from '../../core/loader';\nimport { properties } from '../../core/properties';\nimport math from '../../utils/math';\nimport ease, { customEasing } from '../../utils/ease';\nimport blueNoise from '../../utils/blueNoise/blueNoise';\nimport { blocks, firstStartAnimationRatio, lastSpawnedBlock, previousSuccessBlocksAnimationRatio } from '../../logic/systemManager';\nimport { result } from '../../logic/stateManager';\nimport { HALF_SIZE, SIZE, TOTAL_TILES, SIZE_WITH_PADDING, TOTAL_TILES_WITH_PADDING, tiles, board } from '../../logic/board';\n\nimport vert from './hero.vert?raw';\nimport frag from './hero.frag?raw';\nimport fragDepth from './heroDepth.frag?raw';\n\nimport { floatingCubesDisplacement, floatingCubesRatio, successPushDownRatio, successRatio, successColorTowerRatio, towerRotationRatio } from '../../logic/successAnimationManager';\nimport { stopPushDownRatio, stopSpawnRatio } from '../../logic/stopAnimationManager';\nimport { failFloatingCubesRatio, failPushDownRatio, failShakeRatio, failSpawnRatio } from '../../logic/errorAnimationManager';\nimport HeroBlockCoordinates from './HeroBlockCoordinates';\nimport { lightCameraHelperSignal, lightCameraUpdateSignal } from '../../logic/signals';\n\nimport { InstancedBufferAttribute } from 'three';\nimport { SharedUniforms } from '../../../types/properties';\nimport { HeroType } from '../../../types/hero';\nimport { AnimationResult } from '../../../types';\nimport { ASSETS_PATH } from '../../core/settings';\n\nconst TOTAL_BLOCKS = 2 * TOTAL_TILES;\nconst _v2_0 = new THREE.Vector2();\nconst _v2_1 = new THREE.Vector2();\nconst _v3_0 = new THREE.Vector3();\nconst _v3_1 = new THREE.Vector3();\nconst _q_0 = new THREE.Quaternion();\nconst _q_1 = new THREE.Quaternion();\nconst MAIN_COLOR = new THREE.Color();\nconst SUCCESS_COLOR = new THREE.Color();\nconst ERROR_COLOR = new THREE.Color();\nconst DEFAULT_COLOR = new THREE.Color();\nconst _c = new THREE.Color();\nconst _c2 = new THREE.Color();\nconst heroContainer = new THREE.Object3D();\n\nconst heroSharedUniforms: SharedUniforms = {\n\tu_lightPosition: { value: new THREE.Vector3(-2, 6, -4) },\n\tu_goboTexture: { value: null },\n\tu_goboIntensity: { value: 0.45 },\n\tu_infoTexture: { value: null },\n\tu_infoTextureLinear: { value: null },\n\tu_endAnimationRatio: { value: 0 },\n};\n\nconst heroState: HeroType = {\n\t_baseMesh: undefined,\n\t_blocksMesh: undefined,\n\t_blockList: [],\n\tanimationTotalFrames: 0,\n\theroLoseAnimationPositionArray: undefined,\n\theroLoseAnimationOrientArray: undefined,\n\t_blockRenderList: [],\n\tsuccessColorRatio: 0,\n\tdirectLight: undefined,\n\tinfoTexture: undefined,\n\t_instancePosArray: undefined,\n\t_instanceOrientArray: undefined,\n\t_instanceShowRatioArray: undefined,\n\t_instanceSpinPivotArray: undefined,\n\t_instanceSpinOrientArray: undefined,\n\t_instanceColorArray: undefined,\n\t_instanceIsActiveArray: undefined,\n\t_instanceNextDirectionArray: undefined,\n\tisShadowCameraHelperVisible: undefined,\n\tshadowCameraHelper: undefined,\n\tinfoTextureLinear: undefined,\n\theroSharedUniforms,\n};\n\nconst Hero = () => {\n\tasync function preload() {\n\t\tconst arr = Array.from({ length: TOTAL_BLOCKS });\n\t\theroState._blockList = arr.map((_) => new HeroBlockCoordinates());\n\t\theroState._blockRenderList = [...heroState._blockList];\n\n\t\tconst modelPath = ASSETS_PATH + '/models';\n\t\tconst texturePath = ASSETS_PATH + '/textures';\n\n\t\tloader.loadBuf(`${modelPath}/BASE.buf`, (geometry) => {\n\t\t\t_onBaseBlocksLoaded(geometry);\n\t\t});\n\t\tloader.loadBuf(`${modelPath}/BOX.buf`, (geometry) => {\n\t\t\t_onBoxLoaded(geometry);\n\t\t});\n\t\tloader.loadBuf(`${modelPath}/LOSE_ANIMATION.buf`, (geometry) => {\n\t\t\tconst { position, orient } = geometry.attributes;\n\t\t\theroState.animationTotalFrames = position.count / TOTAL_TILES;\n\t\t\theroState.heroLoseAnimationPositionArray = position.array;\n\t\t\theroState.heroLoseAnimationOrientArray = orient.array;\n\t\t});\n\t\tloader.loadTexture(`${texturePath}/gobo.jpg`, (texture) => {\n\t\t\ttexture.flipY = false;\n\t\t\ttexture.needsUpdate = true;\n\t\t\tif (heroSharedUniforms) {\n\t\t\t\theroSharedUniforms.u_goboTexture.value = texture;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction _onBaseBlocksLoaded(geometry) {\n\t\tconst uniforms = {\n\t\t\t...THREE.UniformsUtils.merge([THREE.UniformsLib.lights]),\n\t\t\t...properties.sharedUniforms,\n\t\t\t...heroSharedUniforms,\n\t\t\t// ...blueNoise.sharedUniforms,\n\t\t\tu_color: { value: new THREE.Color(properties.neutralColor) },\n\t\t\tu_blocksColor: { value: new THREE.Color() },\n\t\t\tu_yDisplacement: { value: 0 },\n\t\t\tu_prevSuccessColor: { value: new THREE.Color(properties.neutralColor).convertSRGBToLinear() },\n\t\t\tu_successColor: { value: new THREE.Color(properties.successColor).convertSRGBToLinear() },\n\t\t\tu_successAnimationRatio: { value: 0 },\n\t\t};\n\n\t\tconst material = new THREE.ShaderMaterial({\n\t\t\tuniforms,\n\t\t\tvertexShader: vert,\n\t\t\tfragmentShader: frag,\n\t\t\tlights: true,\n\t\t\ttransparent: true,\n\t\t\tdefines: { IS_BASE: true },\n\t\t});\n\t\theroState._baseMesh = new THREE.Mesh(geometry, material);\n\t\theroState._baseMesh.receiveShadow = heroState._baseMesh.castShadow = true;\n\t\theroState._baseMesh.frustumCulled = false;\n\n\t\theroState._baseMesh.customDepthMaterial = new THREE.ShaderMaterial({\n\t\t\tvertexShader: vert,\n\t\t\tfragmentShader: fragDepth,\n\t\t\tdefines: { IS_DEPTH: true, IS_BASE: true },\n\t\t});\n\t\theroContainer.add(heroState._baseMesh);\n\t}\n\n\tfunction _onBoxLoaded(refGeometry) {\n\t\tconst geometry = new THREE.InstancedBufferGeometry();\n\t\tgeometry.index = refGeometry.index;\n\t\tObject.keys(refGeometry.attributes).forEach((id) => {\n\t\t\tgeometry.setAttribute(id, refGeometry.attributes[id]);\n\t\t});\n\t\tgeometry.instanceCount = TOTAL_BLOCKS;\n\n\t\tconst createInstancedAttribute = (name, itemSize) => {\n\t\t\tconst array = new Float32Array(TOTAL_BLOCKS * itemSize);\n\t\t\tgeometry.setAttribute(name, new THREE.InstancedBufferAttribute(array, itemSize, itemSize !== 4, 1).setUsage(THREE.DynamicDrawUsage));\n\t\t\treturn array;\n\t\t};\n\n\t\theroState._instancePosArray = createInstancedAttribute('instancePos', 3);\n\t\theroState._instanceOrientArray = createInstancedAttribute('instanceOrient', 4);\n\t\theroState._instanceShowRatioArray = createInstancedAttribute('instanceShowRatio', 1);\n\t\theroState._instanceSpinPivotArray = createInstancedAttribute('instanceSpinPivot', 3);\n\t\theroState._instanceSpinOrientArray = createInstancedAttribute('instanceSpinOrient', 4);\n\t\theroState._instanceColorArray = createInstancedAttribute('instanceColor', 3);\n\t\theroState._instanceIsActiveArray = createInstancedAttribute('instanceIsActive', 1);\n\t\theroState._instanceNextDirectionArray = createInstancedAttribute('instanceNextDirection', 2);\n\n\t\tconst material = new THREE.ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\t...THREE.UniformsUtils.merge([THREE.UniformsLib.lights]),\n\t\t\t\t...properties.sharedUniforms,\n\t\t\t\t...heroSharedUniforms,\n\t\t\t\t...blueNoise.bn_sharedUniforms,\n\t\t\t},\n\t\t\tvertexShader: vert,\n\t\t\tfragmentShader: frag,\n\t\t\tlights: true,\n\t\t});\n\n\t\theroState._blocksMesh = new THREE.Mesh(geometry, material);\n\t\theroState._blocksMesh.frustumCulled = false;\n\t\theroState._blocksMesh.castShadow = heroState._blocksMesh.receiveShadow = true;\n\n\t\theroState._blocksMesh.customDepthMaterial = new THREE.ShaderMaterial({\n\t\t\tuniforms: { ...heroSharedUniforms },\n\t\t\tvertexShader: vert,\n\t\t\tfragmentShader: fragDepth,\n\t\t\tdefines: { IS_DEPTH: true },\n\t\t});\n\n\t\theroContainer.add(heroState._blocksMesh);\n\t}\n\n\tfunction init() {\n\t\theroState.directLight = new THREE.DirectionalLight(0xffffff, 1);\n\t\theroState.directLight.castShadow = true;\n\t\theroState.directLight.shadow.camera.near = properties.lightCameraNear;\n\t\theroState.directLight.shadow.camera.far = properties.lightCameraFar;\n\t\theroState.directLight.shadow.camera.right = properties.lightCameraSize;\n\t\theroState.directLight.shadow.camera.left = -properties.lightCameraSize;\n\t\theroState.directLight.shadow.camera.top = properties.lightCameraSize;\n\t\theroState.directLight.shadow.camera.bottom = -properties.lightCameraSize;\n\t\theroState.directLight.shadow.bias = properties.lightCameraBias;\n\t\theroState.directLight.shadow.mapSize.width = 768;\n\t\theroState.directLight.shadow.mapSize.height = 768;\n\t\tproperties.scene?.add(heroState.directLight);\n\t\tproperties.scene?.add(heroState.directLight.target);\n\n\t\theroState.isShadowCameraHelperVisible = true;\n\t\theroState.shadowCameraHelper = new THREE.CameraHelper(heroState.directLight.shadow.camera);\n\t\tlightCameraUpdateSignal.add(() => {\n\t\t\theroState.directLight?.shadow.camera.updateProjectionMatrix();\n\t\t\theroState.shadowCameraHelper?.update();\n\t\t});\n\t\tlightCameraHelperSignal.add(() => {\n\t\t\theroState.isShadowCameraHelperVisible = !heroState.isShadowCameraHelperVisible;\n\t\t\tif (heroState.isShadowCameraHelperVisible && heroState.shadowCameraHelper) {\n\t\t\t\tproperties.scene?.add(heroState.shadowCameraHelper);\n\t\t\t} else if (heroState.shadowCameraHelper) {\n\t\t\t\tproperties.scene?.remove(heroState.shadowCameraHelper);\n\t\t\t}\n\t\t});\n\n\t\t_assignFinalAnimationToTiles();\n\n\t\tconst infoData = new Float32Array(TOTAL_TILES_WITH_PADDING * 4);\n\t\tfor (let y = 0, i4 = 0; y < SIZE_WITH_PADDING; y++) {\n\t\t\tfor (let x = 0; x < SIZE_WITH_PADDING; x++, i4 += 4) {\n\t\t\t\tinfoData[i4] = 0;\n\t\t\t\tinfoData[i4 + 1] = 0;\n\t\t\t\tinfoData[i4 + 2] = 1;\n\t\t\t\tinfoData[i4 + 3] = 1;\n\t\t\t}\n\t\t}\n\n\t\theroState.infoTexture = new THREE.DataTexture(infoData, SIZE_WITH_PADDING, SIZE_WITH_PADDING, THREE.RGBAFormat, THREE.FloatType);\n\t\theroState.infoTextureLinear = new THREE.DataTexture(\n\t\t\tinfoData,\n\t\t\tSIZE_WITH_PADDING,\n\t\t\tSIZE_WITH_PADDING,\n\t\t\tTHREE.RGBAFormat,\n\t\t\tTHREE.FloatType,\n\t\t\tTHREE.UVMapping,\n\t\t\tTHREE.ClampToEdgeWrapping,\n\t\t\tTHREE.ClampToEdgeWrapping,\n\t\t\tTHREE.LinearFilter,\n\t\t\tTHREE.LinearFilter,\n\t\t\t0,\n\t\t);\n\t\theroState.infoTextureLinear.needsUpdate = true;\n\t\tif (heroSharedUniforms) {\n\t\t\theroSharedUniforms.u_infoTexture.value = heroState.infoTexture;\n\t\t\theroSharedUniforms.u_infoTextureLinear.value = heroState.infoTextureLinear;\n\t\t}\n\t}\n\n\tfunction _assignFinalAnimationToTiles() {\n\t\ttiles.forEach((rowMap, i) => {\n\t\t\trowMap.forEach((tile, j) => {\n\t\t\t\tconst tileIndex = i * SIZE + j;\n\t\t\t\ttile.loseAnimationPositionArray = new Float32Array(heroState.animationTotalFrames * 3);\n\t\t\t\ttile.loseAnimationOrientArray = new Float32Array(heroState.animationTotalFrames * 4);\n\n\t\t\t\tfor (let k = 0; k < heroState.animationTotalFrames; k++) {\n\t\t\t\t\tconst posIndex = (k * TOTAL_TILES + tileIndex) * 3;\n\t\t\t\t\tconst orientIndex = (k * TOTAL_TILES + tileIndex) * 4;\n\n\t\t\t\t\ttile.loseAnimationPositionArray.set(heroState.heroLoseAnimationPositionArray?.subarray(posIndex, posIndex + 3) || [], k * 3);\n\t\t\t\t\ttile.loseAnimationOrientArray.set(heroState.heroLoseAnimationOrientArray?.subarray(orientIndex, orientIndex + 4) || [], k * 4);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tfunction reset() {\n\t\theroState.successColorRatio = 0;\n\t\theroState._blockList.forEach((block) => block.reset());\n\t}\n\n\tfunction resetBlockFromLogicBlock(logicBlock) {\n\t\tconst block = heroState._blockList[logicBlock.id];\n\t\tblock.reset();\n\t}\n\n\tfunction _updateColors(dt: number) {\n\t\tMAIN_COLOR.set(properties.mainColor);\n\t\tSUCCESS_COLOR.set(properties.successColor);\n\t\tERROR_COLOR.set(properties.failColor);\n\t\tDEFAULT_COLOR.set(properties.neutralColor);\n\n\t\t_c.copy(MAIN_COLOR);\n\n\t\tif (result === AnimationResult.FAILED && failFloatingCubesRatio > 0) {\n\t\t\t_c.copy(ERROR_COLOR);\n\t\t}\n\n\t\tif (result === AnimationResult.COMPLETED || result === AnimationResult.REPLAY) {\n\t\t\theroState.successColorRatio = Math.min(1, heroState.successColorRatio + 0.5 * dt);\n\t\t\t_c.lerp(SUCCESS_COLOR, heroState.successColorRatio);\n\t\t}\n\n\t\tif (result !== AnimationResult.REPLAY && result !== AnimationResult.COMPLETED) {\n\t\t\t_c.lerp(DEFAULT_COLOR, math.saturate(stopPushDownRatio + failPushDownRatio));\n\t\t}\n\n\t\t_c.convertSRGBToLinear();\n\t\tDEFAULT_COLOR.convertSRGBToLinear();\n\t\tSUCCESS_COLOR.convertSRGBToLinear();\n\n\t\tfor (let i = 0; i < TOTAL_BLOCKS; i++) {\n\t\t\tconst logicBlock = blocks.filter((block) => block.id === i)[0];\n\n\t\t\tconst isActive = i < blocks.length + (lastSpawnedBlock ? 1 : 0);\n\t\t\tconst color = isActive ? _c : DEFAULT_COLOR;\n\n\t\t\tif (isActive && logicBlock?.isErrorBlock) {\n\t\t\t\tlet preFallColorRatio = math.saturate(0.5 * (1 - Math.cos(logicBlock.errorPreFallAnimationTime)));\n\n\t\t\t\tif (logicBlock.errorFallAnimationTime > 0) {\n\t\t\t\t\tpreFallColorRatio = math.saturate(0.5 * (1 - Math.cos(14 * logicBlock.errorFallAnimationTime)));\n\t\t\t\t}\n\n\t\t\t\t_c2.lerpColors(color, ERROR_COLOR, preFallColorRatio);\n\t\t\t\theroState._instanceColorArray?.set([_c2.r, _c2.g, _c2.b], i * 3);\n\t\t\t} else {\n\t\t\t\theroState._instanceColorArray?.set([color.r, color.g, color.b], i * 3);\n\t\t\t}\n\t\t\tif (heroState._instanceIsActiveArray) {\n\t\t\t\theroState._instanceIsActiveArray[i] = isActive ? 1 : 0;\n\t\t\t}\n\t\t}\n\n\t\tif (heroState._baseMesh) {\n\t\t\theroState._baseMesh.material.uniforms.u_color.value.set(DEFAULT_COLOR).convertSRGBToLinear();\n\t\t\theroState._baseMesh.material.uniforms.u_blocksColor.value.copy(_c);\n\t\t\theroState._baseMesh.material.uniforms.u_successColor.value.copy(SUCCESS_COLOR);\n\n\t\t\theroState._baseMesh.material.uniforms.u_prevSuccessColor.value.set(DEFAULT_COLOR);\n\n\t\t\theroState._baseMesh.material.uniforms.u_prevSuccessColor.value.lerp(_c.set(properties.successColor), previousSuccessBlocksAnimationRatio);\n\t\t\theroState._baseMesh.material.uniforms.u_prevSuccessColor.value.convertSRGBToLinear();\n\t\t}\n\t}\n\n\tfunction _updateInfoTexture() {\n\t\ttiles.forEach((rowMap) => {\n\t\t\trowMap.forEach((tile) => {\n\t\t\t\tconst x = (tile.id % SIZE) + 1;\n\t\t\t\tconst y = Math.floor(tile.id / SIZE) + 1;\n\t\t\t\tconst index = (y * SIZE_WITH_PADDING + x) * 4;\n\n\t\t\t\tlet endAnimationRatio = 0.5 * floatingCubesRatio * math.fit(successPushDownRatio, 0, 0.1, 1, 0);\n\t\t\t\tendAnimationRatio += (failFloatingCubesRatio > 0 ? 1 : 0) * math.fit(failPushDownRatio, 0, 0.1, 1, 0);\n\t\t\t\tendAnimationRatio += stopSpawnRatio * math.fit(stopPushDownRatio, 0, 0.1, 1, 0);\n\t\t\t\tendAnimationRatio = Math.min(1, endAnimationRatio);\n\t\t\t\tif (heroState.infoTexture) {\n\t\t\t\t\theroState.infoTexture.image.data[index] = tile.activeRatio * (1 - endAnimationRatio);\n\t\t\t\t\theroState.infoTexture.image.data[index + 1] = tile.isOccupied || tile.willBeOccupied ? 1 : 0;\n\t\t\t\t\theroState.infoTexture.image.data[index + 2] = tile.isMain ? 1 : 0;\n\t\t\t\t\theroState.infoTexture.image.data[index + 3] = tile.isBorder ? 1 : 0;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tif (heroState.infoTexture && heroState.infoTextureLinear) {\n\t\t\theroState.infoTexture.needsUpdate = true;\n\t\t\theroState.infoTextureLinear.needsUpdate = true;\n\t\t}\n\t}\n\n\tfunction _updateFreeBlocks() {\n\t\tif (lastSpawnedBlock) {\n\t\t\tconst block = heroState._blockList[lastSpawnedBlock.id];\n\t\t\tif (lastSpawnedBlock.currentTile) {\n\t\t\t\tblock.boardPos.set(lastSpawnedBlock.currentTile?.row, lastSpawnedBlock.currentTile?.col);\n\t\t\t}\n\t\t\tblock.showRatio = customEasing(math.saturate(lastSpawnedBlock.spawnAnimationRatioUnclamped));\n\t\t}\n\n\t\tblocks.forEach((logicBlock) => {\n\t\t\tconst block = heroState._blockList[logicBlock.id];\n\n\t\t\tif (block) {\n\t\t\t\tblock.showRatio = customEasing(math.saturate(logicBlock.spawnAnimationRatioUnclamped));\n\t\t\t\tif (logicBlock.currentTile) {\n\t\t\t\t\tblock.boardPos.set(logicBlock.currentTile?.row, logicBlock.currentTile?.col);\n\t\t\t\t}\n\n\t\t\t\tif (logicBlock.targetTile) {\n\t\t\t\t\tblock.boardDir.set(logicBlock.targetTile.row - (logicBlock.currentTile?.row || 0), logicBlock.targetTile.col - (logicBlock.currentTile?.col || 0));\n\t\t\t\t}\n\t\t\t\tblock.animation = logicBlock.hasAnimationEnded ? 0 : logicBlock.easedAnimationRatio;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction _updateAttributes(renderCount) {\n\t\tfor (let i = 0; i < renderCount; i++) {\n\t\t\tconst block = heroState._blockRenderList[i];\n\t\t\tblock.pos.toArray(heroState._instancePosArray || [], i * 3);\n\t\t\tblock.orient.toArray(heroState._instanceOrientArray || [], i * 4);\n\t\t\tif (heroState._instanceShowRatioArray) {\n\t\t\t\theroState._instanceShowRatioArray[i] = ease.quartInOut(block.showRatio);\n\t\t\t}\n\t\t\tblock.spinPivot.toArray(heroState._instanceSpinPivotArray || [], i * 3);\n\t\t\tblock.spinOrient.toArray(heroState._instanceSpinOrientArray || [], i * 4);\n\t\t\theroState._instanceNextDirectionArray?.set([block.boardDir.x, block.boardDir.y], i * 2);\n\t\t}\n\n\t\tconst geometry = heroState._blocksMesh?.geometry;\n\t\tif (geometry) {\n\t\t\tfor (const id in geometry.attributes) {\n\t\t\t\tconst attribute = geometry.attributes[id] as InstancedBufferAttribute;\n\t\t\t\tif (attribute.isBufferAttribute) {\n\t\t\t\t\tattribute.addUpdateRange(0, renderCount * attribute.itemSize);\n\t\t\t\t\tattribute.needsUpdate = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tgeometry.instanceCount = renderCount;\n\t\t}\n\t}\n\n\tfunction _updateStopAnimation(block, i) {\n\t\tif (result === AnimationResult.STOP) {\n\t\t\tif (i >= TOTAL_TILES) {\n\t\t\t\tconst _i = i - TOTAL_TILES;\n\t\t\t\tconst col = (_i % SIZE) - HALF_SIZE;\n\t\t\t\tconst row = Math.floor(_i / SIZE) - HALF_SIZE;\n\t\t\t\tconst tile = board.getTile(row, col);\n\t\t\t\tif (!tile.isOccupied) {\n\t\t\t\t\tconst ratio = math.saturate(stopSpawnRatio - tile.randomDelay);\n\t\t\t\t\ttile.activeRatio = ratio;\n\t\t\t\t\tblock.showRatio = customEasing(ratio);\n\t\t\t\t\tblock.boardPos.set(row, col);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _updateLongBlockAnimation(logicBlock, block) {\n\t\tif (logicBlock && logicBlock.isErrorBlock && logicBlock.errorLifeCycle >= properties.errorBlockMaxLifeCycle - 1) {\n\t\t\tconst tile = logicBlock.currentTile;\n\t\t\tconst animationRatio = logicBlock.errorFallAnimationTime;\n\n\t\t\tblock.boardPos.set(tile.row, tile.col);\n\t\t\t_v2_0.set(tile.row, tile.col).normalize();\n\t\t\tif (Math.abs(_v2_0.x) > Math.abs(_v2_0.y)) {\n\t\t\t\t_v2_0.set(Math.sign(_v2_0.x), 0);\n\t\t\t} else {\n\t\t\t\t_v2_0.set(0, Math.sign(_v2_0.y));\n\t\t\t}\n\t\t\tblock.boardDir.set(_v2_0.x, _v2_0.y);\n\t\t\tblock.animation = math.fit(animationRatio, 0, 1, 0, 1, ease.sineOut);\n\t\t\tblock.animation += Math.max(0, animationRatio - 0.8);\n\t\t\tblock.update(properties.deltaTime);\n\t\t\tblock.addsFallAnimation(Math.max(0, animationRatio - 0.8));\n\t\t}\n\t}\n\tfunction _updateFailAnimation(logicBlock, block, i) {\n\t\tif (result === AnimationResult.FAILED) {\n\t\t\tif (logicBlock) {\n\t\t\t\tconst tile = logicBlock.currentTile;\n\n\t\t\t\tif (failFloatingCubesRatio > 0) {\n\t\t\t\t\tconst frameStart = Math.floor(failFloatingCubesRatio * heroState.animationTotalFrames);\n\t\t\t\t\tconst frameEnd = Math.min(frameStart + 1, heroState.animationTotalFrames - 1);\n\t\t\t\t\tconst frameRatio = failFloatingCubesRatio * heroState.animationTotalFrames - frameStart;\n\n\t\t\t\t\t_v3_0.fromArray(tile.loseAnimationPositionArray, frameStart * 3);\n\t\t\t\t\t_v3_1.fromArray(tile.loseAnimationPositionArray, frameEnd * 3);\n\t\t\t\t\t_v3_0.lerp(_v3_1, frameRatio);\n\t\t\t\t\t_v3_0.y *= 0.5;\n\t\t\t\t\tblock.pos.set(_v3_0.z, _v3_0.y, -_v3_0.x);\n\n\t\t\t\t\t_q_0.fromArray(tile.loseAnimationOrientArray, frameStart * 4);\n\t\t\t\t\t_q_1.fromArray(tile.loseAnimationOrientArray, frameEnd * 4);\n\t\t\t\t\t_q_0.slerp(_q_1, frameRatio);\n\t\t\t\t\tblock.orient.copy(_q_0);\n\t\t\t\t}\n\n\t\t\t\tif (failShakeRatio > 0) {\n\t\t\t\t\tconst push = math.fit(failShakeRatio, 0, 1, 0, 1, ease.sineOut);\n\t\t\t\t\t_v2_0.set(tile.row, tile.col);\n\t\t\t\t\t_v2_0.normalize();\n\t\t\t\t\t_v2_0.multiplyScalar(0.1 * push);\n\n\t\t\t\t\tblock.pos.x += _v2_0.x;\n\t\t\t\t\tblock.pos.z -= _v2_0.y;\n\n\t\t\t\t\tif (failShakeRatio < 1) {\n\t\t\t\t\t\tconst shake = push * math.fit(failShakeRatio, 0.5, 0.8, 1, 0);\n\t\t\t\t\t\t_v2_0.set(logicBlock.randomVector.x, logicBlock.randomVector.y);\n\t\t\t\t\t\t_v2_0.normalize();\n\t\t\t\t\t\t_v2_0.multiplyScalar(shake);\n\t\t\t\t\t\t_v2_1.set(0, 0);\n\t\t\t\t\t\t_v2_1.addScaledVector(_v2_0, 0.08 * shake * Math.sin(shake * 80));\n\n\t\t\t\t\t\tblock.pos.x += _v2_1.x;\n\t\t\t\t\t\tblock.pos.z += _v2_1.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i >= TOTAL_TILES) {\n\t\t\t\tconst _i = i - TOTAL_TILES;\n\t\t\t\tconst col = (_i % SIZE) - HALF_SIZE;\n\t\t\t\tconst row = Math.floor(_i / SIZE) - HALF_SIZE;\n\t\t\t\tconst tile = board.getTile(row, col);\n\t\t\t\tconst ratio = math.saturate(failSpawnRatio - tile.randomDelay);\n\n\t\t\t\tif (!tile.isOccupied) {\n\t\t\t\t\ttile.activeRatio = ratio;\n\t\t\t\t}\n\t\t\t\tblock.showRatio = customEasing(ratio);\n\t\t\t\tblock.boardPos.set(row, col);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _updateFloatAnimation(logicBlock, block) {\n\t\tif (result === AnimationResult.COMPLETED || result === AnimationResult.REPLAY) {\n\t\t\tif (logicBlock) {\n\t\t\t\tconst tile = logicBlock.currentTile;\n\t\t\t\tconst delay = 0.1 * tile.randomDelay;\n\t\t\t\tconst ratio = floatingCubesRatio - delay;\n\n\t\t\t\tlet y = math.fit(ratio, 0, 0.5, 0, 1, (x) => 1 - Math.pow(1 - x, 5));\n\t\t\t\ty = math.fit(ratio, 0.7, 1, y, 0, (x) => Math.pow(x, 5));\n\n\t\t\t\tblock.pos.y += floatingCubesDisplacement * y;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction update(dt: number) {\n\t\t_updateFreeBlocks();\n\t\t_updateColors(dt);\n\t\t// update blocks;\n\t\tlet renderCount = 0;\n\t\tfor (let i = 0; i < TOTAL_BLOCKS; i++) {\n\t\t\tconst block = heroState._blockList[i];\n\t\t\tblock.update(dt);\n\n\t\t\tconst logicBlock = blocks.filter((block) => block.id === i)[0];\n\n\t\t\tif (block.showRatio > 0) {\n\t\t\t\theroState._blockRenderList[renderCount++] = block;\n\t\t\t}\n\n\t\t\t_updateFailAnimation(logicBlock, block, i);\n\t\t\t_updateLongBlockAnimation(logicBlock, block);\n\t\t\t_updateStopAnimation(block, i);\n\t\t\t_updateFloatAnimation(logicBlock, block);\n\t\t}\n\n\t\t_updateInfoTexture();\n\t\t_updateAttributes(renderCount);\n\n\t\tconst pushDownRatio = Math.min(1, stopPushDownRatio + failPushDownRatio + successPushDownRatio);\n\t\tconst easedRestartAnimationRatio = ease.backOut(pushDownRatio, 3);\n\t\tconst easedFirstStartAnimationRatio = 1 - customEasing(firstStartAnimationRatio);\n\t\theroContainer.position.y = -easedRestartAnimationRatio - 2 * easedFirstStartAnimationRatio;\n\t\theroContainer.rotation.y = 0.5 * Math.PI * easedFirstStartAnimationRatio;\n\t\theroContainer.rotation.y += 2 * Math.PI * ease.quartInOut(towerRotationRatio);\n\t\tif (heroState._baseMesh) {\n\t\t\theroState._baseMesh.material.uniforms.u_yDisplacement.value = -easedRestartAnimationRatio - 5 * easedFirstStartAnimationRatio;\n\t\t\theroState._baseMesh.material.uniforms.u_successAnimationRatio.value = successColorTowerRatio;\n\t\t}\n\t\tif (heroSharedUniforms) {\n\t\t\theroSharedUniforms.u_endAnimationRatio.value = Math.min(\n\t\t\t\t1,\n\t\t\t\tmath.fit(stopSpawnRatio, 0.5, 2, 0, 1) + math.fit(failSpawnRatio, 0.5, 2, 0, 1) + math.fit(successRatio, 0, 0.2, 0, 1),\n\t\t\t);\n\t\t\theroSharedUniforms.u_goboIntensity.value = properties.goboIntensity;\n\t\t\theroSharedUniforms.u_lightPosition.value.set(properties.lightPositionX, properties.lightPositionY, properties.lightPositionZ);\n\t\t}\n\n\t\tif (heroState.directLight) {\n\t\t\theroState.directLight.position.copy(heroSharedUniforms?.u_lightPosition.value);\n\t\t\theroState.directLight.shadow.camera.top = properties.lightCameraSize;\n\t\t\theroState.directLight.shadow.camera.bottom = -properties.lightCameraSize;\n\t\t\theroState.directLight.shadow.bias = properties.lightCameraBias;\n\t\t}\n\t}\n\n\treturn {\n\t\tpreload,\n\t\tinit,\n\t\treset,\n\t\tresetBlockFromLogicBlock,\n\t\tupdate,\n\t};\n};\n\nconst heroBlocks = Hero();\nexport { heroBlocks, heroContainer, heroSharedUniforms };\n","export default \"uniform float u_time;\\nuniform float u_ratio;\\nuniform float u_isFloating;\\n\\nattribute vec3 a_instancePosition;\\nattribute vec4 a_instanceQuaternion;\\nattribute float a_instanceCurveUV;\\nattribute vec3 a_instanceAoN;\\nattribute vec3 a_instanceAoP;\\nattribute vec3 a_instanceRand;\\nattribute vec3 SN;\\n\\n#ifdef IS_DEPTH\\n\\n    varying vec2 vHighPrecisionZW;\\n\\n#else\\n\\n    varying vec3 v_modelPosition;\\n    varying vec3 v_viewPosition;\\n    varying vec3 v_worldPosition;\\n    varying vec3 v_viewNormal;\\n    varying vec3 v_worldNormal;\\n    varying vec3 v_modelNormal;\\n    varying float v_ao;\\nuniform mat4 directionalShadowMatrix[1];\\nvarying vec4 vDirectionalShadowCoord[1];\\n\\nstruct DirectionalLightShadow {\\n    float shadowBias;\\n    float shadowNormalBias;\\n    float shadowRadius;\\n    vec2 shadowMapSize;\\n};\\n\\nuniform DirectionalLightShadow directionalLightShadows[1];\\n#endif\\n\\n#define PI 3.1415926538\\n\\n#ifndef saturate\\n\\t#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n\\nvec3 qrotate(vec4 q, vec3 v) {\\n\\treturn v + 2. * cross(q.xyz, cross(q.xyz, v) + q.w * v);\\n}\\n\\nvec4 quat_from_axis_angle(vec3 axis, float angle) {\\n  vec4 qr;\\n  float half_angle = (angle * 0.5) * 3.14159 / 180.0;\\n  qr.x = axis.x * sin(half_angle);\\n  qr.y = axis.y * sin(half_angle);\\n  qr.z = axis.z * sin(half_angle);\\n  qr.w = cos(half_angle);\\n  return qr;\\n}\\n\\nfloat linearstep(float edge0, float edge1, float x) {\\n    return  clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\\n}\\n\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\n\\nfloat cubicInOut(float t) {\\n  return t < 0.5\\n    ? 4.0 * t * t * t\\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\\n}\\n\\nvoid main () {\\n    vec3 pos = position;\\n    pos.y *= 1.5;\\n    vec3 nor = normal;\\n\\n    float ratio = saturate(a_instanceCurveUV + (2.0 * u_ratio - 1.0));\\n    float scale = linearstep(0.0, 0.1, ratio) * linearstep(0.4, 0.3, ratio);\\n\\n    if (u_isFloating < 0.5) {\\n        pos.xz *= scale;\\n        pos.y *= linearstep(0., 0.5, scale);\\n    }\\n\\n    vec4 localQuaternion = quat_from_axis_angle(vec3(0.0, 0.0, 1.0), 200.0 * (0.8 + 0.2 * a_instanceRand.x) * u_time);\\n    pos = qrotate(localQuaternion, pos);\\n    nor = qrotate(localQuaternion, nor);\\n    pos = qrotate(a_instanceQuaternion, pos);\\n    nor = qrotate(a_instanceQuaternion, nor);\\n\\n    #ifndef IS_DEPTH\\n        vec3 sn = qrotate(a_instanceQuaternion, qrotate(localQuaternion, SN));\\n        vec3 aoN = normalize(nor + sn * .5);\\n        vec3 aoVec = mix(a_instanceAoN, a_instanceAoP, sign(aoN) * 0.5 + 0.5);\\n        vec3 absN = abs(aoN);\\n        v_ao = pow(dot(absN, aoVec) / (absN.x + absN.y + absN.z), 1.0);\\n\\n    #endif\\n\\n    vec3 instancePos = a_instancePosition;\\n    if (u_isFloating > 0.5) {\\n        instancePos.xz *= 1.5;\\n        instancePos.y = mix(\\n            -10.0,\\n            -6.0 + 10.0 * abs(a_instanceRand.y),\\n            cubicInOut(linearstep(0.0, 0.4 - 0.2 * abs(a_instanceRand.z), u_ratio) * linearstep(1.0, 0.6 + 0.2 * abs(a_instanceRand.x), u_ratio))\\n        );\\n    }\\n    pos += instancePos;\\n\\n    vec3 viewNormal = normalMatrix * nor;\\n    vec4 worldPosition = (modelMatrix * vec4(pos, 1.0));\\n    vec4 viewPos = modelViewMatrix * vec4(pos, 1.0);\\n\\n    gl_Position = projectionMatrix * viewPos;\\n\\n\\n    #ifndef IS_DEPTH\\n\\n        v_modelPosition = position;\\n        v_viewPosition = -viewPos.xyz;\\n        v_worldPosition = worldPosition.xyz;\\n        v_viewNormal = normalMatrix * nor;\\n        v_worldNormal = inverseTransformDirection(viewNormal, viewMatrix);\\n        v_modelNormal = normal;\\n        vDirectionalShadowCoord[0] = directionalShadowMatrix[0] * worldPosition + vec4(v_worldNormal * directionalLightShadows[0].shadowNormalBias, 0. );\\n    #else\\n\\n        vHighPrecisionZW = gl_Position.zw;\\n\\n    #endif\\n}\\n\"","export default \"uniform vec3 u_bgColor1;\\nuniform vec3 u_bgColor2;\\nuniform vec2 u_resolution;\\nuniform sampler2D u_matcapTexture;\\nuniform sampler2D u_goboTexture;\\nvarying vec4 vDirectionalShadowCoord[1];\\nvarying vec3 v_viewPosition;\\nvarying vec3 v_worldPosition;\\nvarying vec3 v_viewNormal;\\nvarying vec3 v_modelNormal;\\nvarying vec3 v_worldNormal;\\nvarying float v_ao;\\n\\n#define PI 3.14159265359\\n\\n#ifndef saturate\\n\\t#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n\\nvec3 SRGBtoLinear(vec3 srgb) {\\n    return pow(srgb, vec3(2.2));\\n}\\n\\nvec3 linearToSRGB(vec3 color) {\\n    return pow(color, vec3(1.0 / 2.2));\\n}\\n\\nfloat linearstep(float edge0, float edge1, float x) {\\n    return  clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\\n}\\n\\nvec3 LinearToneMapping( vec3 color, float toneMappingExposure ) {\\n\\treturn saturate( toneMappingExposure * color );\\n}\\n\\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\n// this implementation of ACES is modified to accommodate a brighter viewing environment.\\n// the scale factor of 1/0.6 is subjective. see discussion in #19621.\\nvec3 ACESFilmicToneMapping( vec3 color, float toneMappingExposure ) {\\n\\n\\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ), // transposed from source\\n\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\n\\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ), // transposed from source\\n\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\n\\tcolor = ACESInputMat * color;\\n\\n\\t// Apply RRT and ODT\\n\\tcolor = RRTAndODTFit( color );\\n\\n\\tcolor = ACESOutputMat * color;\\n\\n\\t// Clamp to [0, 1]\\n\\treturn saturate( color );\\n}\\n\\nvoid main () {\\n\\tvec3 viewNormal = normalize(v_viewNormal);\\n    vec3 viewDir = normalize( v_viewPosition );\\n\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 matcapUv = vec2( dot( x, viewNormal ), dot( y, viewNormal ) ) * 0.495 + 0.5; // 0.495 to remove artifacts caused by undersized matcap disks\\n    vec3 matcapColor = texture2D(u_matcapTexture, vec2(matcapUv.x, matcapUv.y)).rgb;\\n\\n\\tvec3 color = SRGBtoLinear(matcapColor);\\n    color *= 1.0 + 2.0 * clamp(v_worldNormal.y, 0.0, 1.0);\\n\\tcolor *= v_ao;\\n    color *= 1.0 - 0.5 * dot(vec3(1.0), fwidth(v_modelNormal));\\n\\n    float gobo = 1.0 - texture2D(u_goboTexture, (vDirectionalShadowCoord[0].yx / vDirectionalShadowCoord[0].w + 0.5) * 0.8 - 0.5).r;\\n\\tcolor *= 0.3 + 0.7 * linearstep(0.1, 1.0, gobo);\\n\\n    gl_FragColor = vec4(linearToSRGB(ACESFilmicToneMapping(color, 0.9)), 1.);\\n\\n    vec2 screenUv = gl_FragCoord.xy / u_resolution;\\n    float alpha = linearstep(-6.0, -2.0, v_worldPosition.y);\\n    gl_FragColor.rgb = mix(linearToSRGB(mix(u_bgColor1, u_bgColor2, screenUv.y)), gl_FragColor.rgb, alpha);\\n\\n}\\n\"","export default \"#include <common>\\n#include <packing>\\n\\nvarying vec2 vHighPrecisionZW;\\n\\nvoid main() {\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n    gl_FragColor = packDepthToRGBA( fragCoordZ );\\n}\\n\"","import * as THREE from 'three';\n\nimport loader from '../../core/loader';\nimport { properties } from '../../core/properties';\nimport blueNoise from '../../utils/blueNoise/blueNoise';\nimport { heroSharedUniforms } from '../hero/hero';\n\nimport vert from './coins.vert?raw';\nimport frag from './coins.frag?raw';\nimport fragDepth from './coinsDepth.frag?raw';\nimport { floatingCoinsRatio, vortexCoinsRatio } from '../../logic/successAnimationManager';\nimport { BufferGeometry, InstancedBufferGeometry, Mesh, ShaderMaterial } from 'three';\nimport { ASSETS_PATH } from '../../core/settings';\n\nconst coinContainer = new THREE.Object3D();\nlet coinMesh: Mesh | null = null;\nlet coinGeometry: InstancedBufferGeometry | null = null;\nlet coinMaterial: ShaderMaterial | null = null;\nlet positionsArray = null;\nlet orientArray = null;\nlet curveuArray = null;\nlet aoNArray = null;\nlet aoPArray = null;\nlet coinsCount = 0;\nlet animationRatio = 0;\nconst isFloating = true;\nlet matcapTexture;\nlet refGeometry: BufferGeometry;\nlet randsArray;\nconst coinsSharedUniforms = {\n\tu_time: { value: 0 },\n\tu_ratio: { value: 0 },\n\tu_isFloating: { value: 1 },\n};\n\nconst Coins = () => {\n\tasync function preload() {\n\t\tconst modelPath = ASSETS_PATH + '/models';\n\t\tconst texturePath = ASSETS_PATH + '/textures';\n\t\tloader.loadTexture(`${texturePath}/matcap_gold.jpg`, (texture) => {\n\t\t\tmatcapTexture = texture;\n\t\t\tmatcapTexture.needsUpdate = true;\n\t\t});\n\t\tloader.loadBuf(`${modelPath}/COIN.buf`, (geometry) => {\n\t\t\trefGeometry = geometry;\n\t\t});\n\t\tloader.loadBuf(`${modelPath}/COIN_PLACEMENT.buf`, (geometry) => {\n\t\t\tconst { position, aoN, aoP, curveu, orient } = geometry.attributes;\n\t\t\tpositionsArray = position.array;\n\t\t\taoNArray = aoN.array;\n\t\t\taoPArray = aoP.array;\n\t\t\tcurveuArray = curveu.array;\n\t\t\torientArray = orient.array;\n\n\t\t\tcoinsCount = position.count;\n\t\t});\n\t}\n\n\tfunction init() {\n\t\t_setupGeometry();\n\t\t_setupMaterial();\n\t\t_setupMesh();\n\t\tif (coinMesh) {\n\t\t\tcoinContainer.add(coinMesh);\n\t\t}\n\t}\n\n\tfunction _setupGeometry() {\n\t\trefGeometry.computeVertexNormals();\n\t\tconst geometry = new THREE.InstancedBufferGeometry();\n\t\tgeometry.index = refGeometry.index;\n\t\tObject.entries(refGeometry.attributes).forEach(([id, attr]) => geometry.setAttribute(id, attr));\n\n\t\trandsArray = new Float32Array(coinsCount * 3).map(() => Math.random() * 2 - 1);\n\n\t\tconst instanceAttributes = [\n\t\t\t['a_instancePosition', positionsArray, 3],\n\t\t\t['a_instanceQuaternion', orientArray, 4],\n\t\t\t['a_instanceCurveUV', curveuArray, 1],\n\t\t\t['a_instanceAoN', aoNArray, 3],\n\t\t\t['a_instanceAoP', aoPArray, 3],\n\t\t\t['a_instanceRand', randsArray, 3],\n\t\t];\n\n\t\tinstanceAttributes.forEach(([name, array, itemSize]) => {\n\t\t\tgeometry.setAttribute(name, new THREE.InstancedBufferAttribute(array, itemSize));\n\t\t});\n\n\t\tcoinGeometry = geometry;\n\t}\n\n\tfunction _setupMaterial() {\n\t\tcoinMaterial = new THREE.ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\t...heroSharedUniforms,\n\t\t\t\t...properties.sharedUniforms,\n\t\t\t\t...coinsSharedUniforms,\n\t\t\t\t...blueNoise.bn_sharedUniforms,\n\t\t\t\t...THREE.UniformsUtils.merge([THREE.UniformsLib.lights]),\n\t\t\t\tu_matcapTexture: { value: matcapTexture },\n\t\t\t},\n\t\t\tvertexShader: vert,\n\t\t\tfragmentShader: frag,\n\t\t\tlights: true,\n\t\t});\n\t}\n\n\tfunction _setupMesh() {\n\t\tif (coinGeometry && coinMaterial) {\n\t\t\tcoinMesh = new THREE.Mesh(coinGeometry, coinMaterial);\n\t\t\tcoinMesh.frustumCulled = false;\n\t\t\tcoinMesh.castShadow = true;\n\t\t\tcoinMesh.receiveShadow = true;\n\n\t\t\tcoinMesh.customDepthMaterial = new THREE.ShaderMaterial({\n\t\t\t\tuniforms: { ...coinsSharedUniforms },\n\t\t\t\tvertexShader: vert,\n\t\t\t\tfragmentShader: fragDepth,\n\t\t\t\tdefines: { IS_DEPTH: true },\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction update(dt: number) {\n\t\tconst isFloatingAnimationActive = vortexCoinsRatio === 0;\n\n\t\tanimationRatio = isFloatingAnimationActive ? floatingCoinsRatio : vortexCoinsRatio;\n\n\t\tcoinsSharedUniforms.u_ratio.value = animationRatio;\n\t\tcoinsSharedUniforms.u_time.value += dt;\n\n\t\tcoinsSharedUniforms.u_isFloating.value = isFloatingAnimationActive ? 1 : 0;\n\t\tif (coinMesh) {\n\t\t\tcoinMesh.rotation.y = (isFloating ? 0 : 4) * animationRatio;\n\t\t\tcoinMesh.visible = animationRatio > 0 && animationRatio < 1;\n\t\t}\n\t}\n\n\treturn {\n\t\tpreload,\n\t\tinit,\n\t\tupdate,\n\t};\n};\n\nconst coins = Coins();\n\nexport { coins, coinContainer };\n","export default \"varying vec2 v_uv;\\n\\nvoid main() {\\n    gl_Position = vec4(position.xy, 1.0, 1.0);\\n    v_uv = uv;\\n}\\n\"","export default \"uniform vec3 u_bgColor1;\\nuniform vec3 u_bgColor2;\\n\\nvarying vec2 v_uv;\\n\\nvec3 linearToSRGB(vec3 color) {\\n    return pow(color, vec3(1.0 / 2.2));\\n}\\n\\n#include <getBlueNoise>\\n\\nvoid main() {\\n    vec3 color = mix(u_bgColor1, u_bgColor2, v_uv.y);\\n    gl_FragColor = vec4(linearToSRGB(color) + getBlueNoise(gl_FragCoord.xy) * .004, 1.0);\\n}\\n\"","export default \"attribute vec3 a_instancePosition;\\nattribute vec3 a_instanceRandom;\\n\\nvarying vec2 v_uv;\\nvarying float v_opacity;\\n\\nuniform vec2 u_resolution;\\nuniform float u_size;\\nuniform float u_time;\\n\\nvec4 mod289(vec4 x) {\\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nfloat mod289(float x) {\\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n    return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nfloat permute(float x) {\\n    return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r) {\\n    return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat taylorInvSqrt(float r) {\\n    return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nvec4 grad4(float j, vec4 ip) {\\n    const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\\n    vec4 p,s;\\n\\n    p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\\n    p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\\n    s = vec4(lessThan(p, vec4(0.0)));\\n    p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\\n\\n    return p;\\n}\\n\\n#define F4 0.309016994374947451\\n#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n\\n\\nvec4 simplexNoiseDerivatives (vec4 v) {\\n    const vec4  C = vec4( 0.138196601125011,0.276393202250021,0.414589803375032,-0.447213595499958);\\n\\n    vec4 i  = floor(v + dot(v, vec4(F4)) );\\n    vec4 x0 = v -   i + dot(i, C.xxxx);\\n\\n    vec4 i0;\\n    vec3 isX = step( x0.yzw, x0.xxx );\\n    vec3 isYZ = step( x0.zww, x0.yyz );\\n    i0.x = isX.x + isX.y + isX.z;\\n    i0.yzw = 1.0 - isX;\\n    i0.y += isYZ.x + isYZ.y;\\n    i0.zw += 1.0 - isYZ.xy;\\n    i0.z += isYZ.z;\\n    i0.w += 1.0 - isYZ.z;\\n\\n    vec4 i3 = clamp( i0, 0.0, 1.0 );\\n    vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\\n    vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\\n\\n    vec4 x1 = x0 - i1 + C.xxxx;\\n    vec4 x2 = x0 - i2 + C.yyyy;\\n    vec4 x3 = x0 - i3 + C.zzzz;\\n    vec4 x4 = x0 + C.wwww;\\n\\n    i = mod289(i);\\n    float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\\n    vec4 j1 = permute( permute( permute( permute (\\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\\n\\n\\n    vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\\n\\n    vec4 p0 = grad4(j0,   ip);\\n    vec4 p1 = grad4(j1.x, ip);\\n    vec4 p2 = grad4(j1.y, ip);\\n    vec4 p3 = grad4(j1.z, ip);\\n    vec4 p4 = grad4(j1.w, ip);\\n\\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n    p0 *= norm.x;\\n    p1 *= norm.y;\\n    p2 *= norm.z;\\n    p3 *= norm.w;\\n    p4 *= taylorInvSqrt(dot(p4,p4));\\n\\n    vec3 values0 = vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2)); //value of contributions from each corner at point\\n    vec2 values1 = vec2(dot(p3, x3), dot(p4, x4));\\n\\n    vec3 m0 = max(0.5 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0); //(0.5 - x^2) where x is the distance\\n    vec2 m1 = max(0.5 - vec2(dot(x3,x3), dot(x4,x4)), 0.0);\\n\\n    vec3 temp0 = -6.0 * m0 * m0 * values0;\\n    vec2 temp1 = -6.0 * m1 * m1 * values1;\\n\\n    vec3 mmm0 = m0 * m0 * m0;\\n    vec2 mmm1 = m1 * m1 * m1;\\n\\n    float dx = temp0[0] * x0.x + temp0[1] * x1.x + temp0[2] * x2.x + temp1[0] * x3.x + temp1[1] * x4.x + mmm0[0] * p0.x + mmm0[1] * p1.x + mmm0[2] * p2.x + mmm1[0] * p3.x + mmm1[1] * p4.x;\\n    float dy = temp0[0] * x0.y + temp0[1] * x1.y + temp0[2] * x2.y + temp1[0] * x3.y + temp1[1] * x4.y + mmm0[0] * p0.y + mmm0[1] * p1.y + mmm0[2] * p2.y + mmm1[0] * p3.y + mmm1[1] * p4.y;\\n    float dz = temp0[0] * x0.z + temp0[1] * x1.z + temp0[2] * x2.z + temp1[0] * x3.z + temp1[1] * x4.z + mmm0[0] * p0.z + mmm0[1] * p1.z + mmm0[2] * p2.z + mmm1[0] * p3.z + mmm1[1] * p4.z;\\n    float dw = temp0[0] * x0.w + temp0[1] * x1.w + temp0[2] * x2.w + temp1[0] * x3.w + temp1[1] * x4.w + mmm0[0] * p0.w + mmm0[1] * p1.w + mmm0[2] * p2.w + mmm1[0] * p3.w + mmm1[1] * p4.w;\\n\\n    return vec4(dx, dy, dz, dw) * 49.0;\\n}\\n\\nvoid main() {\\n    vec2 aspect = vec2(1.0, u_resolution.y / u_resolution.x);\\n\\n    vec3 noise = simplexNoiseDerivatives(vec4(1.0 * (a_instancePosition + a_instanceRandom), 0.05 * u_time)).xyz;\\n    float ratio = fract(1.5 * (0.2 + 0.2 * a_instanceRandom.x) * u_time);\\n\\n    vec3 pos = position;\\n    pos *= u_size;\\n    pos += a_instancePosition;\\n    pos.x += 1.0 * ratio * (0.5 + 0.5 * a_instanceRandom.x);\\n    pos.y += noise.y;\\n    pos.x *= u_resolution.y / u_resolution.x;\\n\\n    gl_Position = vec4(pos, 1.0);\\n\\n    v_uv = uv;\\n    v_opacity = sin(PI * ratio);\\n\\n}\\n\"","export default \"varying vec2 v_uv;\\nvarying float v_opacity;\\nuniform vec3 u_color;\\nuniform float u_opacity;\\n\\nvoid main() {\\n    float dist = length(2.0 * (v_uv - 0.5));\\n    float alpha = 1.0 - dist;\\n\\n    gl_FragColor = vec4(u_color, u_opacity * alpha * v_opacity);\\n}\\n\"","import * as THREE from 'three';\nimport { properties } from '../../core/properties';\nimport blueNoise from '../../utils/blueNoise/blueNoise';\n\nimport vert from './bg.vert?raw';\nimport frag from './bg.frag?raw';\nimport particlesVert from './particles.vert?raw';\nimport particlesFrag from './particles.frag?raw';\nimport { Mesh, ShaderMaterial } from 'three';\n\nconst Background = () => {\n\tconst container = new THREE.Object3D();\n\tlet particles: Mesh & { material: ShaderMaterial };\n\n\tfunction init() {\n\t\tconst material = new THREE.ShaderMaterial({\n\t\t\tuniforms: Object.assign(\n\t\t\t\t{\n\t\t\t\t\tu_resolution: properties.sharedUniforms?.u_resolution,\n\t\t\t\t\tu_bgColor1: properties.sharedUniforms?.u_bgColor1,\n\t\t\t\t\tu_bgColor2: properties.sharedUniforms?.u_bgColor2,\n\t\t\t\t},\n\t\t\t\tblueNoise.bn_sharedUniforms,\n\t\t\t),\n\t\t\tvertexShader: vert,\n\t\t\tfragmentShader: frag,\n\t\t});\n\t\tconst mesh = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), material);\n\t\tmesh.renderOrder = 1;\n\t\tcontainer.add(mesh);\n\n\t\tinitParticles();\n\t}\n\n\tfunction initParticles() {\n\t\tconst particlesCount = 50;\n\t\tconst refGeometry = new THREE.PlaneGeometry(1, 1);\n\n\t\tconst geometry = new THREE.InstancedBufferGeometry();\n\t\tgeometry.index = refGeometry.index;\n\t\tObject.keys(refGeometry.attributes).forEach((id) => {\n\t\t\tgeometry.setAttribute(id, refGeometry.attributes[id]);\n\t\t});\n\t\tgeometry.instanceCount = particlesCount;\n\n\t\tconst positionArray = new Float32Array(particlesCount * 3);\n\t\tconst randomArray = new Float32Array(particlesCount * 3);\n\n\t\tfor (let i = 0; i < particlesCount; i++) {\n\t\t\tpositionArray[i * 3] = 3 * (Math.random() * 2 - 1);\n\t\t\tpositionArray[i * 3 + 1] = Math.random() * 2 - 1;\n\t\t\tpositionArray[i * 3 + 2] = 0.5 + 0.5 * Math.random();\n\n\t\t\trandomArray[i * 3] = Math.random();\n\t\t\trandomArray[i * 3 + 1] = Math.random();\n\t\t\trandomArray[i * 3 + 2] = Math.random();\n\t\t}\n\n\t\tgeometry.setAttribute('a_instancePosition', new THREE.InstancedBufferAttribute(positionArray, 3));\n\t\tgeometry.setAttribute('a_instanceRandom', new THREE.InstancedBufferAttribute(randomArray, 3));\n\n\t\tconst material = new THREE.ShaderMaterial({\n\t\t\tvertexShader: particlesVert,\n\t\t\tfragmentShader: particlesFrag,\n\t\t\tuniforms: {\n\t\t\t\tu_time: properties.sharedUniforms?.u_time || { value: properties.time },\n\t\t\t\tu_resolution: properties.sharedUniforms?.u_resolution || { value: properties.resolution },\n\t\t\t\tu_size: { value: 0.01 },\n\t\t\t\tu_color: { value: new THREE.Color() },\n\t\t\t\tu_opacity: { value: 0 },\n\t\t\t},\n\t\t\ttransparent: true,\n\t\t});\n\n\t\tparticles = new THREE.Mesh(geometry, material);\n\t\tparticles.renderOrder = 2;\n\t\tparticles.frustumCulled = false;\n\t\tcontainer.add(particles);\n\t}\n\n\tfunction update(_dt: number) {\n\t\tparticles.material.uniforms.u_size.value = properties.particlesSize;\n\t\tparticles.material.uniforms.u_color.value.set(properties.particlesColor);\n\t\tparticles.material.uniforms.u_opacity.value = properties.particlesOpacity;\n\t}\n\n\treturn { init, container, update };\n};\n\nexport default Background;\n","import * as THREE from 'three';\nimport { OrbitControls } from './controls/OrbitControls';\nimport { properties, resetProperties } from './core/properties';\nimport { heroBlocks, heroContainer } from './visuals/hero/hero';\nimport { coinContainer, coins } from './visuals/coins/coins';\nimport blueNoise from './utils/blueNoise/blueNoise';\nimport game from './logic/systemManager';\nimport settings from './core/settings';\nimport loader from './core/loader';\n\nimport Background from './visuals/bg/bg';\nimport { result, status } from './logic/stateManager';\nimport { setAnimationState } from '../main';\nimport { stopAnimationDuration } from './logic/stopAnimationManager';\nimport { AnimationResult } from '../types';\nimport { errorAnimationDuration } from './logic/errorAnimationManager';\nimport { successAnimationDuration } from './logic/successAnimationManager';\n\nTHREE.ColorManagement.enabled = false;\nconst background = Background();\n\nlet time = 0;\nlet lastRender = 0;\nconst targetFPS = 60;\nconst frameInterval = 1 / targetFPS;\n\nfunction render(dt: number) {\n\tif (properties.isPaused) {\n\t\tdt *= 0;\n\t}\n\n\tdt = Math.min(dt, 1 / 15);\n\n\tproperties.time += dt;\n\tproperties.deltaTime = dt;\n\tif (properties.sharedUniforms) {\n\t\tproperties.sharedUniforms.u_time.value = properties.time;\n\t\tproperties.sharedUniforms.u_deltaTime.value = dt;\n\t}\n\n\tconst viewportWidth = properties.viewportWidth;\n\tconst viewportHeight = properties.viewportHeight;\n\tconst cameraZoom = (properties.cameraZoom * viewportHeight) / 10;\n\tconst cameraOffsetX = properties.cameraOffsetX;\n\tconst cameraOffsetY = properties.cameraOffsetY;\n\tif (properties.camera) {\n\t\tproperties.camera.zoom = cameraZoom;\n\t\tproperties.camera.left = -viewportWidth / 2 - (cameraOffsetX * viewportWidth) / cameraZoom / 2;\n\t\tproperties.camera.right = viewportWidth / 2 - (cameraOffsetX * viewportWidth) / cameraZoom / 2;\n\t\tproperties.camera.top = viewportHeight / 2 - (cameraOffsetY * viewportHeight) / cameraZoom / 2;\n\t\tproperties.camera.bottom = -viewportHeight / 2 - (cameraOffsetY * viewportHeight) / cameraZoom / 2;\n\t\tproperties.camera.updateProjectionMatrix();\n\t}\n\n\tblueNoise.update(dt);\n\tgame.update(dt);\n\n\tconst camera = properties.camera;\n\tproperties.orbitControls?.update();\n\tproperties.orbitCamera?.updateMatrix();\n\tif (camera) {\n\t\tproperties.orbitCamera?.matrix.decompose(camera.position, camera.quaternion, camera.scale);\n\t\tcamera.matrix.compose(camera.position, camera.quaternion, camera.scale);\n\t}\n\n\theroBlocks.update(dt);\n\tcoins.update(dt);\n\tbackground.update(dt);\n\tif (properties.camera && properties.scene && properties.renderer) {\n\t\tproperties.renderer.render(properties?.scene, properties.camera);\n\t}\n}\nfunction animate() {\n\tconst newTime = performance.now() / 1000;\n\tconst dt = newTime - time;\n\tif (newTime - lastRender >= frameInterval) {\n\t\tlastRender = newTime;\n\t\trender(dt);\n\t\ttime = newTime;\n\t}\n\tproperties.renderer?.setAnimationLoop(animate);\n}\nfunction initAll() {\n\tif (properties.renderer) {\n\t\tproperties.renderer.shadowMap.enabled = true;\n\t\tproperties.renderer.shadowMap.type = THREE.PCFShadowMap;\n\t}\n\n\tproperties.scene = new THREE.Scene();\n\tproperties.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 1, 60);\n\tproperties.scene.add(properties.camera);\n\tproperties.camera.position.fromArray(settings.DEFAULT_POSITION);\n\n\tproperties.orbitCamera = properties.camera.clone();\n\n\tconst orbitControls = (properties.orbitControls = new OrbitControls(properties.orbitCamera, properties.orbitTarget));\n\torbitControls.target0.fromArray(settings.DEFAULT_LOOKAT_POSITION);\n\torbitControls.enableDamping = true;\n\torbitControls.enablePan = false;\n\torbitControls.minPolarAngle = Math.PI * 0.2; // radians\n\torbitControls.maxPolarAngle = Math.PI * 0.45; // radians\n\tif (properties.sharedUniforms) {\n\t\tconst bgColor1 = properties.sharedUniforms.u_bgColor1.value;\n\t\tconst bgColor2 = properties.sharedUniforms.u_bgColor2.value;\n\t\tbgColor1.set(properties.bgColor1).convertSRGBToLinear();\n\t\tbgColor2.set(properties.bgColor2).convertSRGBToLinear();\n\t}\n\n\tproperties.renderer?.setClearColor(properties.bgColor1, 1);\n\n\t// first the logic\n\tgame.init();\n\t// then the visuals\n\theroBlocks.init();\n\tcoins.init();\n\tbackground.init();\n\n\tproperties.scene.add(coinContainer);\n\tproperties.scene.add(background.container);\n\tproperties.scene.add(heroContainer);\n}\nfunction setSize(viewportWidth: number, viewportHeight: number) {\n\tproperties.viewportWidth = viewportWidth;\n\tproperties.viewportHeight = viewportHeight;\n\tproperties.viewportResolution.set(viewportWidth, window.innerHeight);\n\n\tlet dprWidth = viewportWidth * settings.DPR;\n\tlet dprHeight = viewportHeight * settings.DPR;\n\n\tif (settings.USE_PIXEL_LIMIT && dprWidth * dprHeight > settings.MAX_PIXEL_COUNT) {\n\t\tconst aspect = dprWidth / dprHeight;\n\t\tdprHeight = Math.sqrt(settings.MAX_PIXEL_COUNT / aspect);\n\t\tdprWidth = Math.ceil(dprHeight * aspect);\n\t\tdprHeight = Math.ceil(dprHeight);\n\t}\n\n\tproperties.width = dprWidth;\n\tproperties.height = dprHeight;\n\tproperties.resolution.set(dprWidth, dprHeight);\n\n\tproperties.camera?.updateProjectionMatrix();\n\tproperties.renderer?.setSize(dprWidth, dprHeight);\n\tif (properties.canvas) {\n\t\tproperties.canvas.style.width = `${viewportWidth}px`;\n\t\tproperties.canvas.style.height = `${viewportHeight}px`;\n\t}\n}\n\nfunction onResize(offset?: number) {\n\tproperties.cameraOffsetX = offset ? offset / window.innerWidth : 0;\n\tsetSize(window.innerWidth, window.innerHeight);\n}\nfunction initCallback(offset?: number) {\n\tinitAll();\n\ttime = performance.now() / 1000;\n\tlastRender = time;\n\twindow.addEventListener('resize', () => onResize(offset));\n\tonResize(offset);\n\tanimate();\n}\n\nexport async function loadTowerAnimation(canvasId: string, offset?: number) {\n\tconst existingCanvas = properties.renderer?.domElement || document.getElementById(canvasId);\n\tif (existingCanvas) return;\n\n\tawait heroBlocks.preload();\n\tawait coins.preload();\n\tawait blueNoise.preInit();\n\n\t// put it here to have the texture anisotropy support in the loader\n\tproperties.renderer = new THREE.WebGLRenderer({ ...settings.WEBGL_OPTS });\n\tif (properties.renderer) {\n\t\tproperties.renderer.domElement.id = canvasId;\n\t\tproperties.canvas = properties.renderer.domElement;\n\t\tproperties.orbitTarget = properties.renderer.domElement;\n\t\tloader.start(() => initCallback(offset));\n\t\tdocument.body.appendChild(properties.renderer.domElement);\n\t}\n}\n\nfunction removeCanvas(canvasId) {\n\tconst canvas = document.getElementById(canvasId);\n\n\tcanvas?.remove();\n\n\tproperties.renderer?.domElement?.remove();\n\tproperties.renderer?.state?.reset();\n\tproperties.renderer?.resetState();\n\tproperties.canvas = undefined;\n\tproperties.orbitTarget = undefined;\n\tproperties.renderer?.dispose();\n\tproperties.renderer = undefined;\n\n\tresetProperties();\n}\n\nexport async function removeTowerAnimation(canvasId: string) {\n\tconst canvas = document.getElementById(canvasId);\n\tif (!canvas) return;\n\n\tconst resultDelays = {\n\t\t[AnimationResult.FAILED]: errorAnimationDuration,\n\t\t[AnimationResult.COMPLETED]: successAnimationDuration,\n\t\t[AnimationResult.REPLAY]: successAnimationDuration,\n\t\t[AnimationResult.STOP]: stopAnimationDuration,\n\t};\n\tconst alreadyStopped = status === 'not-started';\n\tconst useResultDelay = result !== null;\n\n\tconst baseDelay = 1000 * 3.5;\n\tconst resultDelay = (resultDelays[result] || 1) * 1000 + baseDelay;\n\tconst baseStopDelay = stopAnimationDuration * 1000 * 2;\n\n\tconst removeDelay = useResultDelay ? resultDelay : baseDelay;\n\tconst stopDelay = useResultDelay ? baseStopDelay + resultDelay : baseStopDelay;\n\n\tif (!alreadyStopped) {\n\t\tsetTimeout(() => setAnimationState('stop'), stopDelay);\n\t}\n\n\tsetTimeout(() => removeCanvas(canvasId), alreadyStopped ? removeDelay : removeDelay + stopDelay);\n}\n","import { loadTowerAnimation, removeTowerAnimation } from './scripts/index';\nimport { properties } from './scripts/core/properties';\nimport { result, stateManager, status, statusIndex } from './scripts/logic/stateManager';\n\nfunction setAnimationState(id: string, isReplay = false) {\n\tstateManager.set(id, isReplay);\n}\ninterface Property {\n\tproperty: string;\n\tvalue: unknown;\n}\nfunction setAnimationProperties(newProps: Property[]) {\n\tfor (const item of newProps) {\n\t\tproperties[item.property] = item.value;\n\t}\n}\n\nexport {\n\tloadTowerAnimation,\n\tremoveTowerAnimation,\n\tsetAnimationProperties,\n\tstatus as animationStatus,\n\tstatusIndex as animationStatusIndex,\n\tresult as animationResult,\n\tsetAnimationState,\n};\n"],"names":["_changeEvent","_startEvent","_endEvent","OrbitControls","EventDispatcher","object","domElement","Vector3","MOUSE","TOUCH","scope","state","STATE","offset","quat","Quaternion","quatInverse","lastPosition","lastQuaternion","twoPI","position","spherical","rotateLeft","getAutoRotationAngle","sphericalDelta","min","max","scale","panOffset","zoomChanged","EPS","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","angle","rotateUp","panLeft","v","distance","objectMatrix","panUp","pan","deltaX","deltaY","element","targetDistance","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","event","handleMouseDownDolly","handleMouseDownPan","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","handleMouseWheel","handleTouchStartRotate","x","y","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchStartDollyPan","handleTouchStartDollyRotate","handleTouchMoveRotate","getSecondPointerPosition","handleTouchMovePan","handleTouchMoveDolly","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onPointerDown","onPointerMove","onPointerUp","addPointer","onTouchStart","onMouseDown","onTouchMove","onMouseMove","removePointer","onPointerCancel","mouseAction","onMouseWheel","trackPointer","onContextMenu","i","pointer","ASSETS_PATH","DPR","USE_PIXEL_LIMIT","MAX_PIXEL_COUNT","FREE_BLOCKS_COUNT","AUTO_RESTART","AUTO_START","SHOW_BLOCK","DEFAULT_POSITION","DEFAULT_LOOKAT_POSITION","WEBGL_OPTS","settings","getDistance","row","col","Tile","id","__publicField","HALF_SIZE","_a","neighbour","a","b","j","_dt","SIZE","SIZE_WITH_PADDING","TOTAL_TILES","TOTAL_TILES_WITH_PADDING","mainTile","tiles","Board","init","_","tile","_getNeighbouringTiles","getTile","getRandomFreeTile","freeTiles","reset","preUpdate","dt","update","board","resolution","THREE","viewportResolution","sharedUniforms","maxFreeBlocksCount","baseStyleProperties","propertiesInitialState","properties","resetProperties","Loader","list","loadedCount","onLoadCallback","loadBuf","url","cb","response","buffer","schematicJsonSize","schematic","vertexCount","indexCount","schematicAttributeList","geometry","offsetMap","schematicAttribute","componentSize","storageType","needsPack","packedComponents","dataLength","StorageType","tmpArr","byteSize","outArr","_packAttribute","_onLoad","error","packedComponentCount","isSign","size","divider","jk","k","delta","from","loadTexture","texture","start","loadFunction","loader","MathUtils","val","ratio","toMin","toMax","ease","math","Ease","quartInOut","e","sineOut","backIn","backOut","t","backInOut","cubicBezier","x1","y1","x2","y2","bezier","p0","p1","p2","p3","cX","bX","solveBezier","epsilon","t0","t1","xEstimate","customEasing","getBlueNoiseShader","BlueNoise","bn_sharedUniforms","TEXTURE_SIZE","preInit","blueNoise","stateSignal","MinSignal","spawnSignal","endCycleSignal","gameEndedSignal","errorAnimationEndedSignal","completeAnimationEndedSignal","stopAnimationEndedSignal","lightCameraHelperSignal","lightCameraUpdateSignal","AnimationStatus","AnimationResult","SuccessLevel","PREVENT_CYCLE_STATES","statusOrder","resetCycleResults","statusIndex","status","hasNotStarted","isStart","isFree","isResult","isResultAnimation","isRestart","isReplayResult","isSuccessResult","isFailResult","isStopped","result","statusUpdateQueue","completeAnimationLevel","StateManager","updateAfterCycle","setFree","setResultAnimation","callback","updateFlags","_canUpdateStatus","newStatus","hasResult","isReplay","newStateIndex","_updateStatusAndResult","newResult","animationStyle","set","actions","setStart","setPause","setResume","setStop","setFail","setRestartAnimation","setRestart","showVisual","successActions","setComplete","setComplete2","setComplete3","_b","_queueStatusUpdate","logicBlock","blocks","block","blocksVisual","stateManager","Block","rand","thresh","neighbours","animationDelay","bestTile","keepId","clampedMoveAnimationRatio","isActive","stopRatio","stopAnimationDuration","stopSpawnRatio","stopPushDownRatio","StopAnimationManager","resetRatios","stopAnimationManager","failRatio","errorAnimationDuration","failShakeRatio","failFloatingCubesRatio","failSpawnRatio","failPushDownRatio","ErrorAnimationManager","errorAnimationManager","currentAnimationStyle","successRatio","successAnimationDuration","towerRotationRatio","floatingCoinsRatio","floatingCubesRatio","vortexCoinsRatio","successPushDownRatio","successColorTowerRatio","floatingCubesDisplacement","SuccessAnimationManager","_triggerNewAnimation","_updateRatios1","_updateRatios2","_updateRatios3","successAnimationManager","firstStartAnimationRatio","lastSpawnedBlock","cycleIndex","previousSuccessBlocksAnimationRatio","SystemManager","_spawnBlock","_shouldPreventSpawn","_spawnMultipleBlocks","_spawnSingleBlock","blocksToSpawn","newTile","needsErrorBlockReplacement","canAddNewBlock","_startNewCycle","_calculatePaths","_isFree","index","needsRestart","_updateAnimationRatios","_checkCycleCompletion","isCycleComplete","game","vert$2","frag$2","fragDepth$1","HALF_PI","_v0","HeroBlockCoordinates","TOTAL_BLOCKS","_v2_0","_v2_1","_v3_0","_v3_1","_q_0","_q_1","MAIN_COLOR","SUCCESS_COLOR","ERROR_COLOR","DEFAULT_COLOR","_c","_c2","heroContainer","heroSharedUniforms","heroState","Hero","preload","arr","modelPath","texturePath","_onBaseBlocksLoaded","_onBoxLoaded","orient","uniforms","material","vert","frag","fragDepth","refGeometry","createInstancedAttribute","name","itemSize","array","_assignFinalAnimationToTiles","infoData","i4","rowMap","tileIndex","posIndex","orientIndex","resetBlockFromLogicBlock","_updateColors","color","preFallColorRatio","_updateInfoTexture","endAnimationRatio","_updateFreeBlocks","_d","_updateAttributes","renderCount","attribute","_updateStopAnimation","_i","_updateLongBlockAnimation","animationRatio","_updateFailAnimation","frameStart","frameEnd","frameRatio","push","shake","_updateFloatAnimation","delay","pushDownRatio","easedRestartAnimationRatio","easedFirstStartAnimationRatio","heroBlocks","vert$1","frag$1","coinContainer","coinMesh","coinGeometry","coinMaterial","positionsArray","orientArray","curveuArray","aoNArray","aoPArray","coinsCount","matcapTexture","randsArray","coinsSharedUniforms","Coins","aoN","aoP","curveu","_setupGeometry","_setupMaterial","_setupMesh","attr","isFloatingAnimationActive","coins","particlesVert","particlesFrag","Background","container","particles","mesh","initParticles","positionArray","randomArray","background","time","lastRender","targetFPS","frameInterval","render","viewportWidth","viewportHeight","cameraZoom","cameraOffsetX","cameraOffsetY","camera","animate","newTime","initAll","orbitControls","bgColor1","bgColor2","setSize","dprWidth","dprHeight","aspect","onResize","initCallback","loadTowerAnimation","canvasId","removeCanvas","canvas","_e","_f","removeTowerAnimation","resultDelays","alreadyStopped","useResultDelay","baseDelay","resultDelay","baseStopDelay","removeDelay","stopDelay","setAnimationState","setAnimationProperties","newProps","item"],"mappings":"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"}